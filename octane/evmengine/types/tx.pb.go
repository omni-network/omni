// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: octane/evmengine/types/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState is an empty genesis state required to trigger valsync genesis logic only.
type GenesisState struct {
	ExecutionBlockHash []byte `protobuf:"bytes,1,opt,name=execution_block_hash,json=executionBlockHash,proto3" json:"execution_block_hash,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetExecutionBlockHash() []byte {
	if m != nil {
		return m.ExecutionBlockHash
	}
	return nil
}

// MsgExecutionPayload defines the next EVM execution payload and the
// logs from previous execution payload.
type MsgExecutionPayload struct {
	Authority             string                 `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	BlobCommitments       [][]byte               `protobuf:"bytes,4,rep,name=blob_commitments,json=blobCommitments,proto3" json:"blob_commitments,omitempty"`
	ExecutionPayloadDeneb *ExecutionPayloadDeneb `protobuf:"bytes,5,opt,name=execution_payload_deneb,json=executionPayloadDeneb,proto3" json:"execution_payload_deneb,omitempty"`
}

func (m *MsgExecutionPayload) Reset()         { *m = MsgExecutionPayload{} }
func (m *MsgExecutionPayload) String() string { return proto.CompactTextString(m) }
func (*MsgExecutionPayload) ProtoMessage()    {}
func (*MsgExecutionPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{1}
}
func (m *MsgExecutionPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutionPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutionPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutionPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutionPayload.Merge(m, src)
}
func (m *MsgExecutionPayload) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutionPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutionPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutionPayload proto.InternalMessageInfo

func (m *MsgExecutionPayload) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgExecutionPayload) GetBlobCommitments() [][]byte {
	if m != nil {
		return m.BlobCommitments
	}
	return nil
}

func (m *MsgExecutionPayload) GetExecutionPayloadDeneb() *ExecutionPayloadDeneb {
	if m != nil {
		return m.ExecutionPayloadDeneb
	}
	return nil
}

type ExecutionPayloadResponse struct {
}

func (m *ExecutionPayloadResponse) Reset()         { *m = ExecutionPayloadResponse{} }
func (m *ExecutionPayloadResponse) String() string { return proto.CompactTextString(m) }
func (*ExecutionPayloadResponse) ProtoMessage()    {}
func (*ExecutionPayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{2}
}
func (m *ExecutionPayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionPayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionPayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionPayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionPayloadResponse.Merge(m, src)
}
func (m *ExecutionPayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionPayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionPayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionPayloadResponse proto.InternalMessageInfo

// EVMEvent represents a contract log event.
// Derived fields are not included in the protobuf.
type EVMEvent struct {
	Address []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics  [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data    []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EVMEvent) Reset()         { *m = EVMEvent{} }
func (m *EVMEvent) String() string { return proto.CompactTextString(m) }
func (*EVMEvent) ProtoMessage()    {}
func (*EVMEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{3}
}
func (m *EVMEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMEvent.Merge(m, src)
}
func (m *EVMEvent) XXX_Size() int {
	return m.Size()
}
func (m *EVMEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EVMEvent proto.InternalMessageInfo

func (m *EVMEvent) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EVMEvent) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *EVMEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ExecutionPayloadDeneb represents the EVM execution payload.
// Copied from https://github.com/prysmaticlabs/prysm/blob/develop/proto/engine/v1/execution_engine.proto.
type ExecutionPayloadDeneb struct {
	ParentHash    Hash         `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3,customtype=Hash" json:"parent_hash"`
	FeeRecipient  Address      `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3,customtype=Address" json:"fee_recipient"`
	StateRoot     Hash         `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3,customtype=Hash" json:"state_root"`
	ReceiptsRoot  Hash         `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3,customtype=Hash" json:"receipts_root"`
	LogsBloom     []byte       `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	PrevRandao    Hash         `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3,customtype=Hash" json:"prev_randao"`
	BlockNumber   uint64       `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit      uint64       `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed       uint64       `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp     uint64       `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData     []byte       `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BaseFeePerGas []byte       `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	BlockHash     Hash         `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3,customtype=Hash" json:"block_hash"`
	Transactions  [][]byte     `protobuf:"bytes,14,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Withdrawals   []Withdrawal `protobuf:"bytes,15,rep,name=withdrawals,proto3" json:"withdrawals"`
	BlobGasUsed   uint64       `protobuf:"varint,16,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	ExcessBlobGas uint64       `protobuf:"varint,17,opt,name=excess_blob_gas,json=excessBlobGas,proto3" json:"excess_blob_gas,omitempty"`
}

func (m *ExecutionPayloadDeneb) Reset()         { *m = ExecutionPayloadDeneb{} }
func (m *ExecutionPayloadDeneb) String() string { return proto.CompactTextString(m) }
func (*ExecutionPayloadDeneb) ProtoMessage()    {}
func (*ExecutionPayloadDeneb) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{4}
}
func (m *ExecutionPayloadDeneb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionPayloadDeneb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionPayloadDeneb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionPayloadDeneb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionPayloadDeneb.Merge(m, src)
}
func (m *ExecutionPayloadDeneb) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionPayloadDeneb) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionPayloadDeneb.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionPayloadDeneb proto.InternalMessageInfo

func (m *ExecutionPayloadDeneb) GetLogsBloom() []byte {
	if m != nil {
		return m.LogsBloom
	}
	return nil
}

func (m *ExecutionPayloadDeneb) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *ExecutionPayloadDeneb) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ExecutionPayloadDeneb) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *ExecutionPayloadDeneb) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ExecutionPayloadDeneb) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ExecutionPayloadDeneb) GetBaseFeePerGas() []byte {
	if m != nil {
		return m.BaseFeePerGas
	}
	return nil
}

func (m *ExecutionPayloadDeneb) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *ExecutionPayloadDeneb) GetWithdrawals() []Withdrawal {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

func (m *ExecutionPayloadDeneb) GetBlobGasUsed() uint64 {
	if m != nil {
		return m.BlobGasUsed
	}
	return 0
}

func (m *ExecutionPayloadDeneb) GetExcessBlobGas() uint64 {
	if m != nil {
		return m.ExcessBlobGas
	}
	return 0
}

// The withdrawal receipt with the recipient address and amount withdrawn.
// Note that ValidatorIndex isn't used in Octane and is always 0.
type Withdrawal struct {
	// Withdrawal index for accounting purposes
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The execution address receiving the funds
	Address Address `protobuf:"bytes,2,opt,name=address,proto3,customtype=Address" json:"address"`
	// The withdrawn amount in Gwei
	AmountGwei uint64 `protobuf:"varint,3,opt,name=amount_gwei,json=amountGwei,proto3" json:"amount_gwei,omitempty"`
}

func (m *Withdrawal) Reset()         { *m = Withdrawal{} }
func (m *Withdrawal) String() string { return proto.CompactTextString(m) }
func (*Withdrawal) ProtoMessage()    {}
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{5}
}
func (m *Withdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdrawal.Merge(m, src)
}
func (m *Withdrawal) XXX_Size() int {
	return m.Size()
}
func (m *Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_Withdrawal proto.InternalMessageInfo

func (m *Withdrawal) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Withdrawal) GetAmountGwei() uint64 {
	if m != nil {
		return m.AmountGwei
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "octane.evmengine.types.GenesisState")
	proto.RegisterType((*MsgExecutionPayload)(nil), "octane.evmengine.types.MsgExecutionPayload")
	proto.RegisterType((*ExecutionPayloadResponse)(nil), "octane.evmengine.types.ExecutionPayloadResponse")
	proto.RegisterType((*EVMEvent)(nil), "octane.evmengine.types.EVMEvent")
	proto.RegisterType((*ExecutionPayloadDeneb)(nil), "octane.evmengine.types.ExecutionPayloadDeneb")
	proto.RegisterType((*Withdrawal)(nil), "octane.evmengine.types.Withdrawal")
}

func init() { proto.RegisterFile("octane/evmengine/types/tx.proto", fileDescriptor_288b272163299061) }

var fileDescriptor_288b272163299061 = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc6, 0x9b, 0xc4, 0x7e, 0x5e, 0x37, 0x66, 0x48, 0xd3, 0xc1, 0x80, 0x63, 0x7c, 0x00,
	0xb7, 0x55, 0xed, 0x34, 0x70, 0xe2, 0x04, 0xa6, 0x21, 0x28, 0x22, 0x28, 0xda, 0x0a, 0x90, 0xb8,
	0xac, 0x66, 0x77, 0x5f, 0xd7, 0x23, 0xbc, 0x33, 0xcb, 0xcc, 0xd8, 0x71, 0x6e, 0x88, 0x03, 0x67,
	0x3e, 0x4a, 0x3f, 0x46, 0x8f, 0x3d, 0x70, 0x40, 0x1c, 0x2a, 0x48, 0x0e, 0xf9, 0x1a, 0x68, 0x66,
	0x63, 0x3b, 0x04, 0x47, 0xe2, 0xb4, 0x33, 0xbf, 0xf7, 0x7b, 0x3b, 0xef, 0xcf, 0xef, 0x3d, 0xd8,
	0x93, 0x89, 0x61, 0x02, 0x07, 0x38, 0xcd, 0x51, 0x64, 0x5c, 0xe0, 0xc0, 0x9c, 0x17, 0xa8, 0x07,
	0x66, 0xd6, 0x2f, 0x94, 0x34, 0x92, 0xec, 0x96, 0x84, 0xfe, 0x82, 0xd0, 0x77, 0x84, 0xd6, 0x4e,
	0x26, 0x33, 0xe9, 0x28, 0x03, 0x7b, 0x2a, 0xd9, 0xad, 0x07, 0x89, 0xd4, 0xb9, 0xd4, 0x83, 0x5c,
	0x67, 0x83, 0xe9, 0x53, 0xfb, 0x29, 0x0d, 0xdd, 0xcf, 0x20, 0x38, 0x42, 0x81, 0x9a, 0xeb, 0xe7,
	0x86, 0x19, 0x24, 0xfb, 0xb0, 0x83, 0x33, 0x4c, 0x26, 0x86, 0x4b, 0x11, 0xc5, 0x63, 0x99, 0xfc,
	0x18, 0x8d, 0x98, 0x1e, 0x51, 0xaf, 0xe3, 0xf5, 0x82, 0x90, 0x2c, 0x6c, 0x43, 0x6b, 0xfa, 0x8a,
	0xe9, 0x51, 0xf7, 0x6f, 0x0f, 0xde, 0x3e, 0xd1, 0xd9, 0xe1, 0xdc, 0x72, 0xca, 0xce, 0xc7, 0x92,
	0xa5, 0xe4, 0x3d, 0xa8, 0xb1, 0x89, 0x19, 0x49, 0xc5, 0xcd, 0xb9, 0x73, 0xaf, 0x85, 0x4b, 0x80,
	0x3c, 0x84, 0x66, 0x3c, 0x96, 0x71, 0x94, 0xc8, 0x3c, 0xe7, 0x26, 0x47, 0x61, 0x34, 0xf5, 0x3b,
	0x95, 0x5e, 0x10, 0x6e, 0x5b, 0xfc, 0x8b, 0x25, 0x4c, 0x10, 0x1e, 0x2c, 0x43, 0x2a, 0xca, 0xbf,
	0x47, 0x29, 0x0a, 0x8c, 0xe9, 0x46, 0xc7, 0xeb, 0xd5, 0x0f, 0x9e, 0xf4, 0x57, 0xd7, 0xa2, 0x7f,
	0x3b, 0xa6, 0x67, 0xd6, 0x29, 0xbc, 0x8f, 0xab, 0xe0, 0x4f, 0xef, 0xfd, 0x72, 0xf5, 0xf2, 0xd1,
	0x32, 0xc2, 0x63, 0xbf, 0xba, 0xde, 0xac, 0x1c, 0xfb, 0xd5, 0x4a, 0xd3, 0xef, 0xb6, 0x80, 0xde,
	0xfe, 0x57, 0x88, 0xba, 0x90, 0x42, 0x63, 0xf7, 0x14, 0xaa, 0x87, 0xdf, 0x9d, 0x1c, 0x4e, 0x51,
	0x18, 0x42, 0x61, 0x8b, 0xa5, 0xa9, 0x42, 0xad, 0xaf, 0x0b, 0x36, 0xbf, 0x92, 0x5d, 0xd8, 0x34,
	0xb2, 0xe0, 0x89, 0xa6, 0xeb, 0x2e, 0xcb, 0xeb, 0x1b, 0x21, 0xe0, 0xa7, 0xcc, 0x30, 0x5a, 0x71,
	0x74, 0x77, 0xee, 0xfe, 0xbe, 0x01, 0xf7, 0x57, 0x86, 0x4e, 0x9e, 0x40, 0xbd, 0x60, 0x0a, 0x85,
	0xb9, 0xd1, 0x94, 0x61, 0xf0, 0xea, 0xcd, 0xde, 0xda, 0x9f, 0x6f, 0xf6, 0x7c, 0xdb, 0x8e, 0x10,
	0x4a, 0x82, 0x3d, 0x93, 0x4f, 0xa0, 0xf1, 0x02, 0x31, 0x52, 0x98, 0xf0, 0x82, 0xa3, 0x30, 0x74,
	0xdd, 0x39, 0x6c, 0x5f, 0x3b, 0x6c, 0x7d, 0x5e, 0x06, 0x17, 0x06, 0x2f, 0x10, 0xc3, 0x39, 0x89,
	0x3c, 0x06, 0xd0, 0x56, 0x0b, 0x91, 0x92, 0xd2, 0x94, 0x81, 0xdd, 0x7a, 0xa3, 0xe6, 0xec, 0xa1,
	0x94, 0x86, 0x3c, 0x85, 0x86, 0xc2, 0x04, 0x79, 0x61, 0x74, 0xc9, 0xf7, 0x57, 0xf0, 0x83, 0x39,
	0xc5, 0xb9, 0xbc, 0x0f, 0x30, 0x96, 0x99, 0xb6, 0xea, 0x92, 0xb9, 0x6b, 0x61, 0x10, 0xd6, 0x2c,
	0x32, 0xb4, 0x80, 0xcb, 0x51, 0xe1, 0x34, 0x52, 0x4c, 0xa4, 0x4c, 0xd2, 0xcd, 0x95, 0x39, 0x2a,
	0x9c, 0x86, 0xce, 0x4e, 0x3e, 0x80, 0xa0, 0x94, 0xa9, 0x98, 0xe4, 0x31, 0x2a, 0xba, 0xd5, 0xf1,
	0x7a, 0x7e, 0x58, 0x77, 0xd8, 0x37, 0x0e, 0x22, 0xef, 0x42, 0x2d, 0x63, 0x3a, 0x1a, 0xf3, 0x9c,
	0x1b, 0x5a, 0x75, 0xf6, 0x6a, 0xc6, 0xf4, 0xd7, 0xf6, 0x4e, 0xde, 0x01, 0x7b, 0x8e, 0x26, 0x1a,
	0x53, 0x5a, 0x73, 0xb6, 0xad, 0x8c, 0xe9, 0x6f, 0x35, 0x3a, 0x05, 0x1b, 0x9e, 0xa3, 0x36, 0x2c,
	0x2f, 0x28, 0x38, 0xdb, 0x12, 0xb0, 0x69, 0xe0, 0xcc, 0x28, 0x16, 0xb9, 0xfe, 0xd5, 0xcb, 0x34,
	0x1c, 0xf2, 0x8c, 0x19, 0x46, 0x3e, 0x82, 0x66, 0xcc, 0x34, 0x46, 0xb6, 0x01, 0x05, 0xaa, 0x28,
	0x63, 0x9a, 0x06, 0x8e, 0xd4, 0xb0, 0xf8, 0x97, 0x88, 0xa7, 0xa8, 0x8e, 0x98, 0xb6, 0xe5, 0xbe,
	0x31, 0x67, 0x8d, 0x55, 0xe5, 0x8e, 0xe7, 0xc3, 0x46, 0xba, 0x10, 0x18, 0xc5, 0x84, 0x66, 0x89,
	0xd5, 0x86, 0xa6, 0xf7, 0x9c, 0x98, 0xfe, 0x85, 0x91, 0x63, 0xa8, 0x9f, 0x71, 0x33, 0x4a, 0x15,
	0x3b, 0x63, 0x63, 0x4d, 0xb7, 0x3b, 0x95, 0x5e, 0xfd, 0xa0, 0x7b, 0xd7, 0x8c, 0x7c, 0xbf, 0xa0,
	0x0e, 0x7d, 0xfb, 0x6a, 0x78, 0xd3, 0x99, 0x74, 0xa1, 0xe1, 0xc6, 0x74, 0x51, 0xa2, 0xe6, 0xa2,
	0xbc, 0xf1, 0xd1, 0x75, 0x99, 0x3e, 0x84, 0x6d, 0x9c, 0x25, 0xa8, 0x5d, 0x47, 0x1d, 0x95, 0xbe,
	0xe5, 0x58, 0x8d, 0x12, 0x1e, 0x96, 0xdc, 0xae, 0x00, 0x58, 0x3e, 0x46, 0x76, 0x60, 0x83, 0x8b,
	0x14, 0x67, 0x4e, 0xc4, 0x7e, 0x58, 0x5e, 0xc8, 0xc3, 0xe5, 0x00, 0xdd, 0xa1, 0xd5, 0xc5, 0x44,
	0xed, 0x41, 0x9d, 0xe5, 0x72, 0x22, 0x4c, 0x94, 0x9d, 0x21, 0x77, 0x3a, 0xf5, 0x43, 0x28, 0xa1,
	0xa3, 0x33, 0xe4, 0x07, 0xbf, 0x7a, 0x00, 0x27, 0x3a, 0x7b, 0x8e, 0x6a, 0xca, 0x13, 0x24, 0x3f,
	0x41, 0xf3, 0x3f, 0x3b, 0xea, 0xf1, 0x5d, 0x55, 0x59, 0xb1, 0xd0, 0x5a, 0xfb, 0xff, 0x77, 0xcd,
	0xcc, 0x57, 0x43, 0x6b, 0xe3, 0xe7, 0xab, 0x97, 0x8f, 0xbc, 0xe1, 0xfe, 0xab, 0x8b, 0xb6, 0xf7,
	0xfa, 0xa2, 0xed, 0xfd, 0x75, 0xd1, 0xf6, 0x7e, 0xbb, 0x6c, 0xaf, 0xbd, 0xbe, 0x6c, 0xaf, 0xfd,
	0x71, 0xd9, 0x5e, 0xfb, 0x61, 0x77, 0xf5, 0x96, 0x8f, 0x37, 0xdd, 0x72, 0xfe, 0xf8, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x49, 0x79, 0x81, 0x8e, 0x06, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	// ExecutionPayload submits a new execution payload from consensus to the OmniEVM.
	ExecutionPayload(ctx context.Context, in *MsgExecutionPayload, opts ...grpc.CallOption) (*ExecutionPayloadResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) ExecutionPayload(ctx context.Context, in *MsgExecutionPayload, opts ...grpc.CallOption) (*ExecutionPayloadResponse, error) {
	out := new(ExecutionPayloadResponse)
	err := c.cc.Invoke(ctx, "/octane.evmengine.types.MsgService/ExecutionPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	// ExecutionPayload submits a new execution payload from consensus to the OmniEVM.
	ExecutionPayload(context.Context, *MsgExecutionPayload) (*ExecutionPayloadResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) ExecutionPayload(ctx context.Context, req *MsgExecutionPayload) (*ExecutionPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionPayload not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_ExecutionPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecutionPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ExecutionPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/octane.evmengine.types.MsgService/ExecutionPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ExecutionPayload(ctx, req.(*MsgExecutionPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var MsgService_serviceDesc = _MsgService_serviceDesc
var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "octane.evmengine.types.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutionPayload",
			Handler:    _MsgService_ExecutionPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "octane/evmengine/types/tx.proto",
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutionBlockHash) > 0 {
		i -= len(m.ExecutionBlockHash)
		copy(dAtA[i:], m.ExecutionBlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutionBlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecutionPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutionPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutionPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionPayloadDeneb != nil {
		{
			size, err := m.ExecutionPayloadDeneb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BlobCommitments) > 0 {
		for iNdEx := len(m.BlobCommitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlobCommitments[iNdEx])
			copy(dAtA[i:], m.BlobCommitments[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BlobCommitments[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionPayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionPayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionPayloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EVMEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionPayloadDeneb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionPayloadDeneb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionPayloadDeneb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExcessBlobGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExcessBlobGas))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BlobGasUsed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlobGasUsed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Withdrawals) > 0 {
		for iNdEx := len(m.Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactions[iNdEx])
			copy(dAtA[i:], m.Transactions[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Transactions[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	{
		size := m.BlockHash.Size()
		i -= size
		if _, err := m.BlockHash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.BaseFeePerGas) > 0 {
		i -= len(m.BaseFeePerGas)
		copy(dAtA[i:], m.BaseFeePerGas)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BaseFeePerGas)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.GasUsed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x48
	}
	if m.GasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.PrevRandao.Size()
		i -= size
		if _, err := m.PrevRandao.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.LogsBloom) > 0 {
		i -= len(m.LogsBloom)
		copy(dAtA[i:], m.LogsBloom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LogsBloom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.ReceiptsRoot.Size()
		i -= size
		if _, err := m.ReceiptsRoot.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.StateRoot.Size()
		i -= size
		if _, err := m.StateRoot.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FeeRecipient.Size()
		i -= size
		if _, err := m.FeeRecipient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ParentHash.Size()
		i -= size
		if _, err := m.ParentHash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Withdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmountGwei != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AmountGwei))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Index != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExecutionBlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecutionPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BlobCommitments) > 0 {
		for _, b := range m.BlobCommitments {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ExecutionPayloadDeneb != nil {
		l = m.ExecutionPayloadDeneb.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ExecutionPayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EVMEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, b := range m.Topics {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ExecutionPayloadDeneb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ParentHash.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.FeeRecipient.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.StateRoot.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ReceiptsRoot.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.LogsBloom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.PrevRandao.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTx(uint64(m.GasLimit))
	}
	if m.GasUsed != 0 {
		n += 1 + sovTx(uint64(m.GasUsed))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BaseFeePerGas)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.BlockHash.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Withdrawals) > 0 {
		for _, e := range m.Withdrawals {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.BlobGasUsed != 0 {
		n += 2 + sovTx(uint64(m.BlobGasUsed))
	}
	if m.ExcessBlobGas != 0 {
		n += 2 + sovTx(uint64(m.ExcessBlobGas))
	}
	return n
}

func (m *Withdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovTx(uint64(m.Index))
	}
	l = m.Address.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.AmountGwei != 0 {
		n += 1 + sovTx(uint64(m.AmountGwei))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionBlockHash = append(m.ExecutionBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecutionBlockHash == nil {
				m.ExecutionBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecutionPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutionPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutionPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobCommitments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlobCommitments = append(m.BlobCommitments, make([]byte, postIndex-iNdEx))
			copy(m.BlobCommitments[len(m.BlobCommitments)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPayloadDeneb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionPayloadDeneb == nil {
				m.ExecutionPayloadDeneb = &ExecutionPayloadDeneb{}
			}
			if err := m.ExecutionPayloadDeneb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionPayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionPayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionPayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, make([]byte, postIndex-iNdEx))
			copy(m.Topics[len(m.Topics)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionPayloadDeneb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionPayloadDeneb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionPayloadDeneb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ParentHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRecipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StateRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceiptsRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsBloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogsBloom = append(m.LogsBloom[:0], dAtA[iNdEx:postIndex]...)
			if m.LogsBloom == nil {
				m.LogsBloom = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRandao", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevRandao.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeePerGas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFeePerGas = append(m.BaseFeePerGas[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseFeePerGas == nil {
				m.BaseFeePerGas = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawals = append(m.Withdrawals, Withdrawal{})
			if err := m.Withdrawals[len(m.Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobGasUsed", wireType)
			}
			m.BlobGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcessBlobGas", wireType)
			}
			m.ExcessBlobGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExcessBlobGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountGwei", wireType)
			}
			m.AmountGwei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountGwei |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
