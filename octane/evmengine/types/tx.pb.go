// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: octane/evmengine/types/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgExecutionPayload defines the  next EVM execution payload and the
// logs from previous execution payload.
type MsgExecutionPayload struct {
	Authority         string      `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ExecutionPayload  []byte      `protobuf:"bytes,2,opt,name=execution_payload,json=executionPayload,proto3" json:"execution_payload,omitempty"`
	PrevPayloadEvents []*EVMEvent `protobuf:"bytes,3,rep,name=prev_payload_events,json=prevPayloadEvents,proto3" json:"prev_payload_events,omitempty"`
}

func (m *MsgExecutionPayload) Reset()         { *m = MsgExecutionPayload{} }
func (m *MsgExecutionPayload) String() string { return proto.CompactTextString(m) }
func (*MsgExecutionPayload) ProtoMessage()    {}
func (*MsgExecutionPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{0}
}
func (m *MsgExecutionPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutionPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutionPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutionPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutionPayload.Merge(m, src)
}
func (m *MsgExecutionPayload) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutionPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutionPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutionPayload proto.InternalMessageInfo

func (m *MsgExecutionPayload) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgExecutionPayload) GetExecutionPayload() []byte {
	if m != nil {
		return m.ExecutionPayload
	}
	return nil
}

func (m *MsgExecutionPayload) GetPrevPayloadEvents() []*EVMEvent {
	if m != nil {
		return m.PrevPayloadEvents
	}
	return nil
}

type ExecutionPayloadResponse struct {
}

func (m *ExecutionPayloadResponse) Reset()         { *m = ExecutionPayloadResponse{} }
func (m *ExecutionPayloadResponse) String() string { return proto.CompactTextString(m) }
func (*ExecutionPayloadResponse) ProtoMessage()    {}
func (*ExecutionPayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{1}
}
func (m *ExecutionPayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionPayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionPayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionPayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionPayloadResponse.Merge(m, src)
}
func (m *ExecutionPayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionPayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionPayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionPayloadResponse proto.InternalMessageInfo

// EVMEvent represents a contract log event.
// Derived fields are not included in the protobuf.
type EVMEvent struct {
	Address []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics  [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data    []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EVMEvent) Reset()         { *m = EVMEvent{} }
func (m *EVMEvent) String() string { return proto.CompactTextString(m) }
func (*EVMEvent) ProtoMessage()    {}
func (*EVMEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_288b272163299061, []int{2}
}
func (m *EVMEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMEvent.Merge(m, src)
}
func (m *EVMEvent) XXX_Size() int {
	return m.Size()
}
func (m *EVMEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EVMEvent proto.InternalMessageInfo

func (m *EVMEvent) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EVMEvent) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *EVMEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgExecutionPayload)(nil), "octane.evmengine.types.MsgExecutionPayload")
	proto.RegisterType((*ExecutionPayloadResponse)(nil), "octane.evmengine.types.ExecutionPayloadResponse")
	proto.RegisterType((*EVMEvent)(nil), "octane.evmengine.types.EVMEvent")
}

func init() { proto.RegisterFile("octane/evmengine/types/tx.proto", fileDescriptor_288b272163299061) }

var fileDescriptor_288b272163299061 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x86, 0x1d, 0x73, 0xaf, 0xf7, 0x3a, 0x57, 0x2e, 0x3a, 0x82, 0x1d, 0x42, 0x49, 0x83, 0xab,
	0xa0, 0x90, 0x58, 0xbb, 0xeb, 0xb2, 0xe0, 0x52, 0x90, 0x14, 0xba, 0xe8, 0x46, 0xa6, 0xc9, 0x21,
	0x0d, 0xd4, 0x4c, 0x9a, 0x33, 0x06, 0xdd, 0x95, 0x2e, 0xba, 0xee, 0xa3, 0xf8, 0x0c, 0x5d, 0x75,
	0xe9, 0xb2, 0xcb, 0xa2, 0x0b, 0x5f, 0xa3, 0x18, 0x4d, 0x05, 0xab, 0xab, 0x99, 0x73, 0xf8, 0xfe,
	0xc3, 0xf9, 0xff, 0x19, 0x7a, 0x26, 0x3d, 0x25, 0x22, 0x70, 0x20, 0x1d, 0x41, 0x14, 0x84, 0x11,
	0x38, 0x6a, 0x1a, 0x03, 0x3a, 0x6a, 0x62, 0xc7, 0x89, 0x54, 0x92, 0x35, 0x36, 0x80, 0xfd, 0x0d,
	0xd8, 0x19, 0xa0, 0x9f, 0x78, 0x12, 0x47, 0x12, 0x9d, 0x11, 0x06, 0x4e, 0x7a, 0xbe, 0x3e, 0x36,
	0x82, 0xe6, 0x1b, 0xa1, 0xf5, 0x3e, 0x06, 0xbd, 0x09, 0x78, 0x63, 0x15, 0xca, 0x68, 0x20, 0xa6,
	0x0f, 0x52, 0xf8, 0xec, 0x94, 0x96, 0xc5, 0x58, 0xdd, 0xcb, 0x24, 0x54, 0x53, 0x4e, 0x4c, 0x62,
	0x95, 0xdd, 0x5d, 0x83, 0xb5, 0x69, 0x0d, 0x72, 0xc5, 0x30, 0xde, 0x48, 0x78, 0xd1, 0x24, 0x56,
	0xc5, 0xad, 0xc2, 0xfe, 0xa8, 0x01, 0xad, 0xc7, 0x09, 0xa4, 0x39, 0x37, 0x84, 0x14, 0x22, 0x85,
	0x5c, 0x33, 0x35, 0xeb, 0x5f, 0xd7, 0xb4, 0x0f, 0x6f, 0x6c, 0xf7, 0x6e, 0xfa, 0xbd, 0x35, 0xe8,
	0xd6, 0xd6, 0xe2, 0xed, 0xac, 0xac, 0x83, 0x97, 0xff, 0x9f, 0x57, 0xb3, 0xd6, 0x6e, 0x9d, 0xa6,
	0x4e, 0xf9, 0xbe, 0x01, 0x17, 0x30, 0x96, 0x11, 0x42, 0x73, 0x40, 0xff, 0xe6, 0xa3, 0x18, 0xa7,
	0x7f, 0x84, 0xef, 0x27, 0x80, 0x98, 0x59, 0xaa, 0xb8, 0x79, 0xc9, 0x1a, 0xb4, 0xa4, 0x64, 0x1c,
	0x7a, 0xc8, 0x8b, 0xa6, 0x66, 0x55, 0xdc, 0x6d, 0xc5, 0x18, 0xfd, 0xe5, 0x0b, 0x25, 0xb8, 0x96,
	0xe1, 0xd9, 0xbd, 0xfb, 0x42, 0x28, 0xed, 0x63, 0x70, 0x0d, 0x49, 0x1a, 0x7a, 0xc0, 0x1e, 0x69,
	0xf5, 0x47, 0x7a, 0xed, 0x63, 0xae, 0x0e, 0x44, 0xad, 0x77, 0x8e, 0x46, 0x70, 0xc4, 0x93, 0xfe,
	0xfb, 0x69, 0x35, 0x6b, 0x91, 0xab, 0xce, 0xfb, 0xc2, 0x20, 0xf3, 0x85, 0x41, 0x3e, 0x17, 0x06,
	0x79, 0x5d, 0x1a, 0x85, 0xf9, 0xd2, 0x28, 0x7c, 0x2c, 0x8d, 0xc2, 0x6d, 0xe3, 0xf0, 0x3f, 0xb9,
	0x2b, 0x65, 0x8f, 0x7e, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x74, 0x02, 0x6e, 0x48, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	// ExecutionPayload submits a new execution payload from consensus to the OmniEVM.
	ExecutionPayload(ctx context.Context, in *MsgExecutionPayload, opts ...grpc.CallOption) (*ExecutionPayloadResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) ExecutionPayload(ctx context.Context, in *MsgExecutionPayload, opts ...grpc.CallOption) (*ExecutionPayloadResponse, error) {
	out := new(ExecutionPayloadResponse)
	err := c.cc.Invoke(ctx, "/octane.evmengine.types.MsgService/ExecutionPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	// ExecutionPayload submits a new execution payload from consensus to the OmniEVM.
	ExecutionPayload(context.Context, *MsgExecutionPayload) (*ExecutionPayloadResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) ExecutionPayload(ctx context.Context, req *MsgExecutionPayload) (*ExecutionPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionPayload not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_ExecutionPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecutionPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ExecutionPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/octane.evmengine.types.MsgService/ExecutionPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ExecutionPayload(ctx, req.(*MsgExecutionPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "octane.evmengine.types.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutionPayload",
			Handler:    _MsgService_ExecutionPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "octane/evmengine/types/tx.proto",
}

func (m *MsgExecutionPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutionPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutionPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrevPayloadEvents) > 0 {
		for iNdEx := len(m.PrevPayloadEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrevPayloadEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExecutionPayload) > 0 {
		i -= len(m.ExecutionPayload)
		copy(dAtA[i:], m.ExecutionPayload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutionPayload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionPayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionPayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionPayloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EVMEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgExecutionPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutionPayload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PrevPayloadEvents) > 0 {
		for _, e := range m.PrevPayloadEvents {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ExecutionPayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EVMEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, b := range m.Topics {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgExecutionPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutionPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutionPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionPayload = append(m.ExecutionPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecutionPayload == nil {
				m.ExecutionPayload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevPayloadEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevPayloadEvents = append(m.PrevPayloadEvents, &EVMEvent{})
			if err := m.PrevPayloadEvents[len(m.PrevPayloadEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionPayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionPayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionPayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, make([]byte, postIndex-iNdEx))
			copy(m.Topics[len(m.Topics)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
