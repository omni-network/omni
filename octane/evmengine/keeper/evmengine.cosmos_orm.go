// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package keeper

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type ExecutionHeadTable interface {
	Insert(ctx context.Context, executionHead *ExecutionHead) error
	InsertReturningId(ctx context.Context, executionHead *ExecutionHead) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, executionHead *ExecutionHead) error
	Save(ctx context.Context, executionHead *ExecutionHead) error
	Delete(ctx context.Context, executionHead *ExecutionHead) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*ExecutionHead, error)
	List(ctx context.Context, prefixKey ExecutionHeadIndexKey, opts ...ormlist.Option) (ExecutionHeadIterator, error)
	ListRange(ctx context.Context, from, to ExecutionHeadIndexKey, opts ...ormlist.Option) (ExecutionHeadIterator, error)
	DeleteBy(ctx context.Context, prefixKey ExecutionHeadIndexKey) error
	DeleteRange(ctx context.Context, from, to ExecutionHeadIndexKey) error

	doNotImplement()
}

type ExecutionHeadIterator struct {
	ormtable.Iterator
}

func (i ExecutionHeadIterator) Value() (*ExecutionHead, error) {
	var executionHead ExecutionHead
	err := i.UnmarshalMessage(&executionHead)
	return &executionHead, err
}

type ExecutionHeadIndexKey interface {
	id() uint32
	values() []interface{}
	executionHeadIndexKey()
}

// primary key starting index..
type ExecutionHeadPrimaryKey = ExecutionHeadIdIndexKey

type ExecutionHeadIdIndexKey struct {
	vs []interface{}
}

func (x ExecutionHeadIdIndexKey) id() uint32             { return 0 }
func (x ExecutionHeadIdIndexKey) values() []interface{}  { return x.vs }
func (x ExecutionHeadIdIndexKey) executionHeadIndexKey() {}

func (this ExecutionHeadIdIndexKey) WithId(id uint64) ExecutionHeadIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type executionHeadTable struct {
	table ormtable.AutoIncrementTable
}

func (this executionHeadTable) Insert(ctx context.Context, executionHead *ExecutionHead) error {
	return this.table.Insert(ctx, executionHead)
}

func (this executionHeadTable) Update(ctx context.Context, executionHead *ExecutionHead) error {
	return this.table.Update(ctx, executionHead)
}

func (this executionHeadTable) Save(ctx context.Context, executionHead *ExecutionHead) error {
	return this.table.Save(ctx, executionHead)
}

func (this executionHeadTable) Delete(ctx context.Context, executionHead *ExecutionHead) error {
	return this.table.Delete(ctx, executionHead)
}

func (this executionHeadTable) InsertReturningId(ctx context.Context, executionHead *ExecutionHead) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, executionHead)
}

func (this executionHeadTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this executionHeadTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this executionHeadTable) Get(ctx context.Context, id uint64) (*ExecutionHead, error) {
	var executionHead ExecutionHead
	found, err := this.table.PrimaryKey().Get(ctx, &executionHead, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &executionHead, nil
}

func (this executionHeadTable) List(ctx context.Context, prefixKey ExecutionHeadIndexKey, opts ...ormlist.Option) (ExecutionHeadIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ExecutionHeadIterator{it}, err
}

func (this executionHeadTable) ListRange(ctx context.Context, from, to ExecutionHeadIndexKey, opts ...ormlist.Option) (ExecutionHeadIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ExecutionHeadIterator{it}, err
}

func (this executionHeadTable) DeleteBy(ctx context.Context, prefixKey ExecutionHeadIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this executionHeadTable) DeleteRange(ctx context.Context, from, to ExecutionHeadIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this executionHeadTable) doNotImplement() {}

var _ ExecutionHeadTable = executionHeadTable{}

func NewExecutionHeadTable(db ormtable.Schema) (ExecutionHeadTable, error) {
	table := db.GetTable(&ExecutionHead{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExecutionHead{}).ProtoReflect().Descriptor().FullName()))
	}
	return executionHeadTable{table.(ormtable.AutoIncrementTable)}, nil
}

type EvmengineStore interface {
	ExecutionHeadTable() ExecutionHeadTable

	doNotImplement()
}

type evmengineStore struct {
	executionHead ExecutionHeadTable
}

func (x evmengineStore) ExecutionHeadTable() ExecutionHeadTable {
	return x.executionHead
}

func (evmengineStore) doNotImplement() {}

var _ EvmengineStore = evmengineStore{}

func NewEvmengineStore(db ormtable.Schema) (EvmengineStore, error) {
	executionHeadTable, err := NewExecutionHeadTable(db)
	if err != nil {
		return nil, err
	}

	return evmengineStore{
		executionHeadTable,
	}, nil
}
