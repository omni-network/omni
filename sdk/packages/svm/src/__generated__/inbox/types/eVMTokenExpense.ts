/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
} from '@solana/kit'

/**
 * TokenExpense describes an ERC20 expense to be paid by the solver on destination chain when filling an
 * order. Native expenses are inferred from the calls, and are not included in the order data.
 */

export type EVMTokenExpense = {
  /** The address that will do token.transferFrom(...) on fill. Required to set allowance */
  spender: ReadonlyUint8Array
  /** The address of the token on the destination chain */
  token: ReadonlyUint8Array
  /** The amount of the token to spend (max == uint96) */
  amount: bigint
}

export type EVMTokenExpenseArgs = {
  /** The address that will do token.transferFrom(...) on fill. Required to set allowance */
  spender: ReadonlyUint8Array
  /** The address of the token on the destination chain */
  token: ReadonlyUint8Array
  /** The amount of the token to spend (max == uint96) */
  amount: number | bigint
}

export function getEVMTokenExpenseEncoder(): Encoder<EVMTokenExpenseArgs> {
  return getStructEncoder([
    ['spender', fixEncoderSize(getBytesEncoder(), 20)],
    ['token', fixEncoderSize(getBytesEncoder(), 20)],
    ['amount', getU128Encoder()],
  ])
}

export function getEVMTokenExpenseDecoder(): Decoder<EVMTokenExpense> {
  return getStructDecoder([
    ['spender', fixDecoderSize(getBytesDecoder(), 20)],
    ['token', fixDecoderSize(getBytesDecoder(), 20)],
    ['amount', getU128Decoder()],
  ])
}

export function getEVMTokenExpenseCodec(): Codec<
  EVMTokenExpenseArgs,
  EVMTokenExpense
> {
  return combineCodec(getEVMTokenExpenseEncoder(), getEVMTokenExpenseDecoder())
}
