/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from '@solana/kit'
import { SOLVER_INBOX_PROGRAM_ADDRESS } from '../programs/index.js'
import { type ResolvedAccount, getAccountMetaFactory } from '../shared/index.js'

export const INIT_DISCRIMINATOR = new Uint8Array([
  220, 59, 207, 236, 108, 250, 47, 100,
])

export function getInitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INIT_DISCRIMINATOR)
}

export type InitInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountInboxState extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountInboxState extends string
        ? WritableAccount<TAccountInboxState>
        : TAccountInboxState,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >

export type InitInstructionData = {
  discriminator: ReadonlyUint8Array
  chainId: bigint
  closeBuffer: bigint
}

export type InitInstructionDataArgs = {
  chainId: number | bigint
  closeBuffer: number | bigint
}

export function getInitInstructionDataEncoder(): Encoder<InitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['chainId', getU64Encoder()],
      ['closeBuffer', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_DISCRIMINATOR }),
  )
}

export function getInitInstructionDataDecoder(): Decoder<InitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['chainId', getU64Decoder()],
    ['closeBuffer', getI64Decoder()],
  ])
}

export function getInitInstructionDataCodec(): Codec<
  InitInstructionDataArgs,
  InitInstructionData
> {
  return combineCodec(
    getInitInstructionDataEncoder(),
    getInitInstructionDataDecoder(),
  )
}

export type InitAsyncInput<
  TAccountInboxState extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  inboxState?: Address<TAccountInboxState>
  admin: TransactionSigner<TAccountAdmin>
  systemProgram?: Address<TAccountSystemProgram>
  chainId: InitInstructionDataArgs['chainId']
  closeBuffer: InitInstructionDataArgs['closeBuffer']
}

export async function getInitInstructionAsync<
  TAccountInboxState extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: InitAsyncInput<
    TAccountInboxState,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitInstruction<
    TProgramAddress,
    TAccountInboxState,
    TAccountAdmin,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    inboxState: { value: input.inboxState ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.inboxState.value) {
    accounts.inboxState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 98, 111, 120, 95, 115, 116, 97, 116, 101]),
        ),
      ],
    })
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.inboxState),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitInstructionDataEncoder().encode(
      args as InitInstructionDataArgs,
    ),
  } as InitInstruction<
    TProgramAddress,
    TAccountInboxState,
    TAccountAdmin,
    TAccountSystemProgram
  >

  return instruction
}

export type InitInput<
  TAccountInboxState extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  inboxState: Address<TAccountInboxState>
  admin: TransactionSigner<TAccountAdmin>
  systemProgram?: Address<TAccountSystemProgram>
  chainId: InitInstructionDataArgs['chainId']
  closeBuffer: InitInstructionDataArgs['closeBuffer']
}

export function getInitInstruction<
  TAccountInboxState extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: InitInput<TAccountInboxState, TAccountAdmin, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): InitInstruction<
  TProgramAddress,
  TAccountInboxState,
  TAccountAdmin,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    inboxState: { value: input.inboxState ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.inboxState),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitInstructionDataEncoder().encode(
      args as InitInstructionDataArgs,
    ),
  } as InitInstruction<
    TProgramAddress,
    TAccountInboxState,
    TAccountAdmin,
    TAccountSystemProgram
  >

  return instruction
}

export type ParsedInitInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    inboxState: TAccountMetas[0]
    admin: TAccountMetas[1]
    systemProgram: TAccountMetas[2]
  }
  data: InitInstructionData
}

export function parseInitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      inboxState: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitInstructionDataDecoder().decode(instruction.data),
  }
}
