/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/kit'
import { SOLVER_INBOX_PROGRAM_ADDRESS } from '../programs/index.js'
import {
  type ResolvedAccount,
  expectSome,
  getAccountMetaFactory,
} from '../shared/index.js'

export const REJECT_DISCRIMINATOR = new Uint8Array([
  135, 7, 63, 85, 131, 114, 111, 224,
])

export function getRejectDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REJECT_DISCRIMINATOR)
}

export type RejectInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountOrderState extends string | IAccountMeta<string> = string,
  TAccountOrderTokenAccount extends string | IAccountMeta<string> = string,
  TAccountOwnerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountInboxState extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOrderState extends string
        ? WritableAccount<TAccountOrderState>
        : TAccountOrderState,
      TAccountOrderTokenAccount extends string
        ? WritableAccount<TAccountOrderTokenAccount>
        : TAccountOrderTokenAccount,
      TAccountOwnerTokenAccount extends string
        ? WritableAccount<TAccountOwnerTokenAccount>
        : TAccountOwnerTokenAccount,
      TAccountInboxState extends string
        ? ReadonlyAccount<TAccountInboxState>
        : TAccountInboxState,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >

export type RejectInstructionData = {
  discriminator: ReadonlyUint8Array
  orderId: Address
  reason: number
}

export type RejectInstructionDataArgs = { orderId: Address; reason: number }

export function getRejectInstructionDataEncoder(): Encoder<RejectInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['orderId', getAddressEncoder()],
      ['reason', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REJECT_DISCRIMINATOR }),
  )
}

export function getRejectInstructionDataDecoder(): Decoder<RejectInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['orderId', getAddressDecoder()],
    ['reason', getU8Decoder()],
  ])
}

export function getRejectInstructionDataCodec(): Codec<
  RejectInstructionDataArgs,
  RejectInstructionData
> {
  return combineCodec(
    getRejectInstructionDataEncoder(),
    getRejectInstructionDataDecoder(),
  )
}

export type RejectAsyncInput<
  TAccountOrderState extends string = string,
  TAccountOrderTokenAccount extends string = string,
  TAccountOwnerTokenAccount extends string = string,
  TAccountInboxState extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  orderState?: Address<TAccountOrderState>
  orderTokenAccount?: Address<TAccountOrderTokenAccount>
  ownerTokenAccount: Address<TAccountOwnerTokenAccount>
  inboxState?: Address<TAccountInboxState>
  admin: TransactionSigner<TAccountAdmin>
  tokenProgram?: Address<TAccountTokenProgram>
  orderId: RejectInstructionDataArgs['orderId']
  reason: RejectInstructionDataArgs['reason']
}

export async function getRejectInstructionAsync<
  TAccountOrderState extends string,
  TAccountOrderTokenAccount extends string,
  TAccountOwnerTokenAccount extends string,
  TAccountInboxState extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: RejectAsyncInput<
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountInboxState,
    TAccountAdmin,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  RejectInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountInboxState,
    TAccountAdmin,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    orderState: { value: input.orderState ?? null, isWritable: true },
    orderTokenAccount: {
      value: input.orderTokenAccount ?? null,
      isWritable: true,
    },
    ownerTokenAccount: {
      value: input.ownerTokenAccount ?? null,
      isWritable: true,
    },
    inboxState: { value: input.inboxState ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.orderState.value) {
    accounts.orderState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 114, 100, 101, 114, 95, 115, 116, 97, 116, 101]),
        ),
        getAddressEncoder().encode(expectSome(args.orderId)),
      ],
    })
  }
  if (!accounts.orderTokenAccount.value) {
    accounts.orderTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            111, 114, 100, 101, 114, 95, 116, 111, 107, 101, 110,
          ]),
        ),
        getAddressEncoder().encode(expectSome(args.orderId)),
      ],
    })
  }
  if (!accounts.inboxState.value) {
    accounts.inboxState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 98, 111, 120, 95, 115, 116, 97, 116, 101]),
        ),
      ],
    })
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.orderState),
      getAccountMeta(accounts.orderTokenAccount),
      getAccountMeta(accounts.ownerTokenAccount),
      getAccountMeta(accounts.inboxState),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRejectInstructionDataEncoder().encode(
      args as RejectInstructionDataArgs,
    ),
  } as RejectInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountInboxState,
    TAccountAdmin,
    TAccountTokenProgram
  >

  return instruction
}

export type RejectInput<
  TAccountOrderState extends string = string,
  TAccountOrderTokenAccount extends string = string,
  TAccountOwnerTokenAccount extends string = string,
  TAccountInboxState extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  orderState: Address<TAccountOrderState>
  orderTokenAccount: Address<TAccountOrderTokenAccount>
  ownerTokenAccount: Address<TAccountOwnerTokenAccount>
  inboxState: Address<TAccountInboxState>
  admin: TransactionSigner<TAccountAdmin>
  tokenProgram?: Address<TAccountTokenProgram>
  orderId: RejectInstructionDataArgs['orderId']
  reason: RejectInstructionDataArgs['reason']
}

export function getRejectInstruction<
  TAccountOrderState extends string,
  TAccountOrderTokenAccount extends string,
  TAccountOwnerTokenAccount extends string,
  TAccountInboxState extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: RejectInput<
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountInboxState,
    TAccountAdmin,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): RejectInstruction<
  TProgramAddress,
  TAccountOrderState,
  TAccountOrderTokenAccount,
  TAccountOwnerTokenAccount,
  TAccountInboxState,
  TAccountAdmin,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    orderState: { value: input.orderState ?? null, isWritable: true },
    orderTokenAccount: {
      value: input.orderTokenAccount ?? null,
      isWritable: true,
    },
    ownerTokenAccount: {
      value: input.ownerTokenAccount ?? null,
      isWritable: true,
    },
    inboxState: { value: input.inboxState ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.orderState),
      getAccountMeta(accounts.orderTokenAccount),
      getAccountMeta(accounts.ownerTokenAccount),
      getAccountMeta(accounts.inboxState),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRejectInstructionDataEncoder().encode(
      args as RejectInstructionDataArgs,
    ),
  } as RejectInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountInboxState,
    TAccountAdmin,
    TAccountTokenProgram
  >

  return instruction
}

export type ParsedRejectInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    orderState: TAccountMetas[0]
    orderTokenAccount: TAccountMetas[1]
    ownerTokenAccount: TAccountMetas[2]
    inboxState: TAccountMetas[3]
    admin: TAccountMetas[4]
    tokenProgram: TAccountMetas[5]
  }
  data: RejectInstructionData
}

export function parseRejectInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedRejectInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      orderState: getNextAccount(),
      orderTokenAccount: getNextAccount(),
      ownerTokenAccount: getNextAccount(),
      inboxState: getNextAccount(),
      admin: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRejectInstructionDataDecoder().decode(instruction.data),
  }
}
