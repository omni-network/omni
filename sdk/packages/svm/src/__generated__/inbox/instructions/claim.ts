/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/kit'
import { SOLVER_INBOX_PROGRAM_ADDRESS } from '../programs/index.js'
import {
  type ResolvedAccount,
  expectSome,
  getAccountMetaFactory,
} from '../shared/index.js'

export const CLAIM_DISCRIMINATOR = new Uint8Array([
  62, 198, 214, 193, 213, 159, 108, 210,
])

export function getClaimDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_DISCRIMINATOR)
}

export type ClaimInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountOrderState extends string | IAccountMeta<string> = string,
  TAccountOrderTokenAccount extends string | IAccountMeta<string> = string,
  TAccountOwnerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountClaimer extends string | IAccountMeta<string> = string,
  TAccountClaimerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOrderState extends string
        ? WritableAccount<TAccountOrderState>
        : TAccountOrderState,
      TAccountOrderTokenAccount extends string
        ? WritableAccount<TAccountOrderTokenAccount>
        : TAccountOrderTokenAccount,
      TAccountOwnerTokenAccount extends string
        ? WritableAccount<TAccountOwnerTokenAccount>
        : TAccountOwnerTokenAccount,
      TAccountClaimer extends string
        ? WritableSignerAccount<TAccountClaimer> &
            IAccountSignerMeta<TAccountClaimer>
        : TAccountClaimer,
      TAccountClaimerTokenAccount extends string
        ? WritableAccount<TAccountClaimerTokenAccount>
        : TAccountClaimerTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >

export type ClaimInstructionData = {
  discriminator: ReadonlyUint8Array
  orderId: Address
}

export type ClaimInstructionDataArgs = { orderId: Address }

export function getClaimInstructionDataEncoder(): Encoder<ClaimInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['orderId', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_DISCRIMINATOR }),
  )
}

export function getClaimInstructionDataDecoder(): Decoder<ClaimInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['orderId', getAddressDecoder()],
  ])
}

export function getClaimInstructionDataCodec(): Codec<
  ClaimInstructionDataArgs,
  ClaimInstructionData
> {
  return combineCodec(
    getClaimInstructionDataEncoder(),
    getClaimInstructionDataDecoder(),
  )
}

export type ClaimAsyncInput<
  TAccountOrderState extends string = string,
  TAccountOrderTokenAccount extends string = string,
  TAccountOwnerTokenAccount extends string = string,
  TAccountClaimer extends string = string,
  TAccountClaimerTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  orderState?: Address<TAccountOrderState>
  orderTokenAccount?: Address<TAccountOrderTokenAccount>
  ownerTokenAccount: Address<TAccountOwnerTokenAccount>
  claimer: TransactionSigner<TAccountClaimer>
  claimerTokenAccount: Address<TAccountClaimerTokenAccount>
  tokenProgram?: Address<TAccountTokenProgram>
  orderId: ClaimInstructionDataArgs['orderId']
}

export async function getClaimInstructionAsync<
  TAccountOrderState extends string,
  TAccountOrderTokenAccount extends string,
  TAccountOwnerTokenAccount extends string,
  TAccountClaimer extends string,
  TAccountClaimerTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: ClaimAsyncInput<
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountClaimer,
    TAccountClaimerTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  ClaimInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountClaimer,
    TAccountClaimerTokenAccount,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    orderState: { value: input.orderState ?? null, isWritable: true },
    orderTokenAccount: {
      value: input.orderTokenAccount ?? null,
      isWritable: true,
    },
    ownerTokenAccount: {
      value: input.ownerTokenAccount ?? null,
      isWritable: true,
    },
    claimer: { value: input.claimer ?? null, isWritable: true },
    claimerTokenAccount: {
      value: input.claimerTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.orderState.value) {
    accounts.orderState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 114, 100, 101, 114, 95, 115, 116, 97, 116, 101]),
        ),
        getAddressEncoder().encode(expectSome(args.orderId)),
      ],
    })
  }
  if (!accounts.orderTokenAccount.value) {
    accounts.orderTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            111, 114, 100, 101, 114, 95, 116, 111, 107, 101, 110,
          ]),
        ),
        getAddressEncoder().encode(expectSome(args.orderId)),
      ],
    })
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.orderState),
      getAccountMeta(accounts.orderTokenAccount),
      getAccountMeta(accounts.ownerTokenAccount),
      getAccountMeta(accounts.claimer),
      getAccountMeta(accounts.claimerTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs,
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountClaimer,
    TAccountClaimerTokenAccount,
    TAccountTokenProgram
  >

  return instruction
}

export type ClaimInput<
  TAccountOrderState extends string = string,
  TAccountOrderTokenAccount extends string = string,
  TAccountOwnerTokenAccount extends string = string,
  TAccountClaimer extends string = string,
  TAccountClaimerTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  orderState: Address<TAccountOrderState>
  orderTokenAccount: Address<TAccountOrderTokenAccount>
  ownerTokenAccount: Address<TAccountOwnerTokenAccount>
  claimer: TransactionSigner<TAccountClaimer>
  claimerTokenAccount: Address<TAccountClaimerTokenAccount>
  tokenProgram?: Address<TAccountTokenProgram>
  orderId: ClaimInstructionDataArgs['orderId']
}

export function getClaimInstruction<
  TAccountOrderState extends string,
  TAccountOrderTokenAccount extends string,
  TAccountOwnerTokenAccount extends string,
  TAccountClaimer extends string,
  TAccountClaimerTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: ClaimInput<
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountClaimer,
    TAccountClaimerTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ClaimInstruction<
  TProgramAddress,
  TAccountOrderState,
  TAccountOrderTokenAccount,
  TAccountOwnerTokenAccount,
  TAccountClaimer,
  TAccountClaimerTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    orderState: { value: input.orderState ?? null, isWritable: true },
    orderTokenAccount: {
      value: input.orderTokenAccount ?? null,
      isWritable: true,
    },
    ownerTokenAccount: {
      value: input.ownerTokenAccount ?? null,
      isWritable: true,
    },
    claimer: { value: input.claimer ?? null, isWritable: true },
    claimerTokenAccount: {
      value: input.claimerTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.orderState),
      getAccountMeta(accounts.orderTokenAccount),
      getAccountMeta(accounts.ownerTokenAccount),
      getAccountMeta(accounts.claimer),
      getAccountMeta(accounts.claimerTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs,
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountOrderTokenAccount,
    TAccountOwnerTokenAccount,
    TAccountClaimer,
    TAccountClaimerTokenAccount,
    TAccountTokenProgram
  >

  return instruction
}

export type ParsedClaimInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    orderState: TAccountMetas[0]
    orderTokenAccount: TAccountMetas[1]
    ownerTokenAccount: TAccountMetas[2]
    claimer: TAccountMetas[3]
    claimerTokenAccount: TAccountMetas[4]
    tokenProgram: TAccountMetas[5]
  }
  data: ClaimInstructionData
}

export function parseClaimInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedClaimInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      orderState: getNextAccount(),
      orderTokenAccount: getNextAccount(),
      ownerTokenAccount: getNextAccount(),
      claimer: getNextAccount(),
      claimerTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getClaimInstructionDataDecoder().decode(instruction.data),
  }
}
