/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/kit'
import { SOLVER_INBOX_PROGRAM_ADDRESS } from '../programs/index.js'
import {
  type ResolvedAccount,
  expectSome,
  getAccountMetaFactory,
} from '../shared/index.js'

export const MARK_FILLED_DISCRIMINATOR = new Uint8Array([
  192, 137, 170, 0, 70, 5, 127, 160,
])

export function getMarkFilledDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MARK_FILLED_DISCRIMINATOR)
}

export type MarkFilledInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountOrderState extends string | IAccountMeta<string> = string,
  TAccountInboxState extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOrderState extends string
        ? WritableAccount<TAccountOrderState>
        : TAccountOrderState,
      TAccountInboxState extends string
        ? ReadonlyAccount<TAccountInboxState>
        : TAccountInboxState,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >

export type MarkFilledInstructionData = {
  discriminator: ReadonlyUint8Array
  orderId: Address
  fillHash: Address
  claimableBy: Address
}

export type MarkFilledInstructionDataArgs = {
  orderId: Address
  fillHash: Address
  claimableBy: Address
}

export function getMarkFilledInstructionDataEncoder(): Encoder<MarkFilledInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['orderId', getAddressEncoder()],
      ['fillHash', getAddressEncoder()],
      ['claimableBy', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: MARK_FILLED_DISCRIMINATOR }),
  )
}

export function getMarkFilledInstructionDataDecoder(): Decoder<MarkFilledInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['orderId', getAddressDecoder()],
    ['fillHash', getAddressDecoder()],
    ['claimableBy', getAddressDecoder()],
  ])
}

export function getMarkFilledInstructionDataCodec(): Codec<
  MarkFilledInstructionDataArgs,
  MarkFilledInstructionData
> {
  return combineCodec(
    getMarkFilledInstructionDataEncoder(),
    getMarkFilledInstructionDataDecoder(),
  )
}

export type MarkFilledAsyncInput<
  TAccountOrderState extends string = string,
  TAccountInboxState extends string = string,
  TAccountAdmin extends string = string,
> = {
  orderState?: Address<TAccountOrderState>
  inboxState?: Address<TAccountInboxState>
  admin: TransactionSigner<TAccountAdmin>
  orderId: MarkFilledInstructionDataArgs['orderId']
  fillHash: MarkFilledInstructionDataArgs['fillHash']
  claimableBy: MarkFilledInstructionDataArgs['claimableBy']
}

export async function getMarkFilledInstructionAsync<
  TAccountOrderState extends string,
  TAccountInboxState extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: MarkFilledAsyncInput<
    TAccountOrderState,
    TAccountInboxState,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  MarkFilledInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountInboxState,
    TAccountAdmin
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    orderState: { value: input.orderState ?? null, isWritable: true },
    inboxState: { value: input.inboxState ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.orderState.value) {
    accounts.orderState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 114, 100, 101, 114, 95, 115, 116, 97, 116, 101]),
        ),
        getAddressEncoder().encode(expectSome(args.orderId)),
      ],
    })
  }
  if (!accounts.inboxState.value) {
    accounts.inboxState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 98, 111, 120, 95, 115, 116, 97, 116, 101]),
        ),
      ],
    })
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.orderState),
      getAccountMeta(accounts.inboxState),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getMarkFilledInstructionDataEncoder().encode(
      args as MarkFilledInstructionDataArgs,
    ),
  } as MarkFilledInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountInboxState,
    TAccountAdmin
  >

  return instruction
}

export type MarkFilledInput<
  TAccountOrderState extends string = string,
  TAccountInboxState extends string = string,
  TAccountAdmin extends string = string,
> = {
  orderState: Address<TAccountOrderState>
  inboxState: Address<TAccountInboxState>
  admin: TransactionSigner<TAccountAdmin>
  orderId: MarkFilledInstructionDataArgs['orderId']
  fillHash: MarkFilledInstructionDataArgs['fillHash']
  claimableBy: MarkFilledInstructionDataArgs['claimableBy']
}

export function getMarkFilledInstruction<
  TAccountOrderState extends string,
  TAccountInboxState extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
>(
  input: MarkFilledInput<TAccountOrderState, TAccountInboxState, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress },
): MarkFilledInstruction<
  TProgramAddress,
  TAccountOrderState,
  TAccountInboxState,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLVER_INBOX_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    orderState: { value: input.orderState ?? null, isWritable: true },
    inboxState: { value: input.inboxState ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.orderState),
      getAccountMeta(accounts.inboxState),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getMarkFilledInstructionDataEncoder().encode(
      args as MarkFilledInstructionDataArgs,
    ),
  } as MarkFilledInstruction<
    TProgramAddress,
    TAccountOrderState,
    TAccountInboxState,
    TAccountAdmin
  >

  return instruction
}

export type ParsedMarkFilledInstruction<
  TProgram extends string = typeof SOLVER_INBOX_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    orderState: TAccountMetas[0]
    inboxState: TAccountMetas[1]
    admin: TAccountMetas[2]
  }
  data: MarkFilledInstructionData
}

export function parseMarkFilledInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedMarkFilledInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      orderState: getNextAccount(),
      inboxState: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getMarkFilledInstructionDataDecoder().decode(instruction.data),
  }
}
