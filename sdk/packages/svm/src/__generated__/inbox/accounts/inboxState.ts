/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from '@solana/kit'

export const INBOX_STATE_DISCRIMINATOR = new Uint8Array([
  161, 5, 9, 33, 125, 185, 63, 116,
])

export function getInboxStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INBOX_STATE_DISCRIMINATOR)
}

export type InboxState = {
  discriminator: ReadonlyUint8Array
  admin: Address
  chainId: bigint
  deployedAt: bigint
  bump: number
  closeBufferSecs: bigint
}

export type InboxStateArgs = {
  admin: Address
  chainId: number | bigint
  deployedAt: number | bigint
  bump: number
  closeBufferSecs: number | bigint
}

export function getInboxStateEncoder(): Encoder<InboxStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['chainId', getU64Encoder()],
      ['deployedAt', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['closeBufferSecs', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INBOX_STATE_DISCRIMINATOR }),
  )
}

export function getInboxStateDecoder(): Decoder<InboxState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['chainId', getU64Decoder()],
    ['deployedAt', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['closeBufferSecs', getI64Decoder()],
  ])
}

export function getInboxStateCodec(): Codec<InboxStateArgs, InboxState> {
  return combineCodec(getInboxStateEncoder(), getInboxStateDecoder())
}

export function decodeInboxState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<InboxState, TAddress>
export function decodeInboxState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<InboxState, TAddress>
export function decodeInboxState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<InboxState, TAddress> | MaybeAccount<InboxState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInboxStateDecoder(),
  )
}

export async function fetchInboxState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<InboxState, TAddress>> {
  const maybeAccount = await fetchMaybeInboxState(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeInboxState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<InboxState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeInboxState(maybeAccount)
}

export async function fetchAllInboxState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<InboxState>[]> {
  const maybeAccounts = await fetchAllMaybeInboxState(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeInboxState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<InboxState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map((maybeAccount) => decodeInboxState(maybeAccount))
}

export function getInboxStateSize(): number {
  return 65
}
