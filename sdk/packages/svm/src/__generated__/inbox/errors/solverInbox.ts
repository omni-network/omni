/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
  isProgramError,
} from '@solana/kit'
import { SOLVER_INBOX_PROGRAM_ADDRESS } from '../programs/index.js'

/** InvalidID: Invalid order ID */
export const SOLVER_INBOX_ERROR__INVALID_I_D = 0x1770 // 6000
/** InvalidStatus: Invalid status */
export const SOLVER_INBOX_ERROR__INVALID_STATUS = 0x1771 // 6001
/** InvalidMint: Invalid mint */
export const SOLVER_INBOX_ERROR__INVALID_MINT = 0x1772 // 6002
/** NotClosable: Order not closable yet */
export const SOLVER_INBOX_ERROR__NOT_CLOSABLE = 0x1773 // 6003
/** InvalidFillHash: Invalid fill hash */
export const SOLVER_INBOX_ERROR__INVALID_FILL_HASH = 0x1774 // 6004

export type SolverInboxError =
  | typeof SOLVER_INBOX_ERROR__INVALID_FILL_HASH
  | typeof SOLVER_INBOX_ERROR__INVALID_I_D
  | typeof SOLVER_INBOX_ERROR__INVALID_MINT
  | typeof SOLVER_INBOX_ERROR__INVALID_STATUS
  | typeof SOLVER_INBOX_ERROR__NOT_CLOSABLE

let solverInboxErrorMessages: Record<SolverInboxError, string> | undefined
if (process.env.NODE_ENV !== 'production') {
  solverInboxErrorMessages = {
    [SOLVER_INBOX_ERROR__INVALID_FILL_HASH]: `Invalid fill hash`,
    [SOLVER_INBOX_ERROR__INVALID_I_D]: `Invalid order ID`,
    [SOLVER_INBOX_ERROR__INVALID_MINT]: `Invalid mint`,
    [SOLVER_INBOX_ERROR__INVALID_STATUS]: `Invalid status`,
    [SOLVER_INBOX_ERROR__NOT_CLOSABLE]: `Order not closable yet`,
  }
}

export function getSolverInboxErrorMessage(code: SolverInboxError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (solverInboxErrorMessages as Record<SolverInboxError, string>)[code]
  }

  return 'Error message not available in production bundles.'
}

export function isSolverInboxError<TProgramErrorCode extends SolverInboxError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SOLVER_INBOX_PROGRAM_ADDRESS,
    code,
  )
}
