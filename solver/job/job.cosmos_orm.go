// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package job

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type JobTable interface {
	Insert(ctx context.Context, job *Job) error
	InsertReturningId(ctx context.Context, job *Job) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, job *Job) error
	Save(ctx context.Context, job *Job) error
	Delete(ctx context.Context, job *Job) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Job, error)
	HasByChainIdBlockHeightEventIndex(ctx context.Context, chain_id uint64, block_height uint64, event_index uint64) (found bool, err error)
	// GetByChainIdBlockHeightEventIndex returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByChainIdBlockHeightEventIndex(ctx context.Context, chain_id uint64, block_height uint64, event_index uint64) (*Job, error)
	List(ctx context.Context, prefixKey JobIndexKey, opts ...ormlist.Option) (JobIterator, error)
	ListRange(ctx context.Context, from, to JobIndexKey, opts ...ormlist.Option) (JobIterator, error)
	DeleteBy(ctx context.Context, prefixKey JobIndexKey) error
	DeleteRange(ctx context.Context, from, to JobIndexKey) error

	doNotImplement()
}

type JobIterator struct {
	ormtable.Iterator
}

func (i JobIterator) Value() (*Job, error) {
	var job Job
	err := i.UnmarshalMessage(&job)
	return &job, err
}

type JobIndexKey interface {
	id() uint32
	values() []interface{}
	jobIndexKey()
}

// primary key starting index..
type JobPrimaryKey = JobIdIndexKey

type JobIdIndexKey struct {
	vs []interface{}
}

func (x JobIdIndexKey) id() uint32            { return 0 }
func (x JobIdIndexKey) values() []interface{} { return x.vs }
func (x JobIdIndexKey) jobIndexKey()          {}

func (this JobIdIndexKey) WithId(id uint64) JobIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type JobChainIdBlockHeightEventIndexIndexKey struct {
	vs []interface{}
}

func (x JobChainIdBlockHeightEventIndexIndexKey) id() uint32            { return 2 }
func (x JobChainIdBlockHeightEventIndexIndexKey) values() []interface{} { return x.vs }
func (x JobChainIdBlockHeightEventIndexIndexKey) jobIndexKey()          {}

func (this JobChainIdBlockHeightEventIndexIndexKey) WithChainId(chain_id uint64) JobChainIdBlockHeightEventIndexIndexKey {
	this.vs = []interface{}{chain_id}
	return this
}

func (this JobChainIdBlockHeightEventIndexIndexKey) WithChainIdBlockHeight(chain_id uint64, block_height uint64) JobChainIdBlockHeightEventIndexIndexKey {
	this.vs = []interface{}{chain_id, block_height}
	return this
}

func (this JobChainIdBlockHeightEventIndexIndexKey) WithChainIdBlockHeightEventIndex(chain_id uint64, block_height uint64, event_index uint64) JobChainIdBlockHeightEventIndexIndexKey {
	this.vs = []interface{}{chain_id, block_height, event_index}
	return this
}

type jobTable struct {
	table ormtable.AutoIncrementTable
}

func (this jobTable) Insert(ctx context.Context, job *Job) error {
	return this.table.Insert(ctx, job)
}

func (this jobTable) Update(ctx context.Context, job *Job) error {
	return this.table.Update(ctx, job)
}

func (this jobTable) Save(ctx context.Context, job *Job) error {
	return this.table.Save(ctx, job)
}

func (this jobTable) Delete(ctx context.Context, job *Job) error {
	return this.table.Delete(ctx, job)
}

func (this jobTable) InsertReturningId(ctx context.Context, job *Job) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, job)
}

func (this jobTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this jobTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this jobTable) Get(ctx context.Context, id uint64) (*Job, error) {
	var job Job
	found, err := this.table.PrimaryKey().Get(ctx, &job, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &job, nil
}

func (this jobTable) HasByChainIdBlockHeightEventIndex(ctx context.Context, chain_id uint64, block_height uint64, event_index uint64) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		chain_id,
		block_height,
		event_index,
	)
}

func (this jobTable) GetByChainIdBlockHeightEventIndex(ctx context.Context, chain_id uint64, block_height uint64, event_index uint64) (*Job, error) {
	var job Job
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &job,
		chain_id,
		block_height,
		event_index,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &job, nil
}

func (this jobTable) List(ctx context.Context, prefixKey JobIndexKey, opts ...ormlist.Option) (JobIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return JobIterator{it}, err
}

func (this jobTable) ListRange(ctx context.Context, from, to JobIndexKey, opts ...ormlist.Option) (JobIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return JobIterator{it}, err
}

func (this jobTable) DeleteBy(ctx context.Context, prefixKey JobIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this jobTable) DeleteRange(ctx context.Context, from, to JobIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this jobTable) doNotImplement() {}

var _ JobTable = jobTable{}

func NewJobTable(db ormtable.Schema) (JobTable, error) {
	table := db.GetTable(&Job{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Job{}).ProtoReflect().Descriptor().FullName()))
	}
	return jobTable{table.(ormtable.AutoIncrementTable)}, nil
}

type JobStore interface {
	JobTable() JobTable

	doNotImplement()
}

type jobStore struct {
	job JobTable
}

func (x jobStore) JobTable() JobTable {
	return x.job
}

func (jobStore) doNotImplement() {}

var _ JobStore = jobStore{}

func NewJobStore(db ormtable.Schema) (JobStore, error) {
	jobTable, err := NewJobTable(db)
	if err != nil {
		return nil, err
	}

	return jobStore{
		jobTable,
	}, nil
}
