// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dummy

import ag_binary "github.com/gagliardetto/binary"

type MyEvent struct {
	Data  uint64
	Label string
}

func (obj MyEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Label` param:
	err = encoder.Encode(obj.Label)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MyEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Label`:
	err = decoder.Decode(&obj.Label)
	if err != nil {
		return err
	}
	return nil
}

type MyOtherEvent struct {
	Data  uint64
	Label string
}

func (obj MyOtherEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Label` param:
	err = encoder.Encode(obj.Label)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MyOtherEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Label`:
	err = decoder.Decode(&obj.Label)
	if err != nil {
		return err
	}
	return nil
}
