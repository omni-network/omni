name: cli command tests

on:
  workflow_call:

jobs:
  test-linux:
    name: ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify Docker Installation
      run: docker --version

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Build binaries
      uses: goreleaser/goreleaser-action@v5
      env:
        GOOS: linux
      with:
        version: latest
        args: build --single-target --snapshot --clean --id=halo --id=relayer --id=monitor --id=anvilproxy --id=explorer-indexer --id=explorer-graphql

    - name: Build halo image
      run: |
        cd dist/halo_linux_amd64_v1
        docker build -f "../../halo/Dockerfile" . -t "omniops/halo:${GITHUB_SHA::7}"

    - name: Build relayer image
      run: |
        cd dist/relayer_linux_amd64_v1
        docker build -f "../../relayer/Dockerfile" . -t "omniops/relayer:${GITHUB_SHA::7}"

    - name: Build monitor image
      run: |
        cd dist/monitor_linux_amd64_v1
        docker build -f "../../monitor/Dockerfile" . -t "omniops/monitor:${GITHUB_SHA::7}"

    - name: Build anvilproxy image
      run: |
        cd dist/anvilproxy_linux_amd64_v1
        docker build -f "../../e2e/anvilproxy/Dockerfile" . -t "omniops/anvilproxy:${GITHUB_SHA::7}"

    - name: Build explorer-indexer image
      run: |
        cd dist/explorer-indexer_linux_amd64_v1
        docker build -f "../../explorer/indexer/Dockerfile" . -t "omniops/explorer-indexer:${GITHUB_SHA::7}"

    - name: Build explorer-graphql image
      run: |
        cd dist/explorer-graphql_linux_amd64_v1
        docker build -f "../../explorer/graphql/Dockerfile" . -t "omniops/explorer-graphql:${GITHUB_SHA::7}"

    - name: Build explorer-ui image
      run: |
        cd explorer/ui
        docker build -f Dockerfile . -t "omniops/explorer-ui:${GITHUB_SHA::7}"

    - name: Configure Git
      run: |
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"

    - name: Install CLI from Source
      run: go install ./cli/cmd/omni
      shell: bash

    - name: Confirm Installation Location
      run: ls -la ~/go/bin

    - name: Check Installation and Version
      run: ~/go/bin/omni version
      shell: bash

    - name: Test Scaffolding Command
      run: mkdir test && cd test && ~/go/bin/omni developer new
      shell: bash

    - name: Test Devnet Start Command
      run: ~/go/bin/omni devnet start
      shell: bash

    - name: Test Devnet Info Command
      run: ~/go/bin/omni devnet info
      shell: bash

    - name: Test Devnet Clean Command
      run: ~/go/bin/omni devnet clean
      shell: bash

  test-macos: # Docker unsupported on macos https://github.com/actions/runner-images/issues/17
    name: ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Configure Git
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
      - name: Install CLI from Source
        run: go install ./cli/cmd/omni
        shell: bash

      - name: Confirm Installation Location
        run: ls -la ~/go/bin

      - name: Check Installation and Version
        run: ~/go/bin/omni version
        shell: bash

      - name: Test Scaffolding Command
        run: mkdir test && cd test && ~/go/bin/omni developer new
        shell: bash
