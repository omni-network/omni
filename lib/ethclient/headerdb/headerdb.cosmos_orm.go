// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package headerdb

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type HeaderTable interface {
	Insert(ctx context.Context, header *Header) error
	InsertReturningId(ctx context.Context, header *Header) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, header *Header) error
	Save(ctx context.Context, header *Header) error
	Delete(ctx context.Context, header *Header) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Header, error)
	HasByHeight(ctx context.Context, height uint64) (found bool, err error)
	// GetByHeight returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByHeight(ctx context.Context, height uint64) (*Header, error)
	HasByHash(ctx context.Context, hash []byte) (found bool, err error)
	// GetByHash returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByHash(ctx context.Context, hash []byte) (*Header, error)
	List(ctx context.Context, prefixKey HeaderIndexKey, opts ...ormlist.Option) (HeaderIterator, error)
	ListRange(ctx context.Context, from, to HeaderIndexKey, opts ...ormlist.Option) (HeaderIterator, error)
	DeleteBy(ctx context.Context, prefixKey HeaderIndexKey) error
	DeleteRange(ctx context.Context, from, to HeaderIndexKey) error

	doNotImplement()
}

type HeaderIterator struct {
	ormtable.Iterator
}

func (i HeaderIterator) Value() (*Header, error) {
	var header Header
	err := i.UnmarshalMessage(&header)
	return &header, err
}

type HeaderIndexKey interface {
	id() uint32
	values() []interface{}
	headerIndexKey()
}

// primary key starting index..
type HeaderPrimaryKey = HeaderIdIndexKey

type HeaderIdIndexKey struct {
	vs []interface{}
}

func (x HeaderIdIndexKey) id() uint32            { return 0 }
func (x HeaderIdIndexKey) values() []interface{} { return x.vs }
func (x HeaderIdIndexKey) headerIndexKey()       {}

func (this HeaderIdIndexKey) WithId(id uint64) HeaderIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type HeaderHeightIndexKey struct {
	vs []interface{}
}

func (x HeaderHeightIndexKey) id() uint32            { return 2 }
func (x HeaderHeightIndexKey) values() []interface{} { return x.vs }
func (x HeaderHeightIndexKey) headerIndexKey()       {}

func (this HeaderHeightIndexKey) WithHeight(height uint64) HeaderHeightIndexKey {
	this.vs = []interface{}{height}
	return this
}

type HeaderHashIndexKey struct {
	vs []interface{}
}

func (x HeaderHashIndexKey) id() uint32            { return 3 }
func (x HeaderHashIndexKey) values() []interface{} { return x.vs }
func (x HeaderHashIndexKey) headerIndexKey()       {}

func (this HeaderHashIndexKey) WithHash(hash []byte) HeaderHashIndexKey {
	this.vs = []interface{}{hash}
	return this
}

type headerTable struct {
	table ormtable.AutoIncrementTable
}

func (this headerTable) Insert(ctx context.Context, header *Header) error {
	return this.table.Insert(ctx, header)
}

func (this headerTable) Update(ctx context.Context, header *Header) error {
	return this.table.Update(ctx, header)
}

func (this headerTable) Save(ctx context.Context, header *Header) error {
	return this.table.Save(ctx, header)
}

func (this headerTable) Delete(ctx context.Context, header *Header) error {
	return this.table.Delete(ctx, header)
}

func (this headerTable) InsertReturningId(ctx context.Context, header *Header) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, header)
}

func (this headerTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this headerTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this headerTable) Get(ctx context.Context, id uint64) (*Header, error) {
	var header Header
	found, err := this.table.PrimaryKey().Get(ctx, &header, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &header, nil
}

func (this headerTable) HasByHeight(ctx context.Context, height uint64) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		height,
	)
}

func (this headerTable) GetByHeight(ctx context.Context, height uint64) (*Header, error) {
	var header Header
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &header,
		height,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &header, nil
}

func (this headerTable) HasByHash(ctx context.Context, hash []byte) (found bool, err error) {
	return this.table.GetIndexByID(3).(ormtable.UniqueIndex).Has(ctx,
		hash,
	)
}

func (this headerTable) GetByHash(ctx context.Context, hash []byte) (*Header, error) {
	var header Header
	found, err := this.table.GetIndexByID(3).(ormtable.UniqueIndex).Get(ctx, &header,
		hash,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &header, nil
}

func (this headerTable) List(ctx context.Context, prefixKey HeaderIndexKey, opts ...ormlist.Option) (HeaderIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return HeaderIterator{it}, err
}

func (this headerTable) ListRange(ctx context.Context, from, to HeaderIndexKey, opts ...ormlist.Option) (HeaderIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return HeaderIterator{it}, err
}

func (this headerTable) DeleteBy(ctx context.Context, prefixKey HeaderIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this headerTable) DeleteRange(ctx context.Context, from, to HeaderIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this headerTable) doNotImplement() {}

var _ HeaderTable = headerTable{}

func NewHeaderTable(db ormtable.Schema) (HeaderTable, error) {
	table := db.GetTable(&Header{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Header{}).ProtoReflect().Descriptor().FullName()))
	}
	return headerTable{table.(ormtable.AutoIncrementTable)}, nil
}

type HeaderdbStore interface {
	HeaderTable() HeaderTable

	doNotImplement()
}

type headerdbStore struct {
	header HeaderTable
}

func (x headerdbStore) HeaderTable() HeaderTable {
	return x.header
}

func (headerdbStore) doNotImplement() {}

var _ HeaderdbStore = headerdbStore{}

func NewHeaderdbStore(db ormtable.Schema) (HeaderdbStore, error) {
	headerTable, err := NewHeaderTable(db)
	if err != nil {
		return nil, err
	}

	return headerdbStore{
		headerTable,
	}, nil
}
