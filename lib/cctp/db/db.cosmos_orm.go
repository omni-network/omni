// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package db

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type MsgSendUSDCTable interface {
	Insert(ctx context.Context, msgSendUsdc *MsgSendUSDC) error
	Update(ctx context.Context, msgSendUsdc *MsgSendUSDC) error
	Save(ctx context.Context, msgSendUsdc *MsgSendUSDC) error
	Delete(ctx context.Context, msgSendUsdc *MsgSendUSDC) error
	Has(ctx context.Context, tx_hash []byte) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, tx_hash []byte) (*MsgSendUSDC, error)
	List(ctx context.Context, prefixKey MsgSendUSDCIndexKey, opts ...ormlist.Option) (MsgSendUSDCIterator, error)
	ListRange(ctx context.Context, from, to MsgSendUSDCIndexKey, opts ...ormlist.Option) (MsgSendUSDCIterator, error)
	DeleteBy(ctx context.Context, prefixKey MsgSendUSDCIndexKey) error
	DeleteRange(ctx context.Context, from, to MsgSendUSDCIndexKey) error

	doNotImplement()
}

type MsgSendUSDCIterator struct {
	ormtable.Iterator
}

func (i MsgSendUSDCIterator) Value() (*MsgSendUSDC, error) {
	var msgSendUsdc MsgSendUSDC
	err := i.UnmarshalMessage(&msgSendUsdc)
	return &msgSendUsdc, err
}

type MsgSendUSDCIndexKey interface {
	id() uint32
	values() []interface{}
	msgSendUsdcindexKey()
}

// primary key starting index..
type MsgSendUSDCPrimaryKey = MsgSendUSDCTxHashIndexKey

type MsgSendUSDCTxHashIndexKey struct {
	vs []interface{}
}

func (x MsgSendUSDCTxHashIndexKey) id() uint32            { return 0 }
func (x MsgSendUSDCTxHashIndexKey) values() []interface{} { return x.vs }
func (x MsgSendUSDCTxHashIndexKey) msgSendUsdcindexKey()  {}

func (this MsgSendUSDCTxHashIndexKey) WithTxHash(tx_hash []byte) MsgSendUSDCTxHashIndexKey {
	this.vs = []interface{}{tx_hash}
	return this
}

type msgSendUsdctable struct {
	table ormtable.Table
}

func (this msgSendUsdctable) Insert(ctx context.Context, msgSendUsdc *MsgSendUSDC) error {
	return this.table.Insert(ctx, msgSendUsdc)
}

func (this msgSendUsdctable) Update(ctx context.Context, msgSendUsdc *MsgSendUSDC) error {
	return this.table.Update(ctx, msgSendUsdc)
}

func (this msgSendUsdctable) Save(ctx context.Context, msgSendUsdc *MsgSendUSDC) error {
	return this.table.Save(ctx, msgSendUsdc)
}

func (this msgSendUsdctable) Delete(ctx context.Context, msgSendUsdc *MsgSendUSDC) error {
	return this.table.Delete(ctx, msgSendUsdc)
}

func (this msgSendUsdctable) Has(ctx context.Context, tx_hash []byte) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, tx_hash)
}

func (this msgSendUsdctable) Get(ctx context.Context, tx_hash []byte) (*MsgSendUSDC, error) {
	var msgSendUsdc MsgSendUSDC
	found, err := this.table.PrimaryKey().Get(ctx, &msgSendUsdc, tx_hash)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &msgSendUsdc, nil
}

func (this msgSendUsdctable) List(ctx context.Context, prefixKey MsgSendUSDCIndexKey, opts ...ormlist.Option) (MsgSendUSDCIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return MsgSendUSDCIterator{it}, err
}

func (this msgSendUsdctable) ListRange(ctx context.Context, from, to MsgSendUSDCIndexKey, opts ...ormlist.Option) (MsgSendUSDCIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return MsgSendUSDCIterator{it}, err
}

func (this msgSendUsdctable) DeleteBy(ctx context.Context, prefixKey MsgSendUSDCIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this msgSendUsdctable) DeleteRange(ctx context.Context, from, to MsgSendUSDCIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this msgSendUsdctable) doNotImplement() {}

var _ MsgSendUSDCTable = msgSendUsdctable{}

func NewMsgSendUSDCTable(db ormtable.Schema) (MsgSendUSDCTable, error) {
	table := db.GetTable(&MsgSendUSDC{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&MsgSendUSDC{}).ProtoReflect().Descriptor().FullName()))
	}
	return msgSendUsdctable{table}, nil
}

type CursorTable interface {
	Insert(ctx context.Context, cursor *Cursor) error
	Update(ctx context.Context, cursor *Cursor) error
	Save(ctx context.Context, cursor *Cursor) error
	Delete(ctx context.Context, cursor *Cursor) error
	Has(ctx context.Context, chain_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, chain_id uint64) (*Cursor, error)
	List(ctx context.Context, prefixKey CursorIndexKey, opts ...ormlist.Option) (CursorIterator, error)
	ListRange(ctx context.Context, from, to CursorIndexKey, opts ...ormlist.Option) (CursorIterator, error)
	DeleteBy(ctx context.Context, prefixKey CursorIndexKey) error
	DeleteRange(ctx context.Context, from, to CursorIndexKey) error

	doNotImplement()
}

type CursorIterator struct {
	ormtable.Iterator
}

func (i CursorIterator) Value() (*Cursor, error) {
	var cursor Cursor
	err := i.UnmarshalMessage(&cursor)
	return &cursor, err
}

type CursorIndexKey interface {
	id() uint32
	values() []interface{}
	cursorIndexKey()
}

// primary key starting index..
type CursorPrimaryKey = CursorChainIdIndexKey

type CursorChainIdIndexKey struct {
	vs []interface{}
}

func (x CursorChainIdIndexKey) id() uint32            { return 0 }
func (x CursorChainIdIndexKey) values() []interface{} { return x.vs }
func (x CursorChainIdIndexKey) cursorIndexKey()       {}

func (this CursorChainIdIndexKey) WithChainId(chain_id uint64) CursorChainIdIndexKey {
	this.vs = []interface{}{chain_id}
	return this
}

type cursorTable struct {
	table ormtable.Table
}

func (this cursorTable) Insert(ctx context.Context, cursor *Cursor) error {
	return this.table.Insert(ctx, cursor)
}

func (this cursorTable) Update(ctx context.Context, cursor *Cursor) error {
	return this.table.Update(ctx, cursor)
}

func (this cursorTable) Save(ctx context.Context, cursor *Cursor) error {
	return this.table.Save(ctx, cursor)
}

func (this cursorTable) Delete(ctx context.Context, cursor *Cursor) error {
	return this.table.Delete(ctx, cursor)
}

func (this cursorTable) Has(ctx context.Context, chain_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, chain_id)
}

func (this cursorTable) Get(ctx context.Context, chain_id uint64) (*Cursor, error) {
	var cursor Cursor
	found, err := this.table.PrimaryKey().Get(ctx, &cursor, chain_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &cursor, nil
}

func (this cursorTable) List(ctx context.Context, prefixKey CursorIndexKey, opts ...ormlist.Option) (CursorIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return CursorIterator{it}, err
}

func (this cursorTable) ListRange(ctx context.Context, from, to CursorIndexKey, opts ...ormlist.Option) (CursorIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return CursorIterator{it}, err
}

func (this cursorTable) DeleteBy(ctx context.Context, prefixKey CursorIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this cursorTable) DeleteRange(ctx context.Context, from, to CursorIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this cursorTable) doNotImplement() {}

var _ CursorTable = cursorTable{}

func NewCursorTable(db ormtable.Schema) (CursorTable, error) {
	table := db.GetTable(&Cursor{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Cursor{}).ProtoReflect().Descriptor().FullName()))
	}
	return cursorTable{table}, nil
}

type DbStore interface {
	MsgSendUSDCTable() MsgSendUSDCTable
	CursorTable() CursorTable

	doNotImplement()
}

type dbStore struct {
	msgSendUsdc MsgSendUSDCTable
	cursor      CursorTable
}

func (x dbStore) MsgSendUSDCTable() MsgSendUSDCTable {
	return x.msgSendUsdc
}

func (x dbStore) CursorTable() CursorTable {
	return x.cursor
}

func (dbStore) doNotImplement() {}

var _ DbStore = dbStore{}

func NewDbStore(db ormtable.Schema) (DbStore, error) {
	msgSendUsdctable, err := NewMsgSendUSDCTable(db)
	if err != nil {
		return nil, err
	}

	cursorTable, err := NewCursorTable(db)
	if err != nil {
		return nil, err
	}

	return dbStore{
		msgSendUsdctable,
		cursorTable,
	}, nil
}
