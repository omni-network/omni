// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package usdt0

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type MsgSendUSDT0Table interface {
	Insert(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error
	Update(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error
	Save(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error
	Delete(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error
	Has(ctx context.Context, tx_hash []byte) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, tx_hash []byte) (*MsgSendUSDT0, error)
	List(ctx context.Context, prefixKey MsgSendUSDT0IndexKey, opts ...ormlist.Option) (MsgSendUSDT0Iterator, error)
	ListRange(ctx context.Context, from, to MsgSendUSDT0IndexKey, opts ...ormlist.Option) (MsgSendUSDT0Iterator, error)
	DeleteBy(ctx context.Context, prefixKey MsgSendUSDT0IndexKey) error
	DeleteRange(ctx context.Context, from, to MsgSendUSDT0IndexKey) error

	doNotImplement()
}

type MsgSendUSDT0Iterator struct {
	ormtable.Iterator
}

func (i MsgSendUSDT0Iterator) Value() (*MsgSendUSDT0, error) {
	var msgSendUsdt0 MsgSendUSDT0
	err := i.UnmarshalMessage(&msgSendUsdt0)
	return &msgSendUsdt0, err
}

type MsgSendUSDT0IndexKey interface {
	id() uint32
	values() []interface{}
	msgSendUsdt0IndexKey()
}

// primary key starting index..
type MsgSendUSDT0PrimaryKey = MsgSendUSDT0TxHashIndexKey

type MsgSendUSDT0TxHashIndexKey struct {
	vs []interface{}
}

func (x MsgSendUSDT0TxHashIndexKey) id() uint32            { return 0 }
func (x MsgSendUSDT0TxHashIndexKey) values() []interface{} { return x.vs }
func (x MsgSendUSDT0TxHashIndexKey) msgSendUsdt0IndexKey() {}

func (this MsgSendUSDT0TxHashIndexKey) WithTxHash(tx_hash []byte) MsgSendUSDT0TxHashIndexKey {
	this.vs = []interface{}{tx_hash}
	return this
}

type msgSendUsdt0Table struct {
	table ormtable.Table
}

func (this msgSendUsdt0Table) Insert(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error {
	return this.table.Insert(ctx, msgSendUsdt0)
}

func (this msgSendUsdt0Table) Update(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error {
	return this.table.Update(ctx, msgSendUsdt0)
}

func (this msgSendUsdt0Table) Save(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error {
	return this.table.Save(ctx, msgSendUsdt0)
}

func (this msgSendUsdt0Table) Delete(ctx context.Context, msgSendUsdt0 *MsgSendUSDT0) error {
	return this.table.Delete(ctx, msgSendUsdt0)
}

func (this msgSendUsdt0Table) Has(ctx context.Context, tx_hash []byte) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, tx_hash)
}

func (this msgSendUsdt0Table) Get(ctx context.Context, tx_hash []byte) (*MsgSendUSDT0, error) {
	var msgSendUsdt0 MsgSendUSDT0
	found, err := this.table.PrimaryKey().Get(ctx, &msgSendUsdt0, tx_hash)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &msgSendUsdt0, nil
}

func (this msgSendUsdt0Table) List(ctx context.Context, prefixKey MsgSendUSDT0IndexKey, opts ...ormlist.Option) (MsgSendUSDT0Iterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return MsgSendUSDT0Iterator{it}, err
}

func (this msgSendUsdt0Table) ListRange(ctx context.Context, from, to MsgSendUSDT0IndexKey, opts ...ormlist.Option) (MsgSendUSDT0Iterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return MsgSendUSDT0Iterator{it}, err
}

func (this msgSendUsdt0Table) DeleteBy(ctx context.Context, prefixKey MsgSendUSDT0IndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this msgSendUsdt0Table) DeleteRange(ctx context.Context, from, to MsgSendUSDT0IndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this msgSendUsdt0Table) doNotImplement() {}

var _ MsgSendUSDT0Table = msgSendUsdt0Table{}

func NewMsgSendUSDT0Table(db ormtable.Schema) (MsgSendUSDT0Table, error) {
	table := db.GetTable(&MsgSendUSDT0{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&MsgSendUSDT0{}).ProtoReflect().Descriptor().FullName()))
	}
	return msgSendUsdt0Table{table}, nil
}

type DbStore interface {
	MsgSendUSDT0Table() MsgSendUSDT0Table

	doNotImplement()
}

type dbStore struct {
	msgSendUsdt0 MsgSendUSDT0Table
}

func (x dbStore) MsgSendUSDT0Table() MsgSendUSDT0Table {
	return x.msgSendUsdt0
}

func (dbStore) doNotImplement() {}

var _ DbStore = dbStore{}

func NewDbStore(db ormtable.Schema) (DbStore, error) {
	msgSendUsdt0Table, err := NewMsgSendUSDT0Table(db)
	if err != nil {
		return nil, err
	}

	return dbStore{
		msgSendUsdt0Table,
	}, nil
}
