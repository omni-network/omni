// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.
// Copied from bindings/omniavs.go due to breaking changes in the new version.
// To be deleted after we move the AVS contracts.

package bindingsv1

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IOmniAVSOperator is an auto generated low-level Go binding around an user-defined struct.
type IOmniAVSOperator struct {
	Addr      common.Address
	Delegated *big.Int
	Staked    *big.Int
}

// IOmniAVSStrategyParam is an auto generated low-level Go binding around an user-defined struct.
type IOmniAVSStrategyParam struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// OmniAVSMetaData contains all meta data concerning the OmniAVS contract.
var OmniAVSMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"delegationManager_\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"},{\"name\":\"avsDirectory_\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addToAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistEnabled\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"canRegister\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperatorFromAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"disableAllowlist\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"enableAllowlist\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ethStakeInbox\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"feeForSync\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"omni_\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"},{\"name\":\"omniChainId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"ethStakeInbox_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"minOperatorStake_\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"maxOperatorCount_\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"strategyParams_\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isInAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"maxOperatorCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minOperatorStake\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omni\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omniChainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operators\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.Operator[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegated\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"staked\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorToAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeFromAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setEthStakeInbox\",\"inputs\":[{\"name\":\"inbox\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMaxOperatorCount\",\"inputs\":[{\"name\":\"count\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMetadataURI\",\"inputs\":[{\"name\":\"metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinOperatorStake\",\"inputs\":[{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOmniChainId\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOmniPortal\",\"inputs\":[{\"name\":\"portal\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStrategyParams\",\"inputs\":[{\"name\":\"params\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXCallGasLimits\",\"inputs\":[{\"name\":\"base\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"perOperator\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"strategyParams\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"syncWithOmni\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"xcallBaseGasLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xcallGasLimitPerOperator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AllowlistDisabled\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AllowlistEnabled\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAdded\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAllowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorDisallowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRemoved\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002e3438038062002e34833981016040819052620000349162000133565b6001600160a01b03808316608052811660a0526200005162000059565b505062000172565b600054610100900460ff1615620000c65760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000118576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013057600080fd5b50565b600080604083850312156200014757600080fd5b825162000154816200011a565b602084015190925062000167816200011a565b809150509250929050565b60805160a051612c79620001bb6000396000818161043f01528181610c14015281816110d0015261126301526000818161089c01528181611b50015261205e0152612c796000f3fe6080604052600436106102255760003560e01c80638da5cb5b11610123578063d17efb36116100ab578063eedc8a211161006f578063eedc8a21146106ba578063f2fde38b146106da578063f36b8d36146106fa578063f57f33d01461071a578063f8e86ece1461073c57600080fd5b8063d17efb361461060b578063d775cb611461062b578063e481af9d14610663578063e673df8a14610678578063eb3162351461069a57600080fd5b8063ae30f16d116100f2578063ae30f16d1461056c578063b98912b01461058c578063c6a2aac8146105af578063c75e3aed146105c4578063cf8e629a146105f657600080fd5b80638da5cb5b146104ed57806394c8e4ff1461050b5780639926ee7d1461052c578063a364f4da1461054c57600080fd5b806354c74ed3116101b1578063715018a611610175578063715018a614610463578063750521f5146104785780637815873d146104985780638456cb59146104b85780638cc8d5a8146104cd57600080fd5b806354c74ed3146103b15780635c78b0e2146103d85780635c975abb146103f85780635da93d7e146104105780636b3aa72e1461043057600080fd5b806329d0fdc0116101f857806329d0fdc0146102c0578063320d46d41461030957806333cfb7b71461033757806339acf9f1146103645780633f4ba83a1461039c57600080fd5b80630c4158841461022a578063110ff5f11461024c57806313efbe9214610291578063243d51c714610299575b600080fd5b34801561023657600080fd5b5061024a6102453660046122ec565b61075c565b005b34801561025857600080fd5b50609a546102749064010000000090046001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b61024a610786565b3480156102a557600080fd5b50609a5461027490600160a01b90046001600160401b031681565b3480156102cc57600080fd5b506102f96102db3660046122ec565b6001600160a01b031660009081526099602052604090205460ff1690565b6040519015158152602001610288565b34801561031557600080fd5b506103296103243660046122ec565b610877565b604051610288929190612356565b34801561034357600080fd5b506103576103523660046122ec565b610a9c565b6040516102889190612379565b34801561037057600080fd5b50609d54610384906001600160a01b031681565b6040516001600160a01b039091168152602001610288565b3480156103a857600080fd5b5061024a610acd565b3480156103bd57600080fd5b50609a5461027490600160601b90046001600160401b031681565b3480156103e457600080fd5b5061024a6103f33660046123e2565b610adf565b34801561040457600080fd5b5060655460ff166102f9565b34801561041c57600080fd5b5061024a61042b3660046122ec565b610b16565b34801561043c57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610384565b34801561046f57600080fd5b5061024a610be3565b34801561048457600080fd5b5061024a6104933660046124c2565b610bf5565b3480156104a457600080fd5b50609c54610384906001600160a01b031681565b3480156104c457600080fd5b5061024a610c7e565b3480156104d957600080fd5b5061024a6104e836600461257e565b610c8e565b3480156104f957600080fd5b506033546001600160a01b0316610384565b34801561051757600080fd5b50609b546102f990600160601b900460ff1681565b34801561053857600080fd5b5061024a61054736600461262c565b610e84565b34801561055857600080fd5b5061024a6105673660046122ec565b611171565b34801561057857600080fd5b5061024a6105873660046126d6565b6112f6565b34801561059857600080fd5b506105a161130c565b604051908152602001610288565b3480156105bb57600080fd5b5061024a611400565b3480156105d057600080fd5b50609a546105e19063ffffffff1681565b60405163ffffffff9091168152602001610288565b34801561060257600080fd5b5061024a6114a0565b34801561061757600080fd5b5061024a6106263660046122ec565b611539565b34801561063757600080fd5b50609b5461064b906001600160601b031681565b6040516001600160601b039091168152602001610288565b34801561066f57600080fd5b50610357611563565b34801561068457600080fd5b5061068d611572565b6040516102889190612717565b3480156106a657600080fd5b5061024a6106b5366004612786565b61157c565b3480156106c657600080fd5b5061024a6106d53660046127a3565b6115ab565b3480156106e657600080fd5b5061024a6106f53660046122ec565b611602565b34801561070657600080fd5b5061024a6107153660046127d6565b61167b565b34801561072657600080fd5b5061072f61169f565b60405161028891906127f1565b34801561074857600080fd5b5061024a6107573660046122ec565b61171b565b61076461182e565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b61078e611888565b60006107986118ce565b609d54609a54609c546040519394506001600160a01b03928316936370e8b56a93349364010000000090046001600160401b03169216906333364ffb60e11b906107e6908890602401612717565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152865161082390611a23565b6040518663ffffffff1660e01b81526004016108429493929190612845565b6000604051808303818588803b15801561085b57600080fd5b505af115801561086f573d6000803e3d6000fd5b505050505050565b6040516336b87bd760e11b81526001600160a01b0382811660048301526000916060917f00000000000000000000000000000000000000000000000000000000000000001690636d70f7ae90602401602060405180830381865afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610907919061288a565b61093b57505060408051808201909152600f81526e3737ba1030b71037b832b930ba37b960891b6020820152600092909150565b609b54600160601b900460ff16801561096d57506001600160a01b03831660009081526099602052604090205460ff16155b156109a357505060408051808201909152601081526f1b9bdd081a5b88185b1b1bdddb1a5cdd60821b6020820152600092909150565b6109ac83611a58565b156109e4575050604080518082019091526012815271185b1c9958591e481c9959da5cdd195c995960721b6020820152600092909150565b609a5460985463ffffffff90911611610a2d5750506040805180820190915260158152741b585e081bdc195c985d1bdc9cc81c995858da1959605a1b6020820152600092909150565b609b546001600160601b0316610a4284611ab8565b6001600160601b03161015610a835750506040805180820190915260118152701b5a5b881cdd185ad9481b9bdd081b595d607a1b6020820152600092909150565b5050604080516020810190915260008152600192909150565b6060610aa782611a58565b610abf57505060408051600081526020810190915290565b610ac7611be9565b92915050565b610ad561182e565b610add611ca1565b565b610ae761182e565b609a80546001600160401b03909216640100000000026bffffffffffffffff0000000019909216919091179055565b610b1e61182e565b6001600160a01b03811660009081526099602052604090205460ff16610b8b5760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a206e6f7420696e20616c6c6f776c6973740000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260996020908152604091829020805460ff1916905590519182527f8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb91015b60405180910390a150565b610beb61182e565b610add6000611cf3565b610bfd61182e565b60405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb35590610c499084906004016128ac565b600060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b5050505050565b610c8661182e565b610add611d45565b600054610100900460ff1615808015610cae5750600054600160ff909116105b80610cc85750303b158015610cc8575060005460ff166001145b610d2b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b82565b6000805460ff191660011790558015610d4e576000805461ff0019166101001790555b609d80546001600160a01b03199081166001600160a01b038b811691909117909255609a8054609b8054600160601b6cffffffffffffffffffffffffff199091166001600160601b038c161717905561249f60a31b73ffffffffffffffffffffffffffffffff00000000199091166401000000006001600160401b038d160267ffffffffffffffff60601b191617610c3560641b177fffffffff0000000000000000ffffffffffffffffffffffffffffffff000000001663ffffffff891617179055609c8054909116918816919091179055610e2989611cf3565b610e338383611d82565b8015610e79576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b610e8c611888565b336001600160a01b03831614610edd5760405162461bcd60e51b815260206004820152601660248201527527b6b734a0ab299d1037b7363c9037b832b930ba37b960511b6044820152606401610b82565b609b54600160601b900460ff161580610f0e57506001600160a01b03821660009081526099602052604090205460ff165b610f515760405162461bcd60e51b815260206004820152601460248201527313db5b9a505594ce881b9bdd08185b1b1bddd95960621b6044820152606401610b82565b610f5a82611a58565b15610fa75760405162461bcd60e51b815260206004820152601c60248201527f4f6d6e694156533a20616c726561647920616e206f70657261746f72000000006044820152606401610b82565b609a5460985463ffffffff909116116110025760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e694156533a206d6178206f70657261746f7273207265616368656400006044820152606401610b82565b609b546001600160601b031661101783611ab8565b6001600160601b0316101561106e5760405162461bcd60e51b815260206004820152601a60248201527f4f6d6e694156533a206d696e207374616b65206e6f74206d65740000000000006044820152606401610b82565b609880546001810182556000919091527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8140180546001600160a01b0319166001600160a01b038416179055604051639926ee7d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639926ee7d9061110790859085906004016128bf565b600060405180830381600087803b15801561112157600080fd5b505af1158015611135573d6000803e3d6000fd5b50506040516001600160a01b03851692507fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d9150600090a25050565b611179611888565b336001600160a01b038216148061119a57506033546001600160a01b031633145b6111e65760405162461bcd60e51b815260206004820152601f60248201527f4f6d6e694156533a206f6e6c79206f70657261746f72206f72206f776e6572006044820152606401610b82565b6111ef81611a58565b61123b5760405162461bcd60e51b815260206004820152601860248201527f4f6d6e694156533a206e6f7420616e206f70657261746f7200000000000000006044820152606401610b82565b61124481611f3a565b6040516351b27a6d60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da90602401600060405180830381600087803b1580156112a757600080fd5b505af11580156112bb573d6000803e3d6000fd5b50506040516001600160a01b03841692507f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d9150600090a250565b6112fe61182e565b6113088282611d82565b5050565b6000806113176118ce565b609d54609a546040519293506001600160a01b0390911691638dd9523c9164010000000090046001600160401b0316906333364ffb60e11b9061135e908690602401612717565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152845161139b90611a23565b6040518463ffffffff1660e01b81526004016113b99392919061290a565b602060405180830381865afa1580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190612940565b91505090565b61140861182e565b609b54600160601b900460ff16156114625760405162461bcd60e51b815260206004820152601860248201527f4f6d6e694156533a20616c726561647920656e61626c656400000000000000006044820152606401610b82565b609b805460ff60601b1916600160601b1790556040517f8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec390600090a1565b6114a861182e565b609b54600160601b900460ff166115015760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a20616c72656164792064697361626c6564000000000000006044820152606401610b82565b609b805460ff60601b191690556040517f2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb0790600090a1565b61154161182e565b609c80546001600160a01b0319166001600160a01b0392909216919091179055565b606061156d611be9565b905090565b606061156d6118ce565b61158461182e565b609b80546bffffffffffffffffffffffff19166001600160601b0392909216919091179055565b6115b361182e565b609a80546fffffffffffffffffffffffffffffffff60601b1916600160a01b6001600160401b039485160267ffffffffffffffff60601b191617600160601b9290931691909102919091179055565b61160a61182e565b6001600160a01b03811661166f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b82565b61167881611cf3565b50565b61168361182e565b609a805463ffffffff191663ffffffff92909216919091179055565b60606097805480602002602001604051908101604052809291908181526020016000905b8282101561171257600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b0316818301528252600190920191016116c3565b50505050905090565b61172361182e565b6001600160a01b0381166117715760405162461bcd60e51b81526020600482015260156024820152744f6d6e694156533a207a65726f206164647265737360581b6044820152606401610b82565b6001600160a01b03811660009081526099602052604090205460ff16156117da5760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e694156533a20616c726561647920696e20616c6c6f776c6973740000006044820152606401610b82565b6001600160a01b038116600081815260996020908152604091829020805460ff1916600117905590519182527fdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e759101610bd8565b6033546001600160a01b03163314610add5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b82565b60655460ff1615610add5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b82565b6098546060906000906001600160401b038111156118ee576118ee6123fd565b60405190808252806020026020018201604052801561193957816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161190c5790505b50905060005b8151811015611a1d5760006098828154811061195d5761195d612959565b60009182526020822001546001600160a01b0316915061197c82611ab8565b9050600061198983612038565b90506000816001600160601b0316836001600160601b0316116119ad5760006119b7565b6119b78284612985565b90506040518060600160405280856001600160a01b03168152602001826001600160601b03168152602001836001600160601b0316815250868681518110611a0157611a01612959565b602002602001018190525084806001019550505050505061193f565b50919050565b609a546000906001600160401b03600160a01b8204811691611a4e91600160601b90910416846129ad565b610ac791906129dc565b6000805b609854811015611aaf57826001600160a01b031660988281548110611a8357611a83612959565b6000918252602090912001546001600160a01b03161415611aa75750600192915050565b600101611a5c565b50600092915050565b6040805180820190915260008082526020820181905290819060005b609754811015611be05760978181548110611af157611af1612959565b6000918252602080832060408051808201825293909101546001600160a01b03808216808652600160a01b9092046001600160601b031693850193909352905163778e55f360e01b8152898316600482015260248101919091529194507f0000000000000000000000000000000000000000000000000000000000000000169063778e55f390604401602060405180830381865afa158015611b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbb9190612940565b9050611bcb81846020015161222d565b611bd59085612a07565b935050600101611ad4565b50909392505050565b6097546060906000906001600160401b03811115611c0957611c096123fd565b604051908082528060200260200182016040528015611c32578160200160208202803683370190505b50905060005b609754811015611a1d5760978181548110611c5557611c55612959565b60009182526020909120015482516001600160a01b0390911690839083908110611c8157611c81612959565b6001600160a01b0390921660209283029190910190910152600101611c38565b611ca961225c565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d4d611888565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cd63390565b611d8e609760006122a5565b60005b81811015611f35576000838383818110611dad57611dad612959565b611dc392602060409092020190810191506122ec565b6001600160a01b03161415611e1a5760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a206e6f207a65726f207374726174656779000000000000006044820152606401610b82565b6000611e27826001612a29565b90505b82811015611eea57838382818110611e4457611e44612959565b611e5a92602060409092020190810191506122ec565b6001600160a01b0316848484818110611e7557611e75612959565b611e8b92602060409092020190810191506122ec565b6001600160a01b03161415611ee25760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e694156533a206e6f206475706c696361746520737472617465677900006044820152606401610b82565b600101611e2a565b506097838383818110611eff57611eff612959565b83546001810185556000948552602090942060409091029290920192919091019050611f2b8282612a41565b5050600101611d91565b505050565b60005b60985481101561130857816001600160a01b031660988281548110611f6457611f64612959565b6000918252602090912001546001600160a01b031614156120305760988054611f8f90600190612a83565b81548110611f9f57611f9f612959565b600091825260209091200154609880546001600160a01b039092169183908110611fcb57611fcb612959565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550609880548061200a5761200a612a9a565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b600101611f3d565b6040516367c0439f60e11b81526001600160a01b038281166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063cf80873e90602401600060405180830381865afa1580156120a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120cf9190810190612b3e565b90925090506000805b83518110156122245760008482815181106120f5576120f5612959565b6020026020010151905061212e604051806040016040528060006001600160a01b0316815260200160006001600160601b031681525090565b60005b6097548110156121d057826001600160a01b03166097828154811061215857612158612959565b6000918252602090912001546001600160a01b031614156121c8576097818154811061218657612186612959565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b03169181019190915291506121d0565b600101612131565b5080516001600160a01b03166121e75750506120d8565b61220e8584815181106121fc576121fc612959565b6020026020010151826020015161222d565b6122189085612a07565b935050506001016120d8565b50949350505050565b6000670de0b6b3a764000061224b6001600160601b03841685612c02565b6122559190612c21565b9392505050565b60655460ff16610add5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b82565b508054600082559060005260206000209081019061167891905b808211156122d357600081556001016122bf565b5090565b6001600160a01b038116811461167857600080fd5b6000602082840312156122fe57600080fd5b8135612255816122d7565b6000815180845260005b8181101561232f57602081850181015186830182015201612313565b81811115612341576000602083870101525b50601f01601f19169290920160200192915050565b82151581526040602082015260006123716040830184612309565b949350505050565b6020808252825182820181905260009190848201906040850190845b818110156123ba5783516001600160a01b031683529284019291840191600101612395565b50909695505050505050565b80356001600160401b03811681146123dd57600080fd5b919050565b6000602082840312156123f457600080fd5b612255826123c6565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612435576124356123fd565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612463576124636123fd565b604052919050565b60006001600160401b03831115612484576124846123fd565b612497601f8401601f191660200161243b565b90508281528383830111156124ab57600080fd5b828260208301376000602084830101529392505050565b6000602082840312156124d457600080fd5b81356001600160401b038111156124ea57600080fd5b8201601f810184136124fb57600080fd5b6123718482356020840161246b565b6001600160601b038116811461167857600080fd5b803563ffffffff811681146123dd57600080fd5b60008083601f84011261254557600080fd5b5081356001600160401b0381111561255c57600080fd5b6020830191508360208260061b850101111561257757600080fd5b9250929050565b60008060008060008060008060e0898b03121561259a57600080fd5b88356125a5816122d7565b975060208901356125b5816122d7565b96506125c360408a016123c6565b955060608901356125d3816122d7565b945060808901356125e38161250a565b93506125f160a08a0161251f565b925060c08901356001600160401b0381111561260c57600080fd5b6126188b828c01612533565b999c989b5096995094979396929594505050565b6000806040838503121561263f57600080fd5b823561264a816122d7565b915060208301356001600160401b038082111561266657600080fd5b908401906060828703121561267a57600080fd5b612682612413565b82358281111561269157600080fd5b83019150601f820187136126a457600080fd5b6126b38783356020850161246b565b815260208301356020820152604083013560408201528093505050509250929050565b600080602083850312156126e957600080fd5b82356001600160401b038111156126ff57600080fd5b61270b85828601612533565b90969095509350505050565b602080825282518282018190526000919060409081850190868401855b8281101561277957815180516001600160a01b03168552868101516001600160601b039081168887015290860151168585015260609093019290850190600101612734565b5091979650505050505050565b60006020828403121561279857600080fd5b81356122558161250a565b600080604083850312156127b657600080fd5b6127bf836123c6565b91506127cd602084016123c6565b90509250929050565b6000602082840312156127e857600080fd5b6122558261251f565b602080825282518282018190526000919060409081850190868401855b8281101561277957815180516001600160a01b031685528601516001600160601b031686850152928401929085019060010161280e565b60006001600160401b03808716835260018060a01b0386166020840152608060408401526128766080840186612309565b915080841660608401525095945050505050565b60006020828403121561289c57600080fd5b8151801515811461225557600080fd5b6020815260006122556020830184612309565b60018060a01b03831681526040602082015260008251606060408401526128e960a0840182612309565b90506020840151606084015260408401516080840152809150509392505050565b60006001600160401b0380861683526060602084015261292d6060840186612309565b9150808416604084015250949350505050565b60006020828403121561295257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b03838116908316818110156129a5576129a561296f565b039392505050565b60006001600160401b03808316818516818304811182151516156129d3576129d361296f565b02949350505050565b60006001600160401b038083168185168083038211156129fe576129fe61296f565b01949350505050565b60006001600160601b038083168185168083038211156129fe576129fe61296f565b60008219821115612a3c57612a3c61296f565b500190565b8135612a4c816122d7565b81546001600160a01b03199081166001600160a01b039290921691821783556020840135612a798161250a565b60a01b1617905550565b600082821015612a9557612a9561296f565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001600160401b03821115612ac957612ac96123fd565b5060051b60200190565b600082601f830112612ae457600080fd5b81516020612af9612af483612ab0565b61243b565b82815260059290921b84018101918181019086841115612b1857600080fd5b8286015b84811015612b335780518352918301918301612b1c565b509695505050505050565b60008060408385031215612b5157600080fd5b82516001600160401b0380821115612b6857600080fd5b818501915085601f830112612b7c57600080fd5b81516020612b8c612af483612ab0565b82815260059290921b84018101918181019089841115612bab57600080fd5b948201945b83861015612bd2578551612bc3816122d7565b82529482019490820190612bb0565b91880151919650909350505080821115612beb57600080fd5b50612bf885828601612ad3565b9150509250929050565b6000816000190483118215151615612c1c57612c1c61296f565b500290565b600082612c3e57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bf3e634337305a44a0e88f6f3577902c1f008ad6dfedc2e8cc9e899dd8e58d9e64736f6c634300080c0033",
}

// OmniAVSABI is the input ABI used to generate the binding from.
// Deprecated: Use OmniAVSMetaData.ABI instead.
var OmniAVSABI = OmniAVSMetaData.ABI

// OmniAVSBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OmniAVSMetaData.Bin instead.
var OmniAVSBin = OmniAVSMetaData.Bin

// DeployOmniAVS deploys a new Ethereum contract, binding an instance of OmniAVS to it.
func DeployOmniAVS(auth *bind.TransactOpts, backend bind.ContractBackend, delegationManager_ common.Address, avsDirectory_ common.Address) (common.Address, *types.Transaction, *OmniAVS, error) {
	parsed, err := OmniAVSMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("getABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OmniAVSBin), backend, delegationManager_, avsDirectory_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OmniAVS{OmniAVSCaller: OmniAVSCaller{contract: contract}, OmniAVSTransactor: OmniAVSTransactor{contract: contract}, OmniAVSFilterer: OmniAVSFilterer{contract: contract}}, nil
}

// OmniAVS is an auto generated Go binding around an Ethereum contract.
type OmniAVS struct {
	OmniAVSCaller     // Read-only binding to the contract
	OmniAVSTransactor // Write-only binding to the contract
	OmniAVSFilterer   // Log filterer for contract events
}

// OmniAVSCaller is an auto generated read-only Go binding around an Ethereum contract.
type OmniAVSCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OmniAVSTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OmniAVSFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OmniAVSSession struct {
	Contract     *OmniAVS          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OmniAVSCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OmniAVSCallerSession struct {
	Contract *OmniAVSCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OmniAVSTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OmniAVSTransactorSession struct {
	Contract     *OmniAVSTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OmniAVSRaw is an auto generated low-level Go binding around an Ethereum contract.
type OmniAVSRaw struct {
	Contract *OmniAVS // Generic contract binding to access the raw methods on
}

// OmniAVSCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OmniAVSCallerRaw struct {
	Contract *OmniAVSCaller // Generic read-only contract binding to access the raw methods on
}

// OmniAVSTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OmniAVSTransactorRaw struct {
	Contract *OmniAVSTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOmniAVS creates a new instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVS(address common.Address, backend bind.ContractBackend) (*OmniAVS, error) {
	contract, err := bindOmniAVS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OmniAVS{OmniAVSCaller: OmniAVSCaller{contract: contract}, OmniAVSTransactor: OmniAVSTransactor{contract: contract}, OmniAVSFilterer: OmniAVSFilterer{contract: contract}}, nil
}

// NewOmniAVSCaller creates a new read-only instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSCaller(address common.Address, caller bind.ContractCaller) (*OmniAVSCaller, error) {
	contract, err := bindOmniAVS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OmniAVSCaller{contract: contract}, nil
}

// NewOmniAVSTransactor creates a new write-only instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSTransactor(address common.Address, transactor bind.ContractTransactor) (*OmniAVSTransactor, error) {
	contract, err := bindOmniAVS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OmniAVSTransactor{contract: contract}, nil
}

// NewOmniAVSFilterer creates a new log filterer instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSFilterer(address common.Address, filterer bind.ContractFilterer) (*OmniAVSFilterer, error) {
	contract, err := bindOmniAVS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OmniAVSFilterer{contract: contract}, nil
}

// bindOmniAVS binds a generic wrapper to an already deployed contract.
func bindOmniAVS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OmniAVSMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniAVS *OmniAVSRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniAVS.Contract.OmniAVSCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniAVS *OmniAVSRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.Contract.OmniAVSTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniAVS *OmniAVSRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniAVS.Contract.OmniAVSTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniAVS *OmniAVSCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniAVS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniAVS *OmniAVSTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniAVS *OmniAVSTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniAVS.Contract.contract.Transact(opts, method, params...)
}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_OmniAVS *OmniAVSCaller) AllowlistEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "allowlistEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_OmniAVS *OmniAVSSession) AllowlistEnabled() (bool, error) {
	return _OmniAVS.Contract.AllowlistEnabled(&_OmniAVS.CallOpts)
}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) AllowlistEnabled() (bool, error) {
	return _OmniAVS.Contract.AllowlistEnabled(&_OmniAVS.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSSession) AvsDirectory() (common.Address, error) {
	return _OmniAVS.Contract.AvsDirectory(&_OmniAVS.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) AvsDirectory() (common.Address, error) {
	return _OmniAVS.Contract.AvsDirectory(&_OmniAVS.CallOpts)
}

// CanRegister is a free data retrieval call binding the contract method 0x320d46d4.
//
// Solidity: function canRegister(address operator) view returns(bool, string)
func (_OmniAVS *OmniAVSCaller) CanRegister(opts *bind.CallOpts, operator common.Address) (bool, string, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "canRegister", operator)

	if err != nil {
		return *new(bool), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// CanRegister is a free data retrieval call binding the contract method 0x320d46d4.
//
// Solidity: function canRegister(address operator) view returns(bool, string)
func (_OmniAVS *OmniAVSSession) CanRegister(operator common.Address) (bool, string, error) {
	return _OmniAVS.Contract.CanRegister(&_OmniAVS.CallOpts, operator)
}

// CanRegister is a free data retrieval call binding the contract method 0x320d46d4.
//
// Solidity: function canRegister(address operator) view returns(bool, string)
func (_OmniAVS *OmniAVSCallerSession) CanRegister(operator common.Address) (bool, string, error) {
	return _OmniAVS.Contract.CanRegister(&_OmniAVS.CallOpts, operator)
}

// EthStakeInbox is a free data retrieval call binding the contract method 0x7815873d.
//
// Solidity: function ethStakeInbox() view returns(address)
func (_OmniAVS *OmniAVSCaller) EthStakeInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "ethStakeInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EthStakeInbox is a free data retrieval call binding the contract method 0x7815873d.
//
// Solidity: function ethStakeInbox() view returns(address)
func (_OmniAVS *OmniAVSSession) EthStakeInbox() (common.Address, error) {
	return _OmniAVS.Contract.EthStakeInbox(&_OmniAVS.CallOpts)
}

// EthStakeInbox is a free data retrieval call binding the contract method 0x7815873d.
//
// Solidity: function ethStakeInbox() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) EthStakeInbox() (common.Address, error) {
	return _OmniAVS.Contract.EthStakeInbox(&_OmniAVS.CallOpts)
}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSCaller) FeeForSync(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "feeForSync")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSSession) FeeForSync() (*big.Int, error) {
	return _OmniAVS.Contract.FeeForSync(&_OmniAVS.CallOpts)
}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSCallerSession) FeeForSync() (*big.Int, error) {
	return _OmniAVS.Contract.FeeForSync(&_OmniAVS.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "getOperatorRestakedStrategies", operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _OmniAVS.Contract.GetOperatorRestakedStrategies(&_OmniAVS.CallOpts, operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSCallerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _OmniAVS.Contract.GetOperatorRestakedStrategies(&_OmniAVS.CallOpts, operator)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _OmniAVS.Contract.GetRestakeableStrategies(&_OmniAVS.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _OmniAVS.Contract.GetRestakeableStrategies(&_OmniAVS.CallOpts)
}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSCaller) IsInAllowlist(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "isInAllowlist", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSSession) IsInAllowlist(operator common.Address) (bool, error) {
	return _OmniAVS.Contract.IsInAllowlist(&_OmniAVS.CallOpts, operator)
}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) IsInAllowlist(operator common.Address) (bool, error) {
	return _OmniAVS.Contract.IsInAllowlist(&_OmniAVS.CallOpts, operator)
}

// MaxOperatorCount is a free data retrieval call binding the contract method 0xc75e3aed.
//
// Solidity: function maxOperatorCount() view returns(uint32)
func (_OmniAVS *OmniAVSCaller) MaxOperatorCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "maxOperatorCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MaxOperatorCount is a free data retrieval call binding the contract method 0xc75e3aed.
//
// Solidity: function maxOperatorCount() view returns(uint32)
func (_OmniAVS *OmniAVSSession) MaxOperatorCount() (uint32, error) {
	return _OmniAVS.Contract.MaxOperatorCount(&_OmniAVS.CallOpts)
}

// MaxOperatorCount is a free data retrieval call binding the contract method 0xc75e3aed.
//
// Solidity: function maxOperatorCount() view returns(uint32)
func (_OmniAVS *OmniAVSCallerSession) MaxOperatorCount() (uint32, error) {
	return _OmniAVS.Contract.MaxOperatorCount(&_OmniAVS.CallOpts)
}

// MinOperatorStake is a free data retrieval call binding the contract method 0xd775cb61.
//
// Solidity: function minOperatorStake() view returns(uint96)
func (_OmniAVS *OmniAVSCaller) MinOperatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "minOperatorStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinOperatorStake is a free data retrieval call binding the contract method 0xd775cb61.
//
// Solidity: function minOperatorStake() view returns(uint96)
func (_OmniAVS *OmniAVSSession) MinOperatorStake() (*big.Int, error) {
	return _OmniAVS.Contract.MinOperatorStake(&_OmniAVS.CallOpts)
}

// MinOperatorStake is a free data retrieval call binding the contract method 0xd775cb61.
//
// Solidity: function minOperatorStake() view returns(uint96)
func (_OmniAVS *OmniAVSCallerSession) MinOperatorStake() (*big.Int, error) {
	return _OmniAVS.Contract.MinOperatorStake(&_OmniAVS.CallOpts)
}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSCaller) Omni(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "omni")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSSession) Omni() (common.Address, error) {
	return _OmniAVS.Contract.Omni(&_OmniAVS.CallOpts)
}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) Omni() (common.Address, error) {
	return _OmniAVS.Contract.Omni(&_OmniAVS.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) OmniChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "omniChainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSSession) OmniChainId() (uint64, error) {
	return _OmniAVS.Contract.OmniChainId(&_OmniAVS.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) OmniChainId() (uint64, error) {
	return _OmniAVS.Contract.OmniChainId(&_OmniAVS.CallOpts)
}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,uint96,uint96)[])
func (_OmniAVS *OmniAVSCaller) Operators(opts *bind.CallOpts) ([]IOmniAVSOperator, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "operators")

	if err != nil {
		return *new([]IOmniAVSOperator), err
	}

	out0 := *abi.ConvertType(out[0], new([]IOmniAVSOperator)).(*[]IOmniAVSOperator)

	return out0, err

}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,uint96,uint96)[])
func (_OmniAVS *OmniAVSSession) Operators() ([]IOmniAVSOperator, error) {
	return _OmniAVS.Contract.Operators(&_OmniAVS.CallOpts)
}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,uint96,uint96)[])
func (_OmniAVS *OmniAVSCallerSession) Operators() ([]IOmniAVSOperator, error) {
	return _OmniAVS.Contract.Operators(&_OmniAVS.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSSession) Owner() (common.Address, error) {
	return _OmniAVS.Contract.Owner(&_OmniAVS.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) Owner() (common.Address, error) {
	return _OmniAVS.Contract.Owner(&_OmniAVS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSSession) Paused() (bool, error) {
	return _OmniAVS.Contract.Paused(&_OmniAVS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) Paused() (bool, error) {
	return _OmniAVS.Contract.Paused(&_OmniAVS.CallOpts)
}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSCaller) StrategyParams(opts *bind.CallOpts) ([]IOmniAVSStrategyParam, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "strategyParams")

	if err != nil {
		return *new([]IOmniAVSStrategyParam), err
	}

	out0 := *abi.ConvertType(out[0], new([]IOmniAVSStrategyParam)).(*[]IOmniAVSStrategyParam)

	return out0, err

}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSSession) StrategyParams() ([]IOmniAVSStrategyParam, error) {
	return _OmniAVS.Contract.StrategyParams(&_OmniAVS.CallOpts)
}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSCallerSession) StrategyParams() ([]IOmniAVSStrategyParam, error) {
	return _OmniAVS.Contract.StrategyParams(&_OmniAVS.CallOpts)
}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) XcallBaseGasLimit(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "xcallBaseGasLimit")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSSession) XcallBaseGasLimit() (uint64, error) {
	return _OmniAVS.Contract.XcallBaseGasLimit(&_OmniAVS.CallOpts)
}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) XcallBaseGasLimit() (uint64, error) {
	return _OmniAVS.Contract.XcallBaseGasLimit(&_OmniAVS.CallOpts)
}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) XcallGasLimitPerOperator(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "xcallGasLimitPerOperator")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSSession) XcallGasLimitPerOperator() (uint64, error) {
	return _OmniAVS.Contract.XcallGasLimitPerOperator(&_OmniAVS.CallOpts)
}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) XcallGasLimitPerOperator() (uint64, error) {
	return _OmniAVS.Contract.XcallGasLimitPerOperator(&_OmniAVS.CallOpts)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) AddToAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "addToAllowlist", operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.AddToAllowlist(&_OmniAVS.TransactOpts, operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.AddToAllowlist(&_OmniAVS.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) DeregisterOperatorFromAVS(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "deregisterOperatorFromAVS", operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_OmniAVS *OmniAVSSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.DeregisterOperatorFromAVS(&_OmniAVS.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.DeregisterOperatorFromAVS(&_OmniAVS.TransactOpts, operator)
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactor) DisableAllowlist(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "disableAllowlist")
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_OmniAVS *OmniAVSSession) DisableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.DisableAllowlist(&_OmniAVS.TransactOpts)
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactorSession) DisableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.DisableAllowlist(&_OmniAVS.TransactOpts)
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactor) EnableAllowlist(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "enableAllowlist")
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_OmniAVS *OmniAVSSession) EnableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.EnableAllowlist(&_OmniAVS.TransactOpts)
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactorSession) EnableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.EnableAllowlist(&_OmniAVS.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8cc8d5a8.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, address ethStakeInbox_, uint96 minOperatorStake_, uint32 maxOperatorCount_, (address,uint96)[] strategyParams_) returns()
func (_OmniAVS *OmniAVSTransactor) Initialize(opts *bind.TransactOpts, owner_ common.Address, omni_ common.Address, omniChainId_ uint64, ethStakeInbox_ common.Address, minOperatorStake_ *big.Int, maxOperatorCount_ uint32, strategyParams_ []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "initialize", owner_, omni_, omniChainId_, ethStakeInbox_, minOperatorStake_, maxOperatorCount_, strategyParams_)
}

// Initialize is a paid mutator transaction binding the contract method 0x8cc8d5a8.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, address ethStakeInbox_, uint96 minOperatorStake_, uint32 maxOperatorCount_, (address,uint96)[] strategyParams_) returns()
func (_OmniAVS *OmniAVSSession) Initialize(owner_ common.Address, omni_ common.Address, omniChainId_ uint64, ethStakeInbox_ common.Address, minOperatorStake_ *big.Int, maxOperatorCount_ uint32, strategyParams_ []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.Initialize(&_OmniAVS.TransactOpts, owner_, omni_, omniChainId_, ethStakeInbox_, minOperatorStake_, maxOperatorCount_, strategyParams_)
}

// Initialize is a paid mutator transaction binding the contract method 0x8cc8d5a8.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, address ethStakeInbox_, uint96 minOperatorStake_, uint32 maxOperatorCount_, (address,uint96)[] strategyParams_) returns()
func (_OmniAVS *OmniAVSTransactorSession) Initialize(owner_ common.Address, omni_ common.Address, omniChainId_ uint64, ethStakeInbox_ common.Address, minOperatorStake_ *big.Int, maxOperatorCount_ uint32, strategyParams_ []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.Initialize(&_OmniAVS.TransactOpts, owner_, omni_, omniChainId_, ethStakeInbox_, minOperatorStake_, maxOperatorCount_, strategyParams_)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSSession) Pause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Pause(&_OmniAVS.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSTransactorSession) Pause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Pause(&_OmniAVS.TransactOpts)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSTransactor) RegisterOperatorToAVS(opts *bind.TransactOpts, operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "registerOperatorToAVS", operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.Contract.RegisterOperatorToAVS(&_OmniAVS.TransactOpts, operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSTransactorSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.Contract.RegisterOperatorToAVS(&_OmniAVS.TransactOpts, operator, operatorSignature)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) RemoveFromAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "removeFromAllowlist", operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.RemoveFromAllowlist(&_OmniAVS.TransactOpts, operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.RemoveFromAllowlist(&_OmniAVS.TransactOpts, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniAVS.Contract.RenounceOwnership(&_OmniAVS.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniAVS.Contract.RenounceOwnership(&_OmniAVS.TransactOpts)
}

// SetEthStakeInbox is a paid mutator transaction binding the contract method 0xd17efb36.
//
// Solidity: function setEthStakeInbox(address inbox) returns()
func (_OmniAVS *OmniAVSTransactor) SetEthStakeInbox(opts *bind.TransactOpts, inbox common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setEthStakeInbox", inbox)
}

// SetEthStakeInbox is a paid mutator transaction binding the contract method 0xd17efb36.
//
// Solidity: function setEthStakeInbox(address inbox) returns()
func (_OmniAVS *OmniAVSSession) SetEthStakeInbox(inbox common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetEthStakeInbox(&_OmniAVS.TransactOpts, inbox)
}

// SetEthStakeInbox is a paid mutator transaction binding the contract method 0xd17efb36.
//
// Solidity: function setEthStakeInbox(address inbox) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetEthStakeInbox(inbox common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetEthStakeInbox(&_OmniAVS.TransactOpts, inbox)
}

// SetMaxOperatorCount is a paid mutator transaction binding the contract method 0xf36b8d36.
//
// Solidity: function setMaxOperatorCount(uint32 count) returns()
func (_OmniAVS *OmniAVSTransactor) SetMaxOperatorCount(opts *bind.TransactOpts, count uint32) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setMaxOperatorCount", count)
}

// SetMaxOperatorCount is a paid mutator transaction binding the contract method 0xf36b8d36.
//
// Solidity: function setMaxOperatorCount(uint32 count) returns()
func (_OmniAVS *OmniAVSSession) SetMaxOperatorCount(count uint32) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMaxOperatorCount(&_OmniAVS.TransactOpts, count)
}

// SetMaxOperatorCount is a paid mutator transaction binding the contract method 0xf36b8d36.
//
// Solidity: function setMaxOperatorCount(uint32 count) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetMaxOperatorCount(count uint32) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMaxOperatorCount(&_OmniAVS.TransactOpts, count)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSTransactor) SetMetadataURI(opts *bind.TransactOpts, metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setMetadataURI", metadataURI)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSSession) SetMetadataURI(metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMetadataURI(&_OmniAVS.TransactOpts, metadataURI)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetMetadataURI(metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMetadataURI(&_OmniAVS.TransactOpts, metadataURI)
}

// SetMinOperatorStake is a paid mutator transaction binding the contract method 0xeb316235.
//
// Solidity: function setMinOperatorStake(uint96 stake) returns()
func (_OmniAVS *OmniAVSTransactor) SetMinOperatorStake(opts *bind.TransactOpts, stake *big.Int) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setMinOperatorStake", stake)
}

// SetMinOperatorStake is a paid mutator transaction binding the contract method 0xeb316235.
//
// Solidity: function setMinOperatorStake(uint96 stake) returns()
func (_OmniAVS *OmniAVSSession) SetMinOperatorStake(stake *big.Int) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMinOperatorStake(&_OmniAVS.TransactOpts, stake)
}

// SetMinOperatorStake is a paid mutator transaction binding the contract method 0xeb316235.
//
// Solidity: function setMinOperatorStake(uint96 stake) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetMinOperatorStake(stake *big.Int) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMinOperatorStake(&_OmniAVS.TransactOpts, stake)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSTransactor) SetOmniChainId(opts *bind.TransactOpts, chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setOmniChainId", chainId)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSSession) SetOmniChainId(chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniChainId(&_OmniAVS.TransactOpts, chainId)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetOmniChainId(chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniChainId(&_OmniAVS.TransactOpts, chainId)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSTransactor) SetOmniPortal(opts *bind.TransactOpts, portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setOmniPortal", portal)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSSession) SetOmniPortal(portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniPortal(&_OmniAVS.TransactOpts, portal)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetOmniPortal(portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniPortal(&_OmniAVS.TransactOpts, portal)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSTransactor) SetStrategyParams(opts *bind.TransactOpts, params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setStrategyParams", params)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSSession) SetStrategyParams(params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetStrategyParams(&_OmniAVS.TransactOpts, params)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetStrategyParams(params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetStrategyParams(&_OmniAVS.TransactOpts, params)
}

// SetXCallGasLimits is a paid mutator transaction binding the contract method 0xeedc8a21.
//
// Solidity: function setXCallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSTransactor) SetXCallGasLimits(opts *bind.TransactOpts, base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setXCallGasLimits", base, perOperator)
}

// SetXCallGasLimits is a paid mutator transaction binding the contract method 0xeedc8a21.
//
// Solidity: function setXCallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSSession) SetXCallGasLimits(base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetXCallGasLimits(&_OmniAVS.TransactOpts, base, perOperator)
}

// SetXCallGasLimits is a paid mutator transaction binding the contract method 0xeedc8a21.
//
// Solidity: function setXCallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetXCallGasLimits(base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetXCallGasLimits(&_OmniAVS.TransactOpts, base, perOperator)
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSTransactor) SyncWithOmni(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "syncWithOmni")
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSSession) SyncWithOmni() (*types.Transaction, error) {
	return _OmniAVS.Contract.SyncWithOmni(&_OmniAVS.TransactOpts)
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSTransactorSession) SyncWithOmni() (*types.Transaction, error) {
	return _OmniAVS.Contract.SyncWithOmni(&_OmniAVS.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.TransferOwnership(&_OmniAVS.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.TransferOwnership(&_OmniAVS.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSSession) Unpause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Unpause(&_OmniAVS.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSTransactorSession) Unpause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Unpause(&_OmniAVS.TransactOpts)
}

// OmniAVSAllowlistDisabledIterator is returned from FilterAllowlistDisabled and is used to iterate over the raw logs and unpacked data for AllowlistDisabled events raised by the OmniAVS contract.
type OmniAVSAllowlistDisabledIterator struct {
	Event *OmniAVSAllowlistDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSAllowlistDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSAllowlistDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSAllowlistDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSAllowlistDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSAllowlistDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSAllowlistDisabled represents a AllowlistDisabled event raised by the OmniAVS contract.
type OmniAVSAllowlistDisabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAllowlistDisabled is a free log retrieval operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_OmniAVS *OmniAVSFilterer) FilterAllowlistDisabled(opts *bind.FilterOpts) (*OmniAVSAllowlistDisabledIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "AllowlistDisabled")
	if err != nil {
		return nil, err
	}
	return &OmniAVSAllowlistDisabledIterator{contract: _OmniAVS.contract, event: "AllowlistDisabled", logs: logs, sub: sub}, nil
}

// WatchAllowlistDisabled is a free log subscription operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_OmniAVS *OmniAVSFilterer) WatchAllowlistDisabled(opts *bind.WatchOpts, sink chan<- *OmniAVSAllowlistDisabled) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "AllowlistDisabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSAllowlistDisabled)
				if err := _OmniAVS.contract.UnpackLog(event, "AllowlistDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowlistDisabled is a log parse operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_OmniAVS *OmniAVSFilterer) ParseAllowlistDisabled(log types.Log) (*OmniAVSAllowlistDisabled, error) {
	event := new(OmniAVSAllowlistDisabled)
	if err := _OmniAVS.contract.UnpackLog(event, "AllowlistDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSAllowlistEnabledIterator is returned from FilterAllowlistEnabled and is used to iterate over the raw logs and unpacked data for AllowlistEnabled events raised by the OmniAVS contract.
type OmniAVSAllowlistEnabledIterator struct {
	Event *OmniAVSAllowlistEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSAllowlistEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSAllowlistEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSAllowlistEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSAllowlistEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSAllowlistEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSAllowlistEnabled represents a AllowlistEnabled event raised by the OmniAVS contract.
type OmniAVSAllowlistEnabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAllowlistEnabled is a free log retrieval operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_OmniAVS *OmniAVSFilterer) FilterAllowlistEnabled(opts *bind.FilterOpts) (*OmniAVSAllowlistEnabledIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "AllowlistEnabled")
	if err != nil {
		return nil, err
	}
	return &OmniAVSAllowlistEnabledIterator{contract: _OmniAVS.contract, event: "AllowlistEnabled", logs: logs, sub: sub}, nil
}

// WatchAllowlistEnabled is a free log subscription operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_OmniAVS *OmniAVSFilterer) WatchAllowlistEnabled(opts *bind.WatchOpts, sink chan<- *OmniAVSAllowlistEnabled) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "AllowlistEnabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSAllowlistEnabled)
				if err := _OmniAVS.contract.UnpackLog(event, "AllowlistEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowlistEnabled is a log parse operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_OmniAVS *OmniAVSFilterer) ParseAllowlistEnabled(log types.Log) (*OmniAVSAllowlistEnabled, error) {
	event := new(OmniAVSAllowlistEnabled)
	if err := _OmniAVS.contract.UnpackLog(event, "AllowlistEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the OmniAVS contract.
type OmniAVSInitializedIterator struct {
	Event *OmniAVSInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSInitialized represents a Initialized event raised by the OmniAVS contract.
type OmniAVSInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) FilterInitialized(opts *bind.FilterOpts) (*OmniAVSInitializedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &OmniAVSInitializedIterator{contract: _OmniAVS.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *OmniAVSInitialized) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSInitialized)
				if err := _OmniAVS.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) ParseInitialized(log types.Log) (*OmniAVSInitialized, error) {
	event := new(OmniAVSInitialized)
	if err := _OmniAVS.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the OmniAVS contract.
type OmniAVSOperatorAddedIterator struct {
	Event *OmniAVSOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorAdded represents a OperatorAdded event raised by the OmniAVS contract.
type OmniAVSOperatorAdded struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorAdded(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorAddedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorAddedIterator{contract: _OmniAVS.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorAdded, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorAdded)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorAdded(log types.Log) (*OmniAVSOperatorAdded, error) {
	event := new(OmniAVSOperatorAdded)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorAllowedIterator is returned from FilterOperatorAllowed and is used to iterate over the raw logs and unpacked data for OperatorAllowed events raised by the OmniAVS contract.
type OmniAVSOperatorAllowedIterator struct {
	Event *OmniAVSOperatorAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorAllowed represents a OperatorAllowed event raised by the OmniAVS contract.
type OmniAVSOperatorAllowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAllowed is a free log retrieval operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorAllowed(opts *bind.FilterOpts) (*OmniAVSOperatorAllowedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorAllowed")
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorAllowedIterator{contract: _OmniAVS.contract, event: "OperatorAllowed", logs: logs, sub: sub}, nil
}

// WatchOperatorAllowed is a free log subscription operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorAllowed(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorAllowed) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorAllowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorAllowed)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAllowed is a log parse operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorAllowed(log types.Log) (*OmniAVSOperatorAllowed, error) {
	event := new(OmniAVSOperatorAllowed)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorDisallowedIterator is returned from FilterOperatorDisallowed and is used to iterate over the raw logs and unpacked data for OperatorDisallowed events raised by the OmniAVS contract.
type OmniAVSOperatorDisallowedIterator struct {
	Event *OmniAVSOperatorDisallowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorDisallowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorDisallowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorDisallowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorDisallowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorDisallowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorDisallowed represents a OperatorDisallowed event raised by the OmniAVS contract.
type OmniAVSOperatorDisallowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorDisallowed is a free log retrieval operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorDisallowed(opts *bind.FilterOpts) (*OmniAVSOperatorDisallowedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorDisallowed")
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorDisallowedIterator{contract: _OmniAVS.contract, event: "OperatorDisallowed", logs: logs, sub: sub}, nil
}

// WatchOperatorDisallowed is a free log subscription operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorDisallowed(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorDisallowed) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorDisallowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorDisallowed)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDisallowed is a log parse operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorDisallowed(log types.Log) (*OmniAVSOperatorDisallowed, error) {
	event := new(OmniAVSOperatorDisallowed)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorRemovedIterator is returned from FilterOperatorRemoved and is used to iterate over the raw logs and unpacked data for OperatorRemoved events raised by the OmniAVS contract.
type OmniAVSOperatorRemovedIterator struct {
	Event *OmniAVSOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorRemoved represents a OperatorRemoved event raised by the OmniAVS contract.
type OmniAVSOperatorRemoved struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorRemoved is a free log retrieval operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorRemoved(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorRemovedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorRemovedIterator{contract: _OmniAVS.contract, event: "OperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchOperatorRemoved is a free log subscription operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorRemoved(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorRemoved, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorRemoved)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRemoved is a log parse operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorRemoved(log types.Log) (*OmniAVSOperatorRemoved, error) {
	event := new(OmniAVSOperatorRemoved)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OmniAVS contract.
type OmniAVSOwnershipTransferredIterator struct {
	Event *OmniAVSOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOwnershipTransferred represents a OwnershipTransferred event raised by the OmniAVS contract.
type OmniAVSOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OmniAVSOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOwnershipTransferredIterator{contract: _OmniAVS.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OmniAVSOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOwnershipTransferred)
				if err := _OmniAVS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) ParseOwnershipTransferred(log types.Log) (*OmniAVSOwnershipTransferred, error) {
	event := new(OmniAVSOwnershipTransferred)
	if err := _OmniAVS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the OmniAVS contract.
type OmniAVSPausedIterator struct {
	Event *OmniAVSPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSPaused represents a Paused event raised by the OmniAVS contract.
type OmniAVSPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) FilterPaused(opts *bind.FilterOpts) (*OmniAVSPausedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &OmniAVSPausedIterator{contract: _OmniAVS.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *OmniAVSPaused) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSPaused)
				if err := _OmniAVS.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) ParsePaused(log types.Log) (*OmniAVSPaused, error) {
	event := new(OmniAVSPaused)
	if err := _OmniAVS.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the OmniAVS contract.
type OmniAVSUnpausedIterator struct {
	Event *OmniAVSUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSUnpaused represents a Unpaused event raised by the OmniAVS contract.
type OmniAVSUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) FilterUnpaused(opts *bind.FilterOpts) (*OmniAVSUnpausedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &OmniAVSUnpausedIterator{contract: _OmniAVS.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *OmniAVSUnpaused) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSUnpaused)
				if err := _OmniAVS.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) ParseUnpaused(log types.Log) (*OmniAVSUnpaused, error) {
	event := new(OmniAVSUnpaused)
	if err := _OmniAVS.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
