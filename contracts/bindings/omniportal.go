// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// XTypesBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type XTypesBlockHeader struct {
	SourceChainId   uint64
	ConfLevel       uint8
	Offset          uint64
	SourceBlockHash [32]byte
}

// XTypesMsg is an auto generated low-level Go binding around an user-defined struct.
type XTypesMsg struct {
	SourceChainId uint64
	DestChainId   uint64
	ShardId       uint64
	Offset        uint64
	Sender        common.Address
	To            common.Address
	Data          []byte
	GasLimit      uint64
}

// XTypesMsgShort is an auto generated low-level Go binding around an user-defined struct.
type XTypesMsgShort struct {
	SourceChainId uint64
	Sender        common.Address
}

// XTypesSigTuple is an auto generated low-level Go binding around an user-defined struct.
type XTypesSigTuple struct {
	ValidatorAddr common.Address
	Signature     []byte
}

// XTypesSubmission is an auto generated low-level Go binding around an user-defined struct.
type XTypesSubmission struct {
	AttestationRoot [32]byte
	ValidatorSetId  uint64
	BlockHeader     XTypesBlockHeader
	Msgs            []XTypesMsg
	Proof           [][32]byte
	ProofFlags      []bool
	Signatures      []XTypesSigTuple
}

// XTypesValidator is an auto generated low-level Go binding around an user-defined struct.
type XTypesValidator struct {
	Addr  common.Address
	Power uint64
}

// OmniPortalMetaData contains all meta data concerning the OmniPortal contract.
var OmniPortalMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"XSUB_QUORUM_DENOMINATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"XSUB_QUORUM_NUMERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addValidatorSet\",\"inputs\":[{\"name\":\"valSetId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"validators\",\"type\":\"tuple[]\",\"internalType\":\"structXTypes.Validator[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"power\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"chainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"collectFees\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"feeFor\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"feeFor\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"feeOracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"inXBlockOffset\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"inXMsgOffset\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"inXStreamValidatorSetId\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initSourceChain\",\"inputs\":[{\"name\":\"srcChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"feeOracle_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"xregistry_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"omniChainId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"omniCChainID_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"xmsgDefaultGasLimit_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"xmsgMaxGasLimit_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"xmsgMinGasLimit_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"xreceiptMaxErrorBytes_\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"valSetId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"validators\",\"type\":\"tuple[]\",\"internalType\":\"structXTypes.Validator[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"power\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isSupportedChain\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isXCall\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omniCChainID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omniChainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"outXMsgOffset\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setFeeOracle\",\"inputs\":[{\"name\":\"feeOracle_\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXMsgDefaultGasLimit\",\"inputs\":[{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXMsgMaxGasLimit\",\"inputs\":[{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXMsgMinGasLimit\",\"inputs\":[{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXReceiptMaxErrorBytes\",\"inputs\":[{\"name\":\"maxErrorBytes\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXRegistry\",\"inputs\":[{\"name\":\"xregistry_\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"validatorSet\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validatorSetTotalPower\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xcall\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"xcall\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"xcall\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"conf\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"xcall\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"conf\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"xmsg\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structXTypes.MsgShort\",\"components\":[{\"name\":\"sourceChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xmsgDefaultGasLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xmsgMaxGasLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xmsgMinGasLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xreceiptMaxErrorBytes\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xregistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xsubmit\",\"inputs\":[{\"name\":\"xsub\",\"type\":\"tuple\",\"internalType\":\"structXTypes.Submission\",\"components\":[{\"name\":\"attestationRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"validatorSetId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"blockHeader\",\"type\":\"tuple\",\"internalType\":\"structXTypes.BlockHeader\",\"components\":[{\"name\":\"sourceChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"confLevel\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"offset\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"sourceBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"msgs\",\"type\":\"tuple[]\",\"internalType\":\"structXTypes.Msg[]\",\"components\":[{\"name\":\"sourceChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"destChainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"shardId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"offset\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]},{\"name\":\"proof\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"},{\"name\":\"proofFlags\",\"type\":\"bool[]\",\"internalType\":\"bool[]\"},{\"name\":\"signatures\",\"type\":\"tuple[]\",\"internalType\":\"structXTypes.SigTuple[]\",\"components\":[{\"name\":\"validatorAddr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"FeeOracleChanged\",\"inputs\":[{\"name\":\"oldOracle\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOrcale\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FeesCollected\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorSetAdded\",\"inputs\":[{\"name\":\"setId\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"XMsg\",\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"shardId\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"offset\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"gasLimit\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"fees\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"XMsgDefaultGasLimitChanged\",\"inputs\":[{\"name\":\"oldDefault\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"newDefault\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"XMsgMaxGasLimitChanged\",\"inputs\":[{\"name\":\"oldMax\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"newMax\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"XMsgMinGasLimitChanged\",\"inputs\":[{\"name\":\"oldMin\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"newMin\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"XReceipt\",\"inputs\":[{\"name\":\"sourceChainId\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"shardId\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"offset\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"gasUsed\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"success\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"},{\"name\":\"error\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"XReceiptMaxErrorBytesChanged\",\"inputs\":[{\"name\":\"oldMax\",\"type\":\"uint16\",\"indexed\":true,\"internalType\":\"uint16\"},{\"name\":\"newMax\",\"type\":\"uint16\",\"indexed\":true,\"internalType\":\"uint16\"}],\"anonymous\":false}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6140b180620000f36000396000f3fe60806040526004361061025c5760003560e01c80638456cb5911610144578063a6cfb978116100b6578063d051c97d1161007a578063d051c97d146107dc578063d34419a81461081d578063e5dfacc61461083d578063ef02238f1461085d578063f2fde38b1461087d578063f65dd27b1461089d57600080fd5b8063a6cfb9781461074d578063a8a9896214610762578063bb8590ad14610782578063c21dda4f146107a2578063cf84c818146107b557600080fd5b80638da5cb5b116101085780638da5cb5b1461067b5780638dd9523c146106995780638e9e7cbe146106b95780638f6b05ca146106d95780639a8a05921461071a578063a480ca791461072d57600080fd5b80638456cb59146105ed5780638532eb9f146106025780638926f54f14610622578063894040a5146106425780638994e24a1461066857600080fd5b80634115ab79116101dd5780635c975abb116101a15780635c975abb1461054657806370e8b56a1461055e578063715018a614610571578063738b07a61461058657806378fe5307146105a657806382b0084c146105cd57600080fd5b80634115ab791461047a5780634f93e91f146104a8578063500b19e7146104cf57806350e646dd1461050757806355e2448e1461051a57600080fd5b806336d853f91161022457806336d853f9146103a15780633aa87330146103c35780633f4ba83a146104045780633fd3b15e14610419578063404792ce1461045a57600080fd5b8063047c576414610261578063110ff5f1146102a5578063182f9946146102c55780631da9ed61146103065780632f32700e1461033c575b600080fd5b34801561026d57600080fd5b5060ca5461028890600160401b90046001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b3480156102b157600080fd5b5060ca54610288906001600160401b031681565b3480156102d157600080fd5b506102886102e036600461347b565b60d06020908152600092835260408084209091529082529020546001600160401b031681565b34801561031257600080fd5b506102886103213660046134ae565b60d1602052600090815260409020546001600160401b031681565b34801561034857600080fd5b5060408051808201825260008082526020918201528151808301835260d3546001600160401b0381168083526001600160a01b03600160401b90920482169284019283528451908152915116918101919091520161029c565b3480156103ad57600080fd5b506103c16103bc3660046134ae565b6108cb565b005b3480156103cf57600080fd5b506102886103de36600461347b565b60cd6020908152600092835260408084209091529082529020546001600160401b031681565b34801561041057600080fd5b506103c16108df565b34801561042557600080fd5b5061028861043436600461347b565b60cf6020908152600092835260408084209091529082529020546001600160401b031681565b34801561046657600080fd5b506103c16104753660046134ae565b6108f1565b34801561048657600080fd5b5061049a61049536600461350a565b6109b7565b60405190815260200161029c565b3480156104b457600080fd5b506104bd600381565b60405160ff909116815260200161029c565b3480156104db57600080fd5b5060cb546104ef906001600160a01b031681565b6040516001600160a01b03909116815260200161029c565b6103c1610515366004613573565b610a4b565b34801561052657600080fd5b5060d3546001600160401b031615155b604051901515815260200161029c565b34801561055257600080fd5b5060655460ff16610536565b6103c161056c3660046135d3565b610a7e565b34801561057d57600080fd5b506103c1610a9d565b34801561059257600080fd5b5060cc546104ef906001600160a01b031681565b3480156105b257600080fd5b5060c95461028890600160901b90046001600160401b031681565b3480156105d957600080fd5b506103c16105e8366004613648565b610aaf565b3480156105f957600080fd5b506103c1611134565b34801561060e57600080fd5b506103c161061d3660046137a2565b611144565b34801561062e57600080fd5b5061053661063d3660046134ae565b611260565b34801561064e57600080fd5b5060c954610288906201000090046001600160401b031681565b6103c1610676366004613800565b61132c565b34801561068757600080fd5b506033546001600160a01b03166104ef565b3480156106a557600080fd5b5061049a6106b4366004613875565b611358565b3480156106c557600080fd5b506103c16106d43660046138eb565b6113d9565b3480156106e557600080fd5b506102886106f43660046139d1565b60d26020908152600092835260408084209091529082529020546001600160401b031681565b34801561072657600080fd5b5046610288565b34801561073957600080fd5b506103c16107483660046139fb565b6115f1565b34801561075957600080fd5b506104bd600281565b34801561076e57600080fd5b506103c161077d3660046139fb565b611679565b34801561078e57600080fd5b506103c161079d3660046134ae565b61168a565b6103c16107b0366004613a16565b61169b565b3480156107c157600080fd5b5060c95461028890600160501b90046001600160401b031681565b3480156107e857600080fd5b506102886107f736600461347b565b60ce6020908152600092835260408084209091529082529020546001600160401b031681565b34801561082957600080fd5b506103c16108383660046134ae565b6116ba565b34801561084957600080fd5b506103c16108583660046139fb565b6116cb565b34801561086957600080fd5b506103c1610878366004613a9a565b6116dc565b34801561088957600080fd5b506103c16108983660046139fb565b6116ed565b3480156108a957600080fd5b5060c9546108b89061ffff1681565b60405161ffff909116815260200161029c565b6108d3611763565b6108dc816117bd565b50565b6108e7611763565b6108ef611875565b565b60cc546001600160a01b031633146109505760405162461bcd60e51b815260206004820152601a60248201527f4f6d6e69506f7274616c3a206f6e6c792078726567697374727900000000000060448201526064015b60405180910390fd5b60ca546001600160401b03908116600090815260d060208181526040808420600480865290835281852054968616855292825280842092845291905280822080549490931667ffffffffffffffff1994851681179093556001825290208054909216179055565b60cb5460c954604051632376548f60e21b81526000926001600160a01b031691638dd9523c91610a0091889188918891620100009091046001600160401b031690600401613ade565b602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190613b16565b90505b9392505050565b610a536118c7565b610a788460043386868660c960029054906101000a90046001600160401b031661190d565b50505050565b610a866118c7565b610a96856004338787878761190d565b5050505050565b610aa5611763565b6108ef6000611cc5565b610ab76118c7565b610abf611d17565b366000610acf60c0840184613b2f565b90925090506040830181610b1c5760405162461bcd60e51b81526020600482015260146024820152734f6d6e69506f7274616c3a206e6f20786d73677360601b6044820152606401610947565b6000610b2e60408601602087016134ae565b6001600160401b03808216600090815260d1602052604090205491925016610b985760405162461bcd60e51b815260206004820152601b60248201527f4f6d6e69506f7274616c3a20756e6b6e6f776e2076616c2073657400000000006044820152606401610947565b600060d081610baa60208601866134ae565b6001600160401b03166001600160401b031681526020019081526020016000206000846020016020810190610bdf9190613b78565b60ff1681526020810191909152604001600020546001600160401b0316905080610c445760405162461bcd60e51b815260206004820152601660248201527513db5b9a541bdc9d185b0e881b9bc81d985b081cd95d60521b6044820152606401610947565b806001600160401b0316826001600160401b03161015610ca65760405162461bcd60e51b815260206004820152601760248201527f4f6d6e69506f7274616c3a206f6c642076616c207365740000000000000000006044820152606401610947565b610cea8635610cb9610120890189613b2f565b6001600160401b03808716600090815260d26020908152604080832060d19092529091205490911660026003611d70565b610d2e5760405162461bcd60e51b81526020600482015260156024820152744f6d6e69506f7274616c3a206e6f2071756f72756d60581b6044820152606401610947565b610d64863560408801610d4460c08a018a613b2f565b610d5160e08c018c613b2f565b610d5f6101008e018e613b2f565b611f92565b610db05760405162461bcd60e51b815260206004820152601960248201527f4f6d6e69506f7274616c3a20696e76616c69642070726f6f66000000000000006044820152606401610947565b6000610dc260a08801608089016134ae565b9050600060cf81610dd660208801886134ae565b6001600160401b03166001600160401b031681526020019081526020016000206000866020016020810190610e0b9190613b78565b60ff1681526020810191909152604001600020546001600160401b0390811691508216811015610eaf578160cf6000610e4760208901896134ae565b6001600160401b03166001600160401b031681526020019081526020016000206000876020016020810190610e7c9190613b78565b60ff1681526020810191909152604001600020805467ffffffffffffffff19166001600160401b03929092169190911790555b826001600160401b0316846001600160401b03161115610f43578360d06000610edb60208901896134ae565b6001600160401b03166001600160401b031681526020019081526020016000206000876020016020810190610f109190613b78565b60ff1681526020810191909152604001600020805467ffffffffffffffff19166001600160401b03929092169190911790555b3660005b8781101561112157610f5c60c08b018b613b2f565b82818110610f6c57610f6c613b93565b9050602002810190610f7e9190613ba9565b9150610f9060608b0160408c016134ae565b6001600160401b0316610fa660208401846134ae565b6001600160401b031614610ffc5760405162461bcd60e51b815260206004820152601f60248201527f4f6d6e69506f7274616c3a2077726f6e6720736f75726365436861696e4964006044820152606401610947565b600461100e60608401604085016134ae565b60ff16036110805761102660808b0160608c01613b78565b60ff16600460ff161461107b5760405162461bcd60e51b815260206004820152601c60248201527f4f6d6e69506f7274616c3a2077726f6e6720636f6e66206c6576656c000000006044820152606401610947565b611110565b61109060608301604084016134ae565b60ff166110a360808c0160608d01613b78565b60ff1614806110c4575060046110bf60808c0160608d01613b78565b60ff16145b6111105760405162461bcd60e51b815260206004820152601c60248201527f4f6d6e69506f7274616c3a2077726f6e6720636f6e66206c6576656c000000006044820152606401610947565b6111198261201c565b600101610f47565b5050505050505050506108dc6001609755565b61113c611763565b6108ef6124f5565b33301461118b5760405162461bcd60e51b815260206004820152601560248201527427b6b734a837b93a30b61d1037b7363c9039b2b63360591b6044820152606401610947565b60ca5460d3546001600160401b03908116600160401b90920416146111f25760405162461bcd60e51b815260206004820152601760248201527f4f6d6e69506f7274616c3a206f6e6c792063636861696e0000000000000000006044820152606401610947565b60d354600160401b90046001600160a01b0316156112525760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e69506f7274616c3a206f6e6c792063636861696e2073656e64657200006044820152606401610947565b61125c8282612532565b5050565b6000466001600160401b0316826001600160401b031614158015611326575060cc54604080518082018252600a81526913db5b9a541bdc9d185b60b21b6020820152905163fd0b64f760e01b81526001600160a01b039092169163fd0b64f7916112e59186919073121e24000000000000000000000000000000000290600401613c0f565b602060405180830381865afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190613c49565b92915050565b6113346118c7565b610a9685853386868660c960029054906101000a90046001600160401b031661190d565b60cb54604051632376548f60e21b81526000916001600160a01b031690638dd9523c9061138f908890889088908890600401613ade565b602060405180830381865afa1580156113ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d09190613b16565b95945050505050565b600054610100900460ff16158080156113f95750600054600160ff909116105b806114135750303b158015611413575060005460ff166001145b6114765760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610947565b6000805460ff191660011790558015611499576000805461ff0019166101001790555b6114a28c611cc5565b6114ab8b6127af565b6114b48a612857565b6114bd876128cf565b6114c6866117bd565b6114cf85612985565b6114d884612a3d565b6114e28383612532565b60ca80546001600160401b038a8116600160401b81026fffffffffffffffffffffffffffffffff19909316828e1690811793909317909355600083815260ce6020908152604080832060048085529083528184208054958b1667ffffffffffffffff19968716811790915587855260cf84528285208286528452828520805487168217905595845260d08084528285208286528452828520805487168817905596845295825280832095835294905292909220805490921617905580156115e3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b6115f9611763565b60405147906001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611631573d6000803e3d6000fd5b50816001600160a01b03167f9dc46f23cfb5ddcad0ae7ea2be38d47fec07bb9382ec7e564efc69e036dd66ce8260405161166d91815260200190565b60405180910390a25050565b611681611763565b6108dc816127af565b611692611763565b6108dc81612985565b6116a36118c7565b6116b28686338787878761190d565b505050505050565b6116c2611763565b6108dc816128cf565b6116d3611763565b6108dc81612857565b6116e4611763565b6108dc81612a3d565b6116f5611763565b6001600160a01b03811661175a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610947565b6108dc81611cc5565b6033546001600160a01b031633146108ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610947565b6000816001600160401b0316116118165760405162461bcd60e51b815260206004820152601b60248201527f4f6d6e69506f7274616c3a206e6f207a65726f206d61782067617300000000006044820152606401610947565b60c980546001600160401b03838116600160501b81810267ffffffffffffffff60501b1985161790945560405193909204169182907f251f3ae1733d684e5cac178693d5377ceed13586692070e29ba70b0aa1f3fc2a90600090a35050565b61187d612ad9565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff16156108ef5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610947565b60ff861660041480611922575060ff86166001145b61196e5760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e69506f7274616c3a20696e76616c696420636f6e66206c6576656c00006044820152606401610947565b466001600160401b0316876001600160401b0316036119cf5760405162461bcd60e51b815260206004820152601f60248201527f4f6d6e69506f7274616c3a206e6f2073616d652d636861696e207863616c6c006044820152606401610947565b6001600160401b038716611a255760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e69506f7274616c3a206e6f2062726f616463617374207863616c6c00006044820152606401610947565b611a2e87611260565b611a7a5760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e69506f7274616c3a20756e737570706f7274656420636861696e0000006044820152606401610947565b6001600160a01b038416611ad05760405162461bcd60e51b815260206004820152601b60248201527f4f6d6e69506f7274616c3a206e6f20706f7274616c207863616c6c00000000006044820152606401610947565b60c9546001600160401b03600160501b90910481169082161115611b365760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e69506f7274616c3a206761734c696d697420746f6f20686967680000006044820152606401610947565b60c9546001600160401b03600160901b90910481169082161015611b9c5760405162461bcd60e51b815260206004820152601c60248201527f4f6d6e69506f7274616c3a206761734c696d697420746f6f206c6f77000000006044820152606401610947565b611ba887848484611358565b341015611bf75760405162461bcd60e51b815260206004820152601c60248201527f4f6d6e69506f7274616c3a20696e73756666696369656e7420666565000000006044820152606401610947565b6001600160401b03808816600090815260cd6020908152604080832060ff8b1680855292528220805491936001939192611c3391859116613c81565b82546101009290920a6001600160401b03818102199093169183160217909155898116600081815260cd602090815260408083208786168085529252918290205491519190931693507fb7c8eb9d7a7fbcdab809ab7b8a7c41701eb3115e3fe99d30ff490d8552f72bfa90611cb3908b908b908b908b908b903490613ca8565b60405180910390a45050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260975403611d695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610947565b6002609755565b6000803660005b88811015611f7f57898982818110611d9157611d91613b93565b9050602002810190611da39190613cf3565b91508015611ec55760008a8a611dba600185613d09565b818110611dc957611dc9613b93565b9050602002810190611ddb9190613cf3565b611de490613d1c565b80519091506001600160a01b0316611dff60208501856139fb565b6001600160a01b031603611e555760405162461bcd60e51b815260206004820152601b60248201527f51756f72756d3a206475706c69636174652076616c696461746f7200000000006044820152606401610947565b80516001600160a01b0316611e6d60208501856139fb565b6001600160a01b031611611ec35760405162461bcd60e51b815260206004820152601760248201527f51756f72756d3a2073696773206e6f7420736f727465640000000000000000006044820152606401610947565b505b611ecf828c612b22565b611f1b5760405162461bcd60e51b815260206004820152601960248201527f51756f72756d3a20696e76616c6964207369676e6174757265000000000000006044820152606401610947565b876000611f2b60208501856139fb565b6001600160a01b03168152602081019190915260400160002054611f58906001600160401b031684613c81565b9250611f6683888888612b96565b15611f775760019350505050611f87565b600101611d77565b506000925050505b979650505050505050565b600061200f858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152508e925061200a91508d90508c8c612bd3565b612ce6565b9998505050505050505050565b466001600160401b031661203660408301602084016134ae565b6001600160401b031614806120635750600061205860408301602084016134ae565b6001600160401b0316145b6120af5760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e69506f7274616c3a2077726f6e672064657374436861696e49640000006044820152606401610947565b60ce60006120c060208401846134ae565b6001600160401b03166001600160401b0316815260200190815260200160002060008260400160208101906120f591906134ae565b6001600160401b03908116825260208201929092526040016000205461211d91166001613c81565b6001600160401b031661213660808301606084016134ae565b6001600160401b03161461218c5760405162461bcd60e51b815260206004820152601860248201527f4f6d6e69506f7274616c3a2077726f6e67206f666673657400000000000000006044820152606401610947565b600160ce600061219f60208501856134ae565b6001600160401b03166001600160401b0316815260200190815260200160002060008360400160208101906121d491906134ae565b6001600160401b039081168252602082019290925260400160009081208054909261220191859116613c81565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550306001600160a01b03168160a001602081019061224291906139fb565b6001600160a01b0316036123415761226060808201606083016134ae565b6001600160401b031661227960608301604084016134ae565b6001600160401b031661228f60208401846134ae565b6001600160401b03167f8277cab1f0fa69b34674f64a7d43f242b0bacece6f5b7e8652f1e0d88a9b873b60003360006040516024016122ff906020808252601e908201527f4f6d6e69506f7274616c3a206e6f207863616c6c20746f20706f7274616c0000604082015260600190565b60408051601f198184030181529181526020820180516001600160e01b031662461bcd60e51b179052516123369493929190613dc7565b60405180910390a450565b604080518082019091528061235960208401846134ae565b6001600160401b0316815260200161237760a08401608085016139fb565b6001600160a01b03908116909152815160d38054602090940151909216600160401b026001600160e01b03199093166001600160401b03909116179190911790556000806123cb60c0840160a085016139fb565b6001600160a01b031614905060008060008361241c576124176123f460c0870160a088016139fb565b612405610100880160e089016134ae565b61241260c0890189613e03565b612cfe565b612431565b61243161242c60c0870187613e03565b612dd0565b60d380546001600160e01b0319169055919450925090506000836124555782612466565b604051806020016040528060008152505b905061247860808701606088016134ae565b6001600160401b031661249160608801604089016134ae565b6001600160401b03166124a760208901896134ae565b6001600160401b03167f8277cab1f0fa69b34674f64a7d43f242b0bacece6f5b7e8652f1e0d88a9b873b853389876040516124e59493929190613dc7565b60405180910390a4505050505050565b6124fd6118c7565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118aa3390565b8051806125815760405162461bcd60e51b815260206004820152601960248201527f4f6d6e69506f7274616c3a206e6f2076616c696461746f7273000000000000006044820152606401610947565b604080518082018252600080825260208083018290526001600160401b038716825260d29052918220825b8481101561274e578581815181106125c6576125c6613b93565b602090810291909101015180519093506001600160a01b031661262b5760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e69506f7274616c3a206e6f207a65726f2076616c696461746f720000006044820152606401610947565b600083602001516001600160401b0316116126885760405162461bcd60e51b815260206004820152601960248201527f4f6d6e69506f7274616c3a206e6f207a65726f20706f776572000000000000006044820152606401610947565b82516001600160a01b03166000908152602083905260409020546001600160401b0316156126f85760405162461bcd60e51b815260206004820152601f60248201527f4f6d6e69506f7274616c3a206475706c69636174652076616c696461746f72006044820152606401610947565b60208301516127079085613c81565b60208481015185516001600160a01b03166000908152918590526040909120805467ffffffffffffffff19166001600160401b0390921691909117905593506001016125ac565b506001600160401b03868116600081815260d16020526040808220805467ffffffffffffffff191694881694909417909355915190917f3a7c2f997a87ba92aedaecd1127f4129cae1283e2809ebf5304d321b943fd10791a2505050505050565b6001600160a01b0381166128055760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e69506f7274616c3a206e6f207a65726f206665654f7261636c650000006044820152606401610947565b60cb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f2819896846ed9ab612eb19218fd845f8328f084c8706b9ec2c47eabd479037a290600090a35050565b6001600160a01b0381166128ad5760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e69506f7274616c3a206e6f207a65726f207872656769737472790000006044820152606401610947565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160401b0316116129285760405162461bcd60e51b815260206004820152601f60248201527f4f6d6e69506f7274616c3a206e6f207a65726f2064656661756c7420676173006044820152606401610947565b60c980546001600160401b038381166201000081810269ffffffffffffffff00001985161790945560405193909204169182907f479467d7183aeaacc2c95e61181bab2a6c3ae8bbc3af3f5746fb8742b559f6f090600090a35050565b6000816001600160401b0316116129de5760405162461bcd60e51b815260206004820152601b60248201527f4f6d6e69506f7274616c3a206e6f207a65726f206d696e2067617300000000006044820152606401610947565b60c980546001600160401b03838116600160901b81810267ffffffffffffffff60901b1985161790945560405193909204169182907f7f60dee945e48cd3b3dc543aa68ce448509f2d31dd910ae06a2dbddf939ed80e90600090a35050565b60008161ffff1611612a915760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e69506f7274616c3a206e6f207a65726f206d61782062797465730000006044820152606401610947565b60c9805461ffff83811661ffff19831681179093556040519116919082907f6cbf88f9d82c3743ec3192f1ab1fbae71ef9535bf1d8b8e8d7e655dc68fb911990600090a35050565b60655460ff166108ef5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610947565b6000612b3160208401846139fb565b6001600160a01b0316612b8583612b4b6020870187613e03565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e6692505050565b6001600160a01b0316149392505050565b60008160ff168360ff1685612bab9190613e49565b612bb59190613e74565b6001600160401b0316856001600160401b0316119050949350505050565b60606000612be2836001613ea8565b6001600160401b03811115612bf957612bf9613683565b604051908082528060200260200182016040528015612c22578160200160208202803683370190505b509050612c4d85604051602001612c399190613ebb565b604051602081830303815290604052612e8a565b81600081518110612c6057612c60613b93565b60200260200101818152505060005b83811015612cdd57612cae858583818110612c8c57612c8c613b93565b9050602002810190612c9e9190613ba9565b604051602001612c399190613f51565b82612cba836001613ea8565b81518110612cca57612cca613b93565b6020908102919091010152600101612c6f565b50949350505050565b600082612cf4868685612ec3565b1495945050505050565b600060606000805a9050600080612d8b896001600160401b0316600060c960009054906101000a900461ffff168b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e6001600160a01b031661315690949392919063ffffffff16565b9150915060005a9050612d9f603f8b613e74565b6001600160401b03168111612db057fe5b8282612dbc8387613d09565b965096509650505050509450945094915050565b600060606000805a9050600080306001600160a01b03168888604051612df792919061403c565b6000604051808303816000865af19150503d8060008114612e34576040519150601f19603f3d011682016040523d82523d6000602084013e612e39565b606091505b50915091505a612e499084613d09565b925081612e5857805160208201fd5b909450925090509250925092565b6000806000612e7585856131e0565b91509150612e8281613225565b509392505050565b60008180519060200120604051602001612ea691815260200190565b604051602081830303815290604052805190602001209050919050565b8051835183516000929190806001612edb8486613ea8565b612ee59190613d09565b14612f325760405162461bcd60e51b815260206004820152601f60248201527f4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66006044820152606401610947565b6000816001600160401b03811115612f4c57612f4c613683565b604051908082528060200260200182016040528015612f75578160200160208202803683370190505b5090506000806000805b858110156130a9576000888510612fba578584612f9b8161404c565b955081518110612fad57612fad613b93565b6020026020010151612fe0565b8a85612fc58161404c565b965081518110612fd757612fd7613b93565b60200260200101515b905060008c8381518110612ff657612ff6613b93565b602002602001015161302c578d8461300d8161404c565b95508151811061301f5761301f613b93565b6020026020010151613076565b89861061305057868561303e8161404c565b96508151811061301f5761301f613b93565b8b8661305b8161404c565b97508151811061306d5761306d613b93565b60200260200101515b9050613082828261336f565b87848151811061309457613094613b93565b60209081029190910101525050600101612f7f565b50841561312a578581146130ff5760405162461bcd60e51b815260206004820152601f60248201527f4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66006044820152606401610947565b83600186038151811061311457613114613b93565b6020026020010151975050505050505050610a44565b8615613143578860008151811061311457613114613b93565b8a60008151811061311457613114613b93565b6000606060008060008661ffff166001600160401b0381111561317b5761317b613683565b6040519080825280601f01601f1916602001820160405280156131a5576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156131c6578692505b828152826000602083013e90999098509650505050505050565b60008082516041036132165760208301516040840151606085015160001a61320a8782858561339b565b9450945050505061321e565b506000905060025b9250929050565b600081600481111561323957613239614065565b036132415750565b600181600481111561325557613255614065565b036132a25760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610947565b60028160048111156132b6576132b6614065565b036133035760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610947565b600381600481111561331757613317614065565b036108dc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610947565b600081831061338b576000828152602084905260409020610a44565b5060009182526020526040902090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156133d25750600090506003613456565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613426573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661344f57600060019250925050613456565b9150600090505b94509492505050565b80356001600160401b038116811461347657600080fd5b919050565b6000806040838503121561348e57600080fd5b6134978361345f565b91506134a56020840161345f565b90509250929050565b6000602082840312156134c057600080fd5b610a448261345f565b60008083601f8401126134db57600080fd5b5081356001600160401b038111156134f257600080fd5b60208301915083602082850101111561321e57600080fd5b60008060006040848603121561351f57600080fd5b6135288461345f565b925060208401356001600160401b0381111561354357600080fd5b61354f868287016134c9565b9497909650939450505050565b80356001600160a01b038116811461347657600080fd5b6000806000806060858703121561358957600080fd5b6135928561345f565b93506135a06020860161355c565b925060408501356001600160401b038111156135bb57600080fd5b6135c7878288016134c9565b95989497509550505050565b6000806000806000608086880312156135eb57600080fd5b6135f48661345f565b94506136026020870161355c565b935060408601356001600160401b0381111561361d57600080fd5b613629888289016134c9565b909450925061363c90506060870161345f565b90509295509295909350565b60006020828403121561365a57600080fd5b81356001600160401b0381111561367057600080fd5b82016101408185031215610a4457600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156136bb576136bb613683565b60405290565b604051601f8201601f191681016001600160401b03811182821017156136e9576136e9613683565b604052919050565b600082601f83011261370257600080fd5b813560206001600160401b0382111561371d5761371d613683565b61372b818360051b016136c1565b82815260069290921b8401810191818101908684111561374a57600080fd5b8286015b8481101561379757604081890312156137675760008081fd5b61376f613699565b6137788261355c565b815261378585830161345f565b8186015283529183019160400161374e565b509695505050505050565b600080604083850312156137b557600080fd5b6137be8361345f565b915060208301356001600160401b038111156137d957600080fd5b6137e5858286016136f1565b9150509250929050565b803560ff8116811461347657600080fd5b60008060008060006080868803121561381857600080fd5b6138218661345f565b945061382f602087016137ef565b935061383d6040870161355c565b925060608601356001600160401b0381111561385857600080fd5b613864888289016134c9565b969995985093965092949392505050565b6000806000806060858703121561388b57600080fd5b6138948561345f565b935060208501356001600160401b038111156138af57600080fd5b6138bb878288016134c9565b90945092506138ce90506040860161345f565b905092959194509250565b803561ffff8116811461347657600080fd5b60008060008060008060008060008060006101608c8e03121561390d57600080fd5b6139168c61355c565b9a5061392460208d0161355c565b995061393260408d0161355c565b985061394060608d0161345f565b975061394e60808d0161345f565b965061395c60a08d0161345f565b955061396a60c08d0161345f565b945061397860e08d0161345f565b93506139876101008d016138d9565b92506139966101208d0161345f565b91506101408c01356001600160401b038111156139b257600080fd5b6139be8e828f016136f1565b9150509295989b509295989b9093969950565b600080604083850312156139e457600080fd5b6139ed8361345f565b91506134a56020840161355c565b600060208284031215613a0d57600080fd5b610a448261355c565b60008060008060008060a08789031215613a2f57600080fd5b613a388761345f565b9550613a46602088016137ef565b9450613a546040880161355c565b935060608701356001600160401b03811115613a6f57600080fd5b613a7b89828a016134c9565b9094509250613a8e90506080880161345f565b90509295509295509295565b600060208284031215613aac57600080fd5b610a44826138d9565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006001600160401b03808716835260606020840152613b02606084018688613ab5565b915080841660408401525095945050505050565b600060208284031215613b2857600080fd5b5051919050565b6000808335601e19843603018112613b4657600080fd5b8301803591506001600160401b03821115613b6057600080fd5b6020019150600581901b360382131561321e57600080fd5b600060208284031215613b8a57600080fd5b610a44826137ef565b634e487b7160e01b600052603260045260246000fd5b6000823560fe19833603018112613bbf57600080fd5b9190910192915050565b6000815180845260005b81811015613bef57602081850181015186830182015201613bd3565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160401b0384168152606060208201526000613c316060830185613bc9565b905060018060a01b0383166040830152949350505050565b600060208284031215613c5b57600080fd5b81518015158114610a4457600080fd5b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019080821115613ca157613ca1613c6b565b5092915050565b6001600160a01b0387811682528616602082015260a060408201819052600090613cd59083018688613ab5565b6001600160401b039490941660608301525060800152949350505050565b60008235603e19833603018112613bbf57600080fd5b8181038181111561132657611326613c6b565b600060408236031215613d2e57600080fd5b613d36613699565b613d3f8361355c565b81526020808401356001600160401b0380821115613d5c57600080fd5b9085019036601f830112613d6f57600080fd5b813581811115613d8157613d81613683565b613d93601f8201601f191685016136c1565b91508082523684828501011115613da957600080fd5b80848401858401376000908201840152918301919091525092915050565b8481526001600160a01b03841660208201528215156040820152608060608201819052600090613df990830184613bc9565b9695505050505050565b6000808335601e19843603018112613e1a57600080fd5b8301803591506001600160401b03821115613e3457600080fd5b60200191503681900382131561321e57600080fd5b6001600160401b03818116838216028082169190828114613e6c57613e6c613c6b565b505092915050565b60006001600160401b0380841680613e9c57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b8082018082111561132657611326613c6b565b608081016001600160401b0380613ed18561345f565b16835260ff613ee2602086016137ef565b16602084015280613ef56040860161345f565b166040840152506060830135606083015292915050565b6000808335601e19843603018112613f2357600080fd5b83016020810192503590506001600160401b03811115613f4257600080fd5b80360382131561321e57600080fd5b6020815260006001600160401b0380613f698561345f565b16602084015280613f7c6020860161345f565b16604084015250613f8f6040840161345f565b6001600160401b038116606084015250613fab6060840161345f565b6001600160401b038116608084015250613fc76080840161355c565b6001600160a01b03811660a084015250613fe360a0840161355c565b6001600160a01b03811660c08401525061400060c0840184613f0c565b6101008060e086015261401861012086018385613ab5565b925061402660e0870161345f565b6001600160401b03169401939093529392505050565b8183823760009101908152919050565b60006001820161405e5761405e613c6b565b5060010190565b634e487b7160e01b600052602160045260246000fdfea264697066735822122042a5d79394cf466f0dc13cc437b00b0bab29de46aa9948b2be05b9dc18071b9a64736f6c63430008180033",
}

// OmniPortalABI is the input ABI used to generate the binding from.
// Deprecated: Use OmniPortalMetaData.ABI instead.
var OmniPortalABI = OmniPortalMetaData.ABI

// OmniPortalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OmniPortalMetaData.Bin instead.
var OmniPortalBin = OmniPortalMetaData.Bin

// DeployOmniPortal deploys a new Ethereum contract, binding an instance of OmniPortal to it.
func DeployOmniPortal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OmniPortal, error) {
	parsed, err := OmniPortalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OmniPortalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OmniPortal{OmniPortalCaller: OmniPortalCaller{contract: contract}, OmniPortalTransactor: OmniPortalTransactor{contract: contract}, OmniPortalFilterer: OmniPortalFilterer{contract: contract}}, nil
}

// OmniPortal is an auto generated Go binding around an Ethereum contract.
type OmniPortal struct {
	OmniPortalCaller     // Read-only binding to the contract
	OmniPortalTransactor // Write-only binding to the contract
	OmniPortalFilterer   // Log filterer for contract events
}

// OmniPortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type OmniPortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniPortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OmniPortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniPortalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OmniPortalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniPortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OmniPortalSession struct {
	Contract     *OmniPortal       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OmniPortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OmniPortalCallerSession struct {
	Contract *OmniPortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// OmniPortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OmniPortalTransactorSession struct {
	Contract     *OmniPortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// OmniPortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type OmniPortalRaw struct {
	Contract *OmniPortal // Generic contract binding to access the raw methods on
}

// OmniPortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OmniPortalCallerRaw struct {
	Contract *OmniPortalCaller // Generic read-only contract binding to access the raw methods on
}

// OmniPortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OmniPortalTransactorRaw struct {
	Contract *OmniPortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOmniPortal creates a new instance of OmniPortal, bound to a specific deployed contract.
func NewOmniPortal(address common.Address, backend bind.ContractBackend) (*OmniPortal, error) {
	contract, err := bindOmniPortal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OmniPortal{OmniPortalCaller: OmniPortalCaller{contract: contract}, OmniPortalTransactor: OmniPortalTransactor{contract: contract}, OmniPortalFilterer: OmniPortalFilterer{contract: contract}}, nil
}

// NewOmniPortalCaller creates a new read-only instance of OmniPortal, bound to a specific deployed contract.
func NewOmniPortalCaller(address common.Address, caller bind.ContractCaller) (*OmniPortalCaller, error) {
	contract, err := bindOmniPortal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OmniPortalCaller{contract: contract}, nil
}

// NewOmniPortalTransactor creates a new write-only instance of OmniPortal, bound to a specific deployed contract.
func NewOmniPortalTransactor(address common.Address, transactor bind.ContractTransactor) (*OmniPortalTransactor, error) {
	contract, err := bindOmniPortal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OmniPortalTransactor{contract: contract}, nil
}

// NewOmniPortalFilterer creates a new log filterer instance of OmniPortal, bound to a specific deployed contract.
func NewOmniPortalFilterer(address common.Address, filterer bind.ContractFilterer) (*OmniPortalFilterer, error) {
	contract, err := bindOmniPortal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OmniPortalFilterer{contract: contract}, nil
}

// bindOmniPortal binds a generic wrapper to an already deployed contract.
func bindOmniPortal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OmniPortalMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniPortal *OmniPortalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniPortal.Contract.OmniPortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniPortal *OmniPortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniPortal.Contract.OmniPortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniPortal *OmniPortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniPortal.Contract.OmniPortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniPortal *OmniPortalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniPortal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniPortal *OmniPortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniPortal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniPortal *OmniPortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniPortal.Contract.contract.Transact(opts, method, params...)
}

// XSUBQUORUMDENOMINATOR is a free data retrieval call binding the contract method 0x4f93e91f.
//
// Solidity: function XSUB_QUORUM_DENOMINATOR() view returns(uint8)
func (_OmniPortal *OmniPortalCaller) XSUBQUORUMDENOMINATOR(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "XSUB_QUORUM_DENOMINATOR")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// XSUBQUORUMDENOMINATOR is a free data retrieval call binding the contract method 0x4f93e91f.
//
// Solidity: function XSUB_QUORUM_DENOMINATOR() view returns(uint8)
func (_OmniPortal *OmniPortalSession) XSUBQUORUMDENOMINATOR() (uint8, error) {
	return _OmniPortal.Contract.XSUBQUORUMDENOMINATOR(&_OmniPortal.CallOpts)
}

// XSUBQUORUMDENOMINATOR is a free data retrieval call binding the contract method 0x4f93e91f.
//
// Solidity: function XSUB_QUORUM_DENOMINATOR() view returns(uint8)
func (_OmniPortal *OmniPortalCallerSession) XSUBQUORUMDENOMINATOR() (uint8, error) {
	return _OmniPortal.Contract.XSUBQUORUMDENOMINATOR(&_OmniPortal.CallOpts)
}

// XSUBQUORUMNUMERATOR is a free data retrieval call binding the contract method 0xa6cfb978.
//
// Solidity: function XSUB_QUORUM_NUMERATOR() view returns(uint8)
func (_OmniPortal *OmniPortalCaller) XSUBQUORUMNUMERATOR(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "XSUB_QUORUM_NUMERATOR")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// XSUBQUORUMNUMERATOR is a free data retrieval call binding the contract method 0xa6cfb978.
//
// Solidity: function XSUB_QUORUM_NUMERATOR() view returns(uint8)
func (_OmniPortal *OmniPortalSession) XSUBQUORUMNUMERATOR() (uint8, error) {
	return _OmniPortal.Contract.XSUBQUORUMNUMERATOR(&_OmniPortal.CallOpts)
}

// XSUBQUORUMNUMERATOR is a free data retrieval call binding the contract method 0xa6cfb978.
//
// Solidity: function XSUB_QUORUM_NUMERATOR() view returns(uint8)
func (_OmniPortal *OmniPortalCallerSession) XSUBQUORUMNUMERATOR() (uint8, error) {
	return _OmniPortal.Contract.XSUBQUORUMNUMERATOR(&_OmniPortal.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint64)
func (_OmniPortal *OmniPortalCaller) ChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint64)
func (_OmniPortal *OmniPortalSession) ChainId() (uint64, error) {
	return _OmniPortal.Contract.ChainId(&_OmniPortal.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) ChainId() (uint64, error) {
	return _OmniPortal.Contract.ChainId(&_OmniPortal.CallOpts)
}

// FeeFor is a free data retrieval call binding the contract method 0x4115ab79.
//
// Solidity: function feeFor(uint64 destChainId, bytes data) view returns(uint256)
func (_OmniPortal *OmniPortalCaller) FeeFor(opts *bind.CallOpts, destChainId uint64, data []byte) (*big.Int, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "feeFor", destChainId, data)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeFor is a free data retrieval call binding the contract method 0x4115ab79.
//
// Solidity: function feeFor(uint64 destChainId, bytes data) view returns(uint256)
func (_OmniPortal *OmniPortalSession) FeeFor(destChainId uint64, data []byte) (*big.Int, error) {
	return _OmniPortal.Contract.FeeFor(&_OmniPortal.CallOpts, destChainId, data)
}

// FeeFor is a free data retrieval call binding the contract method 0x4115ab79.
//
// Solidity: function feeFor(uint64 destChainId, bytes data) view returns(uint256)
func (_OmniPortal *OmniPortalCallerSession) FeeFor(destChainId uint64, data []byte) (*big.Int, error) {
	return _OmniPortal.Contract.FeeFor(&_OmniPortal.CallOpts, destChainId, data)
}

// FeeFor0 is a free data retrieval call binding the contract method 0x8dd9523c.
//
// Solidity: function feeFor(uint64 destChainId, bytes data, uint64 gasLimit) view returns(uint256)
func (_OmniPortal *OmniPortalCaller) FeeFor0(opts *bind.CallOpts, destChainId uint64, data []byte, gasLimit uint64) (*big.Int, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "feeFor0", destChainId, data, gasLimit)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeFor0 is a free data retrieval call binding the contract method 0x8dd9523c.
//
// Solidity: function feeFor(uint64 destChainId, bytes data, uint64 gasLimit) view returns(uint256)
func (_OmniPortal *OmniPortalSession) FeeFor0(destChainId uint64, data []byte, gasLimit uint64) (*big.Int, error) {
	return _OmniPortal.Contract.FeeFor0(&_OmniPortal.CallOpts, destChainId, data, gasLimit)
}

// FeeFor0 is a free data retrieval call binding the contract method 0x8dd9523c.
//
// Solidity: function feeFor(uint64 destChainId, bytes data, uint64 gasLimit) view returns(uint256)
func (_OmniPortal *OmniPortalCallerSession) FeeFor0(destChainId uint64, data []byte, gasLimit uint64) (*big.Int, error) {
	return _OmniPortal.Contract.FeeFor0(&_OmniPortal.CallOpts, destChainId, data, gasLimit)
}

// FeeOracle is a free data retrieval call binding the contract method 0x500b19e7.
//
// Solidity: function feeOracle() view returns(address)
func (_OmniPortal *OmniPortalCaller) FeeOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "feeOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeOracle is a free data retrieval call binding the contract method 0x500b19e7.
//
// Solidity: function feeOracle() view returns(address)
func (_OmniPortal *OmniPortalSession) FeeOracle() (common.Address, error) {
	return _OmniPortal.Contract.FeeOracle(&_OmniPortal.CallOpts)
}

// FeeOracle is a free data retrieval call binding the contract method 0x500b19e7.
//
// Solidity: function feeOracle() view returns(address)
func (_OmniPortal *OmniPortalCallerSession) FeeOracle() (common.Address, error) {
	return _OmniPortal.Contract.FeeOracle(&_OmniPortal.CallOpts)
}

// InXBlockOffset is a free data retrieval call binding the contract method 0x3fd3b15e.
//
// Solidity: function inXBlockOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCaller) InXBlockOffset(opts *bind.CallOpts, arg0 uint64, arg1 uint64) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "inXBlockOffset", arg0, arg1)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// InXBlockOffset is a free data retrieval call binding the contract method 0x3fd3b15e.
//
// Solidity: function inXBlockOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalSession) InXBlockOffset(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.InXBlockOffset(&_OmniPortal.CallOpts, arg0, arg1)
}

// InXBlockOffset is a free data retrieval call binding the contract method 0x3fd3b15e.
//
// Solidity: function inXBlockOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) InXBlockOffset(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.InXBlockOffset(&_OmniPortal.CallOpts, arg0, arg1)
}

// InXMsgOffset is a free data retrieval call binding the contract method 0xd051c97d.
//
// Solidity: function inXMsgOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCaller) InXMsgOffset(opts *bind.CallOpts, arg0 uint64, arg1 uint64) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "inXMsgOffset", arg0, arg1)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// InXMsgOffset is a free data retrieval call binding the contract method 0xd051c97d.
//
// Solidity: function inXMsgOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalSession) InXMsgOffset(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.InXMsgOffset(&_OmniPortal.CallOpts, arg0, arg1)
}

// InXMsgOffset is a free data retrieval call binding the contract method 0xd051c97d.
//
// Solidity: function inXMsgOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) InXMsgOffset(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.InXMsgOffset(&_OmniPortal.CallOpts, arg0, arg1)
}

// InXStreamValidatorSetId is a free data retrieval call binding the contract method 0x182f9946.
//
// Solidity: function inXStreamValidatorSetId(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCaller) InXStreamValidatorSetId(opts *bind.CallOpts, arg0 uint64, arg1 uint64) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "inXStreamValidatorSetId", arg0, arg1)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// InXStreamValidatorSetId is a free data retrieval call binding the contract method 0x182f9946.
//
// Solidity: function inXStreamValidatorSetId(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalSession) InXStreamValidatorSetId(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.InXStreamValidatorSetId(&_OmniPortal.CallOpts, arg0, arg1)
}

// InXStreamValidatorSetId is a free data retrieval call binding the contract method 0x182f9946.
//
// Solidity: function inXStreamValidatorSetId(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) InXStreamValidatorSetId(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.InXStreamValidatorSetId(&_OmniPortal.CallOpts, arg0, arg1)
}

// IsSupportedChain is a free data retrieval call binding the contract method 0x8926f54f.
//
// Solidity: function isSupportedChain(uint64 destChainId) view returns(bool)
func (_OmniPortal *OmniPortalCaller) IsSupportedChain(opts *bind.CallOpts, destChainId uint64) (bool, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "isSupportedChain", destChainId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSupportedChain is a free data retrieval call binding the contract method 0x8926f54f.
//
// Solidity: function isSupportedChain(uint64 destChainId) view returns(bool)
func (_OmniPortal *OmniPortalSession) IsSupportedChain(destChainId uint64) (bool, error) {
	return _OmniPortal.Contract.IsSupportedChain(&_OmniPortal.CallOpts, destChainId)
}

// IsSupportedChain is a free data retrieval call binding the contract method 0x8926f54f.
//
// Solidity: function isSupportedChain(uint64 destChainId) view returns(bool)
func (_OmniPortal *OmniPortalCallerSession) IsSupportedChain(destChainId uint64) (bool, error) {
	return _OmniPortal.Contract.IsSupportedChain(&_OmniPortal.CallOpts, destChainId)
}

// IsXCall is a free data retrieval call binding the contract method 0x55e2448e.
//
// Solidity: function isXCall() view returns(bool)
func (_OmniPortal *OmniPortalCaller) IsXCall(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "isXCall")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsXCall is a free data retrieval call binding the contract method 0x55e2448e.
//
// Solidity: function isXCall() view returns(bool)
func (_OmniPortal *OmniPortalSession) IsXCall() (bool, error) {
	return _OmniPortal.Contract.IsXCall(&_OmniPortal.CallOpts)
}

// IsXCall is a free data retrieval call binding the contract method 0x55e2448e.
//
// Solidity: function isXCall() view returns(bool)
func (_OmniPortal *OmniPortalCallerSession) IsXCall() (bool, error) {
	return _OmniPortal.Contract.IsXCall(&_OmniPortal.CallOpts)
}

// OmniCChainID is a free data retrieval call binding the contract method 0x047c5764.
//
// Solidity: function omniCChainID() view returns(uint64)
func (_OmniPortal *OmniPortalCaller) OmniCChainID(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "omniCChainID")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OmniCChainID is a free data retrieval call binding the contract method 0x047c5764.
//
// Solidity: function omniCChainID() view returns(uint64)
func (_OmniPortal *OmniPortalSession) OmniCChainID() (uint64, error) {
	return _OmniPortal.Contract.OmniCChainID(&_OmniPortal.CallOpts)
}

// OmniCChainID is a free data retrieval call binding the contract method 0x047c5764.
//
// Solidity: function omniCChainID() view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) OmniCChainID() (uint64, error) {
	return _OmniPortal.Contract.OmniCChainID(&_OmniPortal.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniPortal *OmniPortalCaller) OmniChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "omniChainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniPortal *OmniPortalSession) OmniChainId() (uint64, error) {
	return _OmniPortal.Contract.OmniChainId(&_OmniPortal.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) OmniChainId() (uint64, error) {
	return _OmniPortal.Contract.OmniChainId(&_OmniPortal.CallOpts)
}

// OutXMsgOffset is a free data retrieval call binding the contract method 0x3aa87330.
//
// Solidity: function outXMsgOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCaller) OutXMsgOffset(opts *bind.CallOpts, arg0 uint64, arg1 uint64) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "outXMsgOffset", arg0, arg1)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OutXMsgOffset is a free data retrieval call binding the contract method 0x3aa87330.
//
// Solidity: function outXMsgOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalSession) OutXMsgOffset(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.OutXMsgOffset(&_OmniPortal.CallOpts, arg0, arg1)
}

// OutXMsgOffset is a free data retrieval call binding the contract method 0x3aa87330.
//
// Solidity: function outXMsgOffset(uint64 , uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) OutXMsgOffset(arg0 uint64, arg1 uint64) (uint64, error) {
	return _OmniPortal.Contract.OutXMsgOffset(&_OmniPortal.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniPortal *OmniPortalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniPortal *OmniPortalSession) Owner() (common.Address, error) {
	return _OmniPortal.Contract.Owner(&_OmniPortal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniPortal *OmniPortalCallerSession) Owner() (common.Address, error) {
	return _OmniPortal.Contract.Owner(&_OmniPortal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniPortal *OmniPortalCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniPortal *OmniPortalSession) Paused() (bool, error) {
	return _OmniPortal.Contract.Paused(&_OmniPortal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniPortal *OmniPortalCallerSession) Paused() (bool, error) {
	return _OmniPortal.Contract.Paused(&_OmniPortal.CallOpts)
}

// ValidatorSet is a free data retrieval call binding the contract method 0x8f6b05ca.
//
// Solidity: function validatorSet(uint64 , address ) view returns(uint64)
func (_OmniPortal *OmniPortalCaller) ValidatorSet(opts *bind.CallOpts, arg0 uint64, arg1 common.Address) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "validatorSet", arg0, arg1)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ValidatorSet is a free data retrieval call binding the contract method 0x8f6b05ca.
//
// Solidity: function validatorSet(uint64 , address ) view returns(uint64)
func (_OmniPortal *OmniPortalSession) ValidatorSet(arg0 uint64, arg1 common.Address) (uint64, error) {
	return _OmniPortal.Contract.ValidatorSet(&_OmniPortal.CallOpts, arg0, arg1)
}

// ValidatorSet is a free data retrieval call binding the contract method 0x8f6b05ca.
//
// Solidity: function validatorSet(uint64 , address ) view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) ValidatorSet(arg0 uint64, arg1 common.Address) (uint64, error) {
	return _OmniPortal.Contract.ValidatorSet(&_OmniPortal.CallOpts, arg0, arg1)
}

// ValidatorSetTotalPower is a free data retrieval call binding the contract method 0x1da9ed61.
//
// Solidity: function validatorSetTotalPower(uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCaller) ValidatorSetTotalPower(opts *bind.CallOpts, arg0 uint64) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "validatorSetTotalPower", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ValidatorSetTotalPower is a free data retrieval call binding the contract method 0x1da9ed61.
//
// Solidity: function validatorSetTotalPower(uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalSession) ValidatorSetTotalPower(arg0 uint64) (uint64, error) {
	return _OmniPortal.Contract.ValidatorSetTotalPower(&_OmniPortal.CallOpts, arg0)
}

// ValidatorSetTotalPower is a free data retrieval call binding the contract method 0x1da9ed61.
//
// Solidity: function validatorSetTotalPower(uint64 ) view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) ValidatorSetTotalPower(arg0 uint64) (uint64, error) {
	return _OmniPortal.Contract.ValidatorSetTotalPower(&_OmniPortal.CallOpts, arg0)
}

// Xmsg is a free data retrieval call binding the contract method 0x2f32700e.
//
// Solidity: function xmsg() view returns((uint64,address))
func (_OmniPortal *OmniPortalCaller) Xmsg(opts *bind.CallOpts) (XTypesMsgShort, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "xmsg")

	if err != nil {
		return *new(XTypesMsgShort), err
	}

	out0 := *abi.ConvertType(out[0], new(XTypesMsgShort)).(*XTypesMsgShort)

	return out0, err

}

// Xmsg is a free data retrieval call binding the contract method 0x2f32700e.
//
// Solidity: function xmsg() view returns((uint64,address))
func (_OmniPortal *OmniPortalSession) Xmsg() (XTypesMsgShort, error) {
	return _OmniPortal.Contract.Xmsg(&_OmniPortal.CallOpts)
}

// Xmsg is a free data retrieval call binding the contract method 0x2f32700e.
//
// Solidity: function xmsg() view returns((uint64,address))
func (_OmniPortal *OmniPortalCallerSession) Xmsg() (XTypesMsgShort, error) {
	return _OmniPortal.Contract.Xmsg(&_OmniPortal.CallOpts)
}

// XmsgDefaultGasLimit is a free data retrieval call binding the contract method 0x894040a5.
//
// Solidity: function xmsgDefaultGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalCaller) XmsgDefaultGasLimit(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "xmsgDefaultGasLimit")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XmsgDefaultGasLimit is a free data retrieval call binding the contract method 0x894040a5.
//
// Solidity: function xmsgDefaultGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalSession) XmsgDefaultGasLimit() (uint64, error) {
	return _OmniPortal.Contract.XmsgDefaultGasLimit(&_OmniPortal.CallOpts)
}

// XmsgDefaultGasLimit is a free data retrieval call binding the contract method 0x894040a5.
//
// Solidity: function xmsgDefaultGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) XmsgDefaultGasLimit() (uint64, error) {
	return _OmniPortal.Contract.XmsgDefaultGasLimit(&_OmniPortal.CallOpts)
}

// XmsgMaxGasLimit is a free data retrieval call binding the contract method 0xcf84c818.
//
// Solidity: function xmsgMaxGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalCaller) XmsgMaxGasLimit(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "xmsgMaxGasLimit")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XmsgMaxGasLimit is a free data retrieval call binding the contract method 0xcf84c818.
//
// Solidity: function xmsgMaxGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalSession) XmsgMaxGasLimit() (uint64, error) {
	return _OmniPortal.Contract.XmsgMaxGasLimit(&_OmniPortal.CallOpts)
}

// XmsgMaxGasLimit is a free data retrieval call binding the contract method 0xcf84c818.
//
// Solidity: function xmsgMaxGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) XmsgMaxGasLimit() (uint64, error) {
	return _OmniPortal.Contract.XmsgMaxGasLimit(&_OmniPortal.CallOpts)
}

// XmsgMinGasLimit is a free data retrieval call binding the contract method 0x78fe5307.
//
// Solidity: function xmsgMinGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalCaller) XmsgMinGasLimit(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "xmsgMinGasLimit")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XmsgMinGasLimit is a free data retrieval call binding the contract method 0x78fe5307.
//
// Solidity: function xmsgMinGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalSession) XmsgMinGasLimit() (uint64, error) {
	return _OmniPortal.Contract.XmsgMinGasLimit(&_OmniPortal.CallOpts)
}

// XmsgMinGasLimit is a free data retrieval call binding the contract method 0x78fe5307.
//
// Solidity: function xmsgMinGasLimit() view returns(uint64)
func (_OmniPortal *OmniPortalCallerSession) XmsgMinGasLimit() (uint64, error) {
	return _OmniPortal.Contract.XmsgMinGasLimit(&_OmniPortal.CallOpts)
}

// XreceiptMaxErrorBytes is a free data retrieval call binding the contract method 0xf65dd27b.
//
// Solidity: function xreceiptMaxErrorBytes() view returns(uint16)
func (_OmniPortal *OmniPortalCaller) XreceiptMaxErrorBytes(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "xreceiptMaxErrorBytes")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// XreceiptMaxErrorBytes is a free data retrieval call binding the contract method 0xf65dd27b.
//
// Solidity: function xreceiptMaxErrorBytes() view returns(uint16)
func (_OmniPortal *OmniPortalSession) XreceiptMaxErrorBytes() (uint16, error) {
	return _OmniPortal.Contract.XreceiptMaxErrorBytes(&_OmniPortal.CallOpts)
}

// XreceiptMaxErrorBytes is a free data retrieval call binding the contract method 0xf65dd27b.
//
// Solidity: function xreceiptMaxErrorBytes() view returns(uint16)
func (_OmniPortal *OmniPortalCallerSession) XreceiptMaxErrorBytes() (uint16, error) {
	return _OmniPortal.Contract.XreceiptMaxErrorBytes(&_OmniPortal.CallOpts)
}

// Xregistry is a free data retrieval call binding the contract method 0x738b07a6.
//
// Solidity: function xregistry() view returns(address)
func (_OmniPortal *OmniPortalCaller) Xregistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniPortal.contract.Call(opts, &out, "xregistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Xregistry is a free data retrieval call binding the contract method 0x738b07a6.
//
// Solidity: function xregistry() view returns(address)
func (_OmniPortal *OmniPortalSession) Xregistry() (common.Address, error) {
	return _OmniPortal.Contract.Xregistry(&_OmniPortal.CallOpts)
}

// Xregistry is a free data retrieval call binding the contract method 0x738b07a6.
//
// Solidity: function xregistry() view returns(address)
func (_OmniPortal *OmniPortalCallerSession) Xregistry() (common.Address, error) {
	return _OmniPortal.Contract.Xregistry(&_OmniPortal.CallOpts)
}

// AddValidatorSet is a paid mutator transaction binding the contract method 0x8532eb9f.
//
// Solidity: function addValidatorSet(uint64 valSetId, (address,uint64)[] validators) returns()
func (_OmniPortal *OmniPortalTransactor) AddValidatorSet(opts *bind.TransactOpts, valSetId uint64, validators []XTypesValidator) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "addValidatorSet", valSetId, validators)
}

// AddValidatorSet is a paid mutator transaction binding the contract method 0x8532eb9f.
//
// Solidity: function addValidatorSet(uint64 valSetId, (address,uint64)[] validators) returns()
func (_OmniPortal *OmniPortalSession) AddValidatorSet(valSetId uint64, validators []XTypesValidator) (*types.Transaction, error) {
	return _OmniPortal.Contract.AddValidatorSet(&_OmniPortal.TransactOpts, valSetId, validators)
}

// AddValidatorSet is a paid mutator transaction binding the contract method 0x8532eb9f.
//
// Solidity: function addValidatorSet(uint64 valSetId, (address,uint64)[] validators) returns()
func (_OmniPortal *OmniPortalTransactorSession) AddValidatorSet(valSetId uint64, validators []XTypesValidator) (*types.Transaction, error) {
	return _OmniPortal.Contract.AddValidatorSet(&_OmniPortal.TransactOpts, valSetId, validators)
}

// CollectFees is a paid mutator transaction binding the contract method 0xa480ca79.
//
// Solidity: function collectFees(address to) returns()
func (_OmniPortal *OmniPortalTransactor) CollectFees(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "collectFees", to)
}

// CollectFees is a paid mutator transaction binding the contract method 0xa480ca79.
//
// Solidity: function collectFees(address to) returns()
func (_OmniPortal *OmniPortalSession) CollectFees(to common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.CollectFees(&_OmniPortal.TransactOpts, to)
}

// CollectFees is a paid mutator transaction binding the contract method 0xa480ca79.
//
// Solidity: function collectFees(address to) returns()
func (_OmniPortal *OmniPortalTransactorSession) CollectFees(to common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.CollectFees(&_OmniPortal.TransactOpts, to)
}

// InitSourceChain is a paid mutator transaction binding the contract method 0x404792ce.
//
// Solidity: function initSourceChain(uint64 srcChainId) returns()
func (_OmniPortal *OmniPortalTransactor) InitSourceChain(opts *bind.TransactOpts, srcChainId uint64) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "initSourceChain", srcChainId)
}

// InitSourceChain is a paid mutator transaction binding the contract method 0x404792ce.
//
// Solidity: function initSourceChain(uint64 srcChainId) returns()
func (_OmniPortal *OmniPortalSession) InitSourceChain(srcChainId uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.InitSourceChain(&_OmniPortal.TransactOpts, srcChainId)
}

// InitSourceChain is a paid mutator transaction binding the contract method 0x404792ce.
//
// Solidity: function initSourceChain(uint64 srcChainId) returns()
func (_OmniPortal *OmniPortalTransactorSession) InitSourceChain(srcChainId uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.InitSourceChain(&_OmniPortal.TransactOpts, srcChainId)
}

// Initialize is a paid mutator transaction binding the contract method 0x8e9e7cbe.
//
// Solidity: function initialize(address owner_, address feeOracle_, address xregistry_, uint64 omniChainId_, uint64 omniCChainID_, uint64 xmsgDefaultGasLimit_, uint64 xmsgMaxGasLimit_, uint64 xmsgMinGasLimit_, uint16 xreceiptMaxErrorBytes_, uint64 valSetId, (address,uint64)[] validators) returns()
func (_OmniPortal *OmniPortalTransactor) Initialize(opts *bind.TransactOpts, owner_ common.Address, feeOracle_ common.Address, xregistry_ common.Address, omniChainId_ uint64, omniCChainID_ uint64, xmsgDefaultGasLimit_ uint64, xmsgMaxGasLimit_ uint64, xmsgMinGasLimit_ uint64, xreceiptMaxErrorBytes_ uint16, valSetId uint64, validators []XTypesValidator) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "initialize", owner_, feeOracle_, xregistry_, omniChainId_, omniCChainID_, xmsgDefaultGasLimit_, xmsgMaxGasLimit_, xmsgMinGasLimit_, xreceiptMaxErrorBytes_, valSetId, validators)
}

// Initialize is a paid mutator transaction binding the contract method 0x8e9e7cbe.
//
// Solidity: function initialize(address owner_, address feeOracle_, address xregistry_, uint64 omniChainId_, uint64 omniCChainID_, uint64 xmsgDefaultGasLimit_, uint64 xmsgMaxGasLimit_, uint64 xmsgMinGasLimit_, uint16 xreceiptMaxErrorBytes_, uint64 valSetId, (address,uint64)[] validators) returns()
func (_OmniPortal *OmniPortalSession) Initialize(owner_ common.Address, feeOracle_ common.Address, xregistry_ common.Address, omniChainId_ uint64, omniCChainID_ uint64, xmsgDefaultGasLimit_ uint64, xmsgMaxGasLimit_ uint64, xmsgMinGasLimit_ uint64, xreceiptMaxErrorBytes_ uint16, valSetId uint64, validators []XTypesValidator) (*types.Transaction, error) {
	return _OmniPortal.Contract.Initialize(&_OmniPortal.TransactOpts, owner_, feeOracle_, xregistry_, omniChainId_, omniCChainID_, xmsgDefaultGasLimit_, xmsgMaxGasLimit_, xmsgMinGasLimit_, xreceiptMaxErrorBytes_, valSetId, validators)
}

// Initialize is a paid mutator transaction binding the contract method 0x8e9e7cbe.
//
// Solidity: function initialize(address owner_, address feeOracle_, address xregistry_, uint64 omniChainId_, uint64 omniCChainID_, uint64 xmsgDefaultGasLimit_, uint64 xmsgMaxGasLimit_, uint64 xmsgMinGasLimit_, uint16 xreceiptMaxErrorBytes_, uint64 valSetId, (address,uint64)[] validators) returns()
func (_OmniPortal *OmniPortalTransactorSession) Initialize(owner_ common.Address, feeOracle_ common.Address, xregistry_ common.Address, omniChainId_ uint64, omniCChainID_ uint64, xmsgDefaultGasLimit_ uint64, xmsgMaxGasLimit_ uint64, xmsgMinGasLimit_ uint64, xreceiptMaxErrorBytes_ uint16, valSetId uint64, validators []XTypesValidator) (*types.Transaction, error) {
	return _OmniPortal.Contract.Initialize(&_OmniPortal.TransactOpts, owner_, feeOracle_, xregistry_, omniChainId_, omniCChainID_, xmsgDefaultGasLimit_, xmsgMaxGasLimit_, xmsgMinGasLimit_, xreceiptMaxErrorBytes_, valSetId, validators)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniPortal *OmniPortalTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniPortal *OmniPortalSession) Pause() (*types.Transaction, error) {
	return _OmniPortal.Contract.Pause(&_OmniPortal.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniPortal *OmniPortalTransactorSession) Pause() (*types.Transaction, error) {
	return _OmniPortal.Contract.Pause(&_OmniPortal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniPortal *OmniPortalTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniPortal *OmniPortalSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniPortal.Contract.RenounceOwnership(&_OmniPortal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniPortal *OmniPortalTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniPortal.Contract.RenounceOwnership(&_OmniPortal.TransactOpts)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address feeOracle_) returns()
func (_OmniPortal *OmniPortalTransactor) SetFeeOracle(opts *bind.TransactOpts, feeOracle_ common.Address) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "setFeeOracle", feeOracle_)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address feeOracle_) returns()
func (_OmniPortal *OmniPortalSession) SetFeeOracle(feeOracle_ common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetFeeOracle(&_OmniPortal.TransactOpts, feeOracle_)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address feeOracle_) returns()
func (_OmniPortal *OmniPortalTransactorSession) SetFeeOracle(feeOracle_ common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetFeeOracle(&_OmniPortal.TransactOpts, feeOracle_)
}

// SetXMsgDefaultGasLimit is a paid mutator transaction binding the contract method 0xd34419a8.
//
// Solidity: function setXMsgDefaultGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalTransactor) SetXMsgDefaultGasLimit(opts *bind.TransactOpts, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "setXMsgDefaultGasLimit", gasLimit)
}

// SetXMsgDefaultGasLimit is a paid mutator transaction binding the contract method 0xd34419a8.
//
// Solidity: function setXMsgDefaultGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalSession) SetXMsgDefaultGasLimit(gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXMsgDefaultGasLimit(&_OmniPortal.TransactOpts, gasLimit)
}

// SetXMsgDefaultGasLimit is a paid mutator transaction binding the contract method 0xd34419a8.
//
// Solidity: function setXMsgDefaultGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalTransactorSession) SetXMsgDefaultGasLimit(gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXMsgDefaultGasLimit(&_OmniPortal.TransactOpts, gasLimit)
}

// SetXMsgMaxGasLimit is a paid mutator transaction binding the contract method 0x36d853f9.
//
// Solidity: function setXMsgMaxGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalTransactor) SetXMsgMaxGasLimit(opts *bind.TransactOpts, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "setXMsgMaxGasLimit", gasLimit)
}

// SetXMsgMaxGasLimit is a paid mutator transaction binding the contract method 0x36d853f9.
//
// Solidity: function setXMsgMaxGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalSession) SetXMsgMaxGasLimit(gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXMsgMaxGasLimit(&_OmniPortal.TransactOpts, gasLimit)
}

// SetXMsgMaxGasLimit is a paid mutator transaction binding the contract method 0x36d853f9.
//
// Solidity: function setXMsgMaxGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalTransactorSession) SetXMsgMaxGasLimit(gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXMsgMaxGasLimit(&_OmniPortal.TransactOpts, gasLimit)
}

// SetXMsgMinGasLimit is a paid mutator transaction binding the contract method 0xbb8590ad.
//
// Solidity: function setXMsgMinGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalTransactor) SetXMsgMinGasLimit(opts *bind.TransactOpts, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "setXMsgMinGasLimit", gasLimit)
}

// SetXMsgMinGasLimit is a paid mutator transaction binding the contract method 0xbb8590ad.
//
// Solidity: function setXMsgMinGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalSession) SetXMsgMinGasLimit(gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXMsgMinGasLimit(&_OmniPortal.TransactOpts, gasLimit)
}

// SetXMsgMinGasLimit is a paid mutator transaction binding the contract method 0xbb8590ad.
//
// Solidity: function setXMsgMinGasLimit(uint64 gasLimit) returns()
func (_OmniPortal *OmniPortalTransactorSession) SetXMsgMinGasLimit(gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXMsgMinGasLimit(&_OmniPortal.TransactOpts, gasLimit)
}

// SetXReceiptMaxErrorBytes is a paid mutator transaction binding the contract method 0xef02238f.
//
// Solidity: function setXReceiptMaxErrorBytes(uint16 maxErrorBytes) returns()
func (_OmniPortal *OmniPortalTransactor) SetXReceiptMaxErrorBytes(opts *bind.TransactOpts, maxErrorBytes uint16) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "setXReceiptMaxErrorBytes", maxErrorBytes)
}

// SetXReceiptMaxErrorBytes is a paid mutator transaction binding the contract method 0xef02238f.
//
// Solidity: function setXReceiptMaxErrorBytes(uint16 maxErrorBytes) returns()
func (_OmniPortal *OmniPortalSession) SetXReceiptMaxErrorBytes(maxErrorBytes uint16) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXReceiptMaxErrorBytes(&_OmniPortal.TransactOpts, maxErrorBytes)
}

// SetXReceiptMaxErrorBytes is a paid mutator transaction binding the contract method 0xef02238f.
//
// Solidity: function setXReceiptMaxErrorBytes(uint16 maxErrorBytes) returns()
func (_OmniPortal *OmniPortalTransactorSession) SetXReceiptMaxErrorBytes(maxErrorBytes uint16) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXReceiptMaxErrorBytes(&_OmniPortal.TransactOpts, maxErrorBytes)
}

// SetXRegistry is a paid mutator transaction binding the contract method 0xe5dfacc6.
//
// Solidity: function setXRegistry(address xregistry_) returns()
func (_OmniPortal *OmniPortalTransactor) SetXRegistry(opts *bind.TransactOpts, xregistry_ common.Address) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "setXRegistry", xregistry_)
}

// SetXRegistry is a paid mutator transaction binding the contract method 0xe5dfacc6.
//
// Solidity: function setXRegistry(address xregistry_) returns()
func (_OmniPortal *OmniPortalSession) SetXRegistry(xregistry_ common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXRegistry(&_OmniPortal.TransactOpts, xregistry_)
}

// SetXRegistry is a paid mutator transaction binding the contract method 0xe5dfacc6.
//
// Solidity: function setXRegistry(address xregistry_) returns()
func (_OmniPortal *OmniPortalTransactorSession) SetXRegistry(xregistry_ common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.SetXRegistry(&_OmniPortal.TransactOpts, xregistry_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniPortal *OmniPortalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniPortal *OmniPortalSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.TransferOwnership(&_OmniPortal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniPortal *OmniPortalTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniPortal.Contract.TransferOwnership(&_OmniPortal.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniPortal *OmniPortalTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniPortal *OmniPortalSession) Unpause() (*types.Transaction, error) {
	return _OmniPortal.Contract.Unpause(&_OmniPortal.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniPortal *OmniPortalTransactorSession) Unpause() (*types.Transaction, error) {
	return _OmniPortal.Contract.Unpause(&_OmniPortal.TransactOpts)
}

// Xcall is a paid mutator transaction binding the contract method 0x50e646dd.
//
// Solidity: function xcall(uint64 destChainId, address to, bytes data) payable returns()
func (_OmniPortal *OmniPortalTransactor) Xcall(opts *bind.TransactOpts, destChainId uint64, to common.Address, data []byte) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "xcall", destChainId, to, data)
}

// Xcall is a paid mutator transaction binding the contract method 0x50e646dd.
//
// Solidity: function xcall(uint64 destChainId, address to, bytes data) payable returns()
func (_OmniPortal *OmniPortalSession) Xcall(destChainId uint64, to common.Address, data []byte) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall(&_OmniPortal.TransactOpts, destChainId, to, data)
}

// Xcall is a paid mutator transaction binding the contract method 0x50e646dd.
//
// Solidity: function xcall(uint64 destChainId, address to, bytes data) payable returns()
func (_OmniPortal *OmniPortalTransactorSession) Xcall(destChainId uint64, to common.Address, data []byte) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall(&_OmniPortal.TransactOpts, destChainId, to, data)
}

// Xcall0 is a paid mutator transaction binding the contract method 0x70e8b56a.
//
// Solidity: function xcall(uint64 destChainId, address to, bytes data, uint64 gasLimit) payable returns()
func (_OmniPortal *OmniPortalTransactor) Xcall0(opts *bind.TransactOpts, destChainId uint64, to common.Address, data []byte, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "xcall0", destChainId, to, data, gasLimit)
}

// Xcall0 is a paid mutator transaction binding the contract method 0x70e8b56a.
//
// Solidity: function xcall(uint64 destChainId, address to, bytes data, uint64 gasLimit) payable returns()
func (_OmniPortal *OmniPortalSession) Xcall0(destChainId uint64, to common.Address, data []byte, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall0(&_OmniPortal.TransactOpts, destChainId, to, data, gasLimit)
}

// Xcall0 is a paid mutator transaction binding the contract method 0x70e8b56a.
//
// Solidity: function xcall(uint64 destChainId, address to, bytes data, uint64 gasLimit) payable returns()
func (_OmniPortal *OmniPortalTransactorSession) Xcall0(destChainId uint64, to common.Address, data []byte, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall0(&_OmniPortal.TransactOpts, destChainId, to, data, gasLimit)
}

// Xcall1 is a paid mutator transaction binding the contract method 0x8994e24a.
//
// Solidity: function xcall(uint64 destChainId, uint8 conf, address to, bytes data) payable returns()
func (_OmniPortal *OmniPortalTransactor) Xcall1(opts *bind.TransactOpts, destChainId uint64, conf uint8, to common.Address, data []byte) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "xcall1", destChainId, conf, to, data)
}

// Xcall1 is a paid mutator transaction binding the contract method 0x8994e24a.
//
// Solidity: function xcall(uint64 destChainId, uint8 conf, address to, bytes data) payable returns()
func (_OmniPortal *OmniPortalSession) Xcall1(destChainId uint64, conf uint8, to common.Address, data []byte) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall1(&_OmniPortal.TransactOpts, destChainId, conf, to, data)
}

// Xcall1 is a paid mutator transaction binding the contract method 0x8994e24a.
//
// Solidity: function xcall(uint64 destChainId, uint8 conf, address to, bytes data) payable returns()
func (_OmniPortal *OmniPortalTransactorSession) Xcall1(destChainId uint64, conf uint8, to common.Address, data []byte) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall1(&_OmniPortal.TransactOpts, destChainId, conf, to, data)
}

// Xcall2 is a paid mutator transaction binding the contract method 0xc21dda4f.
//
// Solidity: function xcall(uint64 destChainId, uint8 conf, address to, bytes data, uint64 gasLimit) payable returns()
func (_OmniPortal *OmniPortalTransactor) Xcall2(opts *bind.TransactOpts, destChainId uint64, conf uint8, to common.Address, data []byte, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "xcall2", destChainId, conf, to, data, gasLimit)
}

// Xcall2 is a paid mutator transaction binding the contract method 0xc21dda4f.
//
// Solidity: function xcall(uint64 destChainId, uint8 conf, address to, bytes data, uint64 gasLimit) payable returns()
func (_OmniPortal *OmniPortalSession) Xcall2(destChainId uint64, conf uint8, to common.Address, data []byte, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall2(&_OmniPortal.TransactOpts, destChainId, conf, to, data, gasLimit)
}

// Xcall2 is a paid mutator transaction binding the contract method 0xc21dda4f.
//
// Solidity: function xcall(uint64 destChainId, uint8 conf, address to, bytes data, uint64 gasLimit) payable returns()
func (_OmniPortal *OmniPortalTransactorSession) Xcall2(destChainId uint64, conf uint8, to common.Address, data []byte, gasLimit uint64) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xcall2(&_OmniPortal.TransactOpts, destChainId, conf, to, data, gasLimit)
}

// Xsubmit is a paid mutator transaction binding the contract method 0x82b0084c.
//
// Solidity: function xsubmit((bytes32,uint64,(uint64,uint8,uint64,bytes32),(uint64,uint64,uint64,uint64,address,address,bytes,uint64)[],bytes32[],bool[],(address,bytes)[]) xsub) returns()
func (_OmniPortal *OmniPortalTransactor) Xsubmit(opts *bind.TransactOpts, xsub XTypesSubmission) (*types.Transaction, error) {
	return _OmniPortal.contract.Transact(opts, "xsubmit", xsub)
}

// Xsubmit is a paid mutator transaction binding the contract method 0x82b0084c.
//
// Solidity: function xsubmit((bytes32,uint64,(uint64,uint8,uint64,bytes32),(uint64,uint64,uint64,uint64,address,address,bytes,uint64)[],bytes32[],bool[],(address,bytes)[]) xsub) returns()
func (_OmniPortal *OmniPortalSession) Xsubmit(xsub XTypesSubmission) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xsubmit(&_OmniPortal.TransactOpts, xsub)
}

// Xsubmit is a paid mutator transaction binding the contract method 0x82b0084c.
//
// Solidity: function xsubmit((bytes32,uint64,(uint64,uint8,uint64,bytes32),(uint64,uint64,uint64,uint64,address,address,bytes,uint64)[],bytes32[],bool[],(address,bytes)[]) xsub) returns()
func (_OmniPortal *OmniPortalTransactorSession) Xsubmit(xsub XTypesSubmission) (*types.Transaction, error) {
	return _OmniPortal.Contract.Xsubmit(&_OmniPortal.TransactOpts, xsub)
}

// OmniPortalFeeOracleChangedIterator is returned from FilterFeeOracleChanged and is used to iterate over the raw logs and unpacked data for FeeOracleChanged events raised by the OmniPortal contract.
type OmniPortalFeeOracleChangedIterator struct {
	Event *OmniPortalFeeOracleChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalFeeOracleChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalFeeOracleChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalFeeOracleChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalFeeOracleChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalFeeOracleChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalFeeOracleChanged represents a FeeOracleChanged event raised by the OmniPortal contract.
type OmniPortalFeeOracleChanged struct {
	OldOracle common.Address
	NewOrcale common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterFeeOracleChanged is a free log retrieval operation binding the contract event 0x2819896846ed9ab612eb19218fd845f8328f084c8706b9ec2c47eabd479037a2.
//
// Solidity: event FeeOracleChanged(address indexed oldOracle, address indexed newOrcale)
func (_OmniPortal *OmniPortalFilterer) FilterFeeOracleChanged(opts *bind.FilterOpts, oldOracle []common.Address, newOrcale []common.Address) (*OmniPortalFeeOracleChangedIterator, error) {

	var oldOracleRule []interface{}
	for _, oldOracleItem := range oldOracle {
		oldOracleRule = append(oldOracleRule, oldOracleItem)
	}
	var newOrcaleRule []interface{}
	for _, newOrcaleItem := range newOrcale {
		newOrcaleRule = append(newOrcaleRule, newOrcaleItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "FeeOracleChanged", oldOracleRule, newOrcaleRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalFeeOracleChangedIterator{contract: _OmniPortal.contract, event: "FeeOracleChanged", logs: logs, sub: sub}, nil
}

// WatchFeeOracleChanged is a free log subscription operation binding the contract event 0x2819896846ed9ab612eb19218fd845f8328f084c8706b9ec2c47eabd479037a2.
//
// Solidity: event FeeOracleChanged(address indexed oldOracle, address indexed newOrcale)
func (_OmniPortal *OmniPortalFilterer) WatchFeeOracleChanged(opts *bind.WatchOpts, sink chan<- *OmniPortalFeeOracleChanged, oldOracle []common.Address, newOrcale []common.Address) (event.Subscription, error) {

	var oldOracleRule []interface{}
	for _, oldOracleItem := range oldOracle {
		oldOracleRule = append(oldOracleRule, oldOracleItem)
	}
	var newOrcaleRule []interface{}
	for _, newOrcaleItem := range newOrcale {
		newOrcaleRule = append(newOrcaleRule, newOrcaleItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "FeeOracleChanged", oldOracleRule, newOrcaleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalFeeOracleChanged)
				if err := _OmniPortal.contract.UnpackLog(event, "FeeOracleChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeOracleChanged is a log parse operation binding the contract event 0x2819896846ed9ab612eb19218fd845f8328f084c8706b9ec2c47eabd479037a2.
//
// Solidity: event FeeOracleChanged(address indexed oldOracle, address indexed newOrcale)
func (_OmniPortal *OmniPortalFilterer) ParseFeeOracleChanged(log types.Log) (*OmniPortalFeeOracleChanged, error) {
	event := new(OmniPortalFeeOracleChanged)
	if err := _OmniPortal.contract.UnpackLog(event, "FeeOracleChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalFeesCollectedIterator is returned from FilterFeesCollected and is used to iterate over the raw logs and unpacked data for FeesCollected events raised by the OmniPortal contract.
type OmniPortalFeesCollectedIterator struct {
	Event *OmniPortalFeesCollected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalFeesCollectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalFeesCollected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalFeesCollected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalFeesCollectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalFeesCollectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalFeesCollected represents a FeesCollected event raised by the OmniPortal contract.
type OmniPortalFeesCollected struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFeesCollected is a free log retrieval operation binding the contract event 0x9dc46f23cfb5ddcad0ae7ea2be38d47fec07bb9382ec7e564efc69e036dd66ce.
//
// Solidity: event FeesCollected(address indexed to, uint256 amount)
func (_OmniPortal *OmniPortalFilterer) FilterFeesCollected(opts *bind.FilterOpts, to []common.Address) (*OmniPortalFeesCollectedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "FeesCollected", toRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalFeesCollectedIterator{contract: _OmniPortal.contract, event: "FeesCollected", logs: logs, sub: sub}, nil
}

// WatchFeesCollected is a free log subscription operation binding the contract event 0x9dc46f23cfb5ddcad0ae7ea2be38d47fec07bb9382ec7e564efc69e036dd66ce.
//
// Solidity: event FeesCollected(address indexed to, uint256 amount)
func (_OmniPortal *OmniPortalFilterer) WatchFeesCollected(opts *bind.WatchOpts, sink chan<- *OmniPortalFeesCollected, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "FeesCollected", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalFeesCollected)
				if err := _OmniPortal.contract.UnpackLog(event, "FeesCollected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeesCollected is a log parse operation binding the contract event 0x9dc46f23cfb5ddcad0ae7ea2be38d47fec07bb9382ec7e564efc69e036dd66ce.
//
// Solidity: event FeesCollected(address indexed to, uint256 amount)
func (_OmniPortal *OmniPortalFilterer) ParseFeesCollected(log types.Log) (*OmniPortalFeesCollected, error) {
	event := new(OmniPortalFeesCollected)
	if err := _OmniPortal.contract.UnpackLog(event, "FeesCollected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the OmniPortal contract.
type OmniPortalInitializedIterator struct {
	Event *OmniPortalInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalInitialized represents a Initialized event raised by the OmniPortal contract.
type OmniPortalInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniPortal *OmniPortalFilterer) FilterInitialized(opts *bind.FilterOpts) (*OmniPortalInitializedIterator, error) {

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &OmniPortalInitializedIterator{contract: _OmniPortal.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniPortal *OmniPortalFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *OmniPortalInitialized) (event.Subscription, error) {

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalInitialized)
				if err := _OmniPortal.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniPortal *OmniPortalFilterer) ParseInitialized(log types.Log) (*OmniPortalInitialized, error) {
	event := new(OmniPortalInitialized)
	if err := _OmniPortal.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OmniPortal contract.
type OmniPortalOwnershipTransferredIterator struct {
	Event *OmniPortalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalOwnershipTransferred represents a OwnershipTransferred event raised by the OmniPortal contract.
type OmniPortalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniPortal *OmniPortalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OmniPortalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalOwnershipTransferredIterator{contract: _OmniPortal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniPortal *OmniPortalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OmniPortalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalOwnershipTransferred)
				if err := _OmniPortal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniPortal *OmniPortalFilterer) ParseOwnershipTransferred(log types.Log) (*OmniPortalOwnershipTransferred, error) {
	event := new(OmniPortalOwnershipTransferred)
	if err := _OmniPortal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the OmniPortal contract.
type OmniPortalPausedIterator struct {
	Event *OmniPortalPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalPaused represents a Paused event raised by the OmniPortal contract.
type OmniPortalPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniPortal *OmniPortalFilterer) FilterPaused(opts *bind.FilterOpts) (*OmniPortalPausedIterator, error) {

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &OmniPortalPausedIterator{contract: _OmniPortal.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniPortal *OmniPortalFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *OmniPortalPaused) (event.Subscription, error) {

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalPaused)
				if err := _OmniPortal.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniPortal *OmniPortalFilterer) ParsePaused(log types.Log) (*OmniPortalPaused, error) {
	event := new(OmniPortalPaused)
	if err := _OmniPortal.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the OmniPortal contract.
type OmniPortalUnpausedIterator struct {
	Event *OmniPortalUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalUnpaused represents a Unpaused event raised by the OmniPortal contract.
type OmniPortalUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniPortal *OmniPortalFilterer) FilterUnpaused(opts *bind.FilterOpts) (*OmniPortalUnpausedIterator, error) {

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &OmniPortalUnpausedIterator{contract: _OmniPortal.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniPortal *OmniPortalFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *OmniPortalUnpaused) (event.Subscription, error) {

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalUnpaused)
				if err := _OmniPortal.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniPortal *OmniPortalFilterer) ParseUnpaused(log types.Log) (*OmniPortalUnpaused, error) {
	event := new(OmniPortalUnpaused)
	if err := _OmniPortal.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalValidatorSetAddedIterator is returned from FilterValidatorSetAdded and is used to iterate over the raw logs and unpacked data for ValidatorSetAdded events raised by the OmniPortal contract.
type OmniPortalValidatorSetAddedIterator struct {
	Event *OmniPortalValidatorSetAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalValidatorSetAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalValidatorSetAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalValidatorSetAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalValidatorSetAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalValidatorSetAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalValidatorSetAdded represents a ValidatorSetAdded event raised by the OmniPortal contract.
type OmniPortalValidatorSetAdded struct {
	SetId uint64
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetAdded is a free log retrieval operation binding the contract event 0x3a7c2f997a87ba92aedaecd1127f4129cae1283e2809ebf5304d321b943fd107.
//
// Solidity: event ValidatorSetAdded(uint64 indexed setId)
func (_OmniPortal *OmniPortalFilterer) FilterValidatorSetAdded(opts *bind.FilterOpts, setId []uint64) (*OmniPortalValidatorSetAddedIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "ValidatorSetAdded", setIdRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalValidatorSetAddedIterator{contract: _OmniPortal.contract, event: "ValidatorSetAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorSetAdded is a free log subscription operation binding the contract event 0x3a7c2f997a87ba92aedaecd1127f4129cae1283e2809ebf5304d321b943fd107.
//
// Solidity: event ValidatorSetAdded(uint64 indexed setId)
func (_OmniPortal *OmniPortalFilterer) WatchValidatorSetAdded(opts *bind.WatchOpts, sink chan<- *OmniPortalValidatorSetAdded, setId []uint64) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "ValidatorSetAdded", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalValidatorSetAdded)
				if err := _OmniPortal.contract.UnpackLog(event, "ValidatorSetAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetAdded is a log parse operation binding the contract event 0x3a7c2f997a87ba92aedaecd1127f4129cae1283e2809ebf5304d321b943fd107.
//
// Solidity: event ValidatorSetAdded(uint64 indexed setId)
func (_OmniPortal *OmniPortalFilterer) ParseValidatorSetAdded(log types.Log) (*OmniPortalValidatorSetAdded, error) {
	event := new(OmniPortalValidatorSetAdded)
	if err := _OmniPortal.contract.UnpackLog(event, "ValidatorSetAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalXMsgIterator is returned from FilterXMsg and is used to iterate over the raw logs and unpacked data for XMsg events raised by the OmniPortal contract.
type OmniPortalXMsgIterator struct {
	Event *OmniPortalXMsg // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalXMsgIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalXMsg)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalXMsg)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalXMsgIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalXMsgIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalXMsg represents a XMsg event raised by the OmniPortal contract.
type OmniPortalXMsg struct {
	DestChainId uint64
	ShardId     uint64
	Offset      uint64
	Sender      common.Address
	To          common.Address
	Data        []byte
	GasLimit    uint64
	Fees        *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterXMsg is a free log retrieval operation binding the contract event 0xb7c8eb9d7a7fbcdab809ab7b8a7c41701eb3115e3fe99d30ff490d8552f72bfa.
//
// Solidity: event XMsg(uint64 indexed destChainId, uint64 indexed shardId, uint64 indexed offset, address sender, address to, bytes data, uint64 gasLimit, uint256 fees)
func (_OmniPortal *OmniPortalFilterer) FilterXMsg(opts *bind.FilterOpts, destChainId []uint64, shardId []uint64, offset []uint64) (*OmniPortalXMsgIterator, error) {

	var destChainIdRule []interface{}
	for _, destChainIdItem := range destChainId {
		destChainIdRule = append(destChainIdRule, destChainIdItem)
	}
	var shardIdRule []interface{}
	for _, shardIdItem := range shardId {
		shardIdRule = append(shardIdRule, shardIdItem)
	}
	var offsetRule []interface{}
	for _, offsetItem := range offset {
		offsetRule = append(offsetRule, offsetItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "XMsg", destChainIdRule, shardIdRule, offsetRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalXMsgIterator{contract: _OmniPortal.contract, event: "XMsg", logs: logs, sub: sub}, nil
}

// WatchXMsg is a free log subscription operation binding the contract event 0xb7c8eb9d7a7fbcdab809ab7b8a7c41701eb3115e3fe99d30ff490d8552f72bfa.
//
// Solidity: event XMsg(uint64 indexed destChainId, uint64 indexed shardId, uint64 indexed offset, address sender, address to, bytes data, uint64 gasLimit, uint256 fees)
func (_OmniPortal *OmniPortalFilterer) WatchXMsg(opts *bind.WatchOpts, sink chan<- *OmniPortalXMsg, destChainId []uint64, shardId []uint64, offset []uint64) (event.Subscription, error) {

	var destChainIdRule []interface{}
	for _, destChainIdItem := range destChainId {
		destChainIdRule = append(destChainIdRule, destChainIdItem)
	}
	var shardIdRule []interface{}
	for _, shardIdItem := range shardId {
		shardIdRule = append(shardIdRule, shardIdItem)
	}
	var offsetRule []interface{}
	for _, offsetItem := range offset {
		offsetRule = append(offsetRule, offsetItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "XMsg", destChainIdRule, shardIdRule, offsetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalXMsg)
				if err := _OmniPortal.contract.UnpackLog(event, "XMsg", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseXMsg is a log parse operation binding the contract event 0xb7c8eb9d7a7fbcdab809ab7b8a7c41701eb3115e3fe99d30ff490d8552f72bfa.
//
// Solidity: event XMsg(uint64 indexed destChainId, uint64 indexed shardId, uint64 indexed offset, address sender, address to, bytes data, uint64 gasLimit, uint256 fees)
func (_OmniPortal *OmniPortalFilterer) ParseXMsg(log types.Log) (*OmniPortalXMsg, error) {
	event := new(OmniPortalXMsg)
	if err := _OmniPortal.contract.UnpackLog(event, "XMsg", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalXMsgDefaultGasLimitChangedIterator is returned from FilterXMsgDefaultGasLimitChanged and is used to iterate over the raw logs and unpacked data for XMsgDefaultGasLimitChanged events raised by the OmniPortal contract.
type OmniPortalXMsgDefaultGasLimitChangedIterator struct {
	Event *OmniPortalXMsgDefaultGasLimitChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalXMsgDefaultGasLimitChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalXMsgDefaultGasLimitChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalXMsgDefaultGasLimitChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalXMsgDefaultGasLimitChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalXMsgDefaultGasLimitChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalXMsgDefaultGasLimitChanged represents a XMsgDefaultGasLimitChanged event raised by the OmniPortal contract.
type OmniPortalXMsgDefaultGasLimitChanged struct {
	OldDefault uint64
	NewDefault uint64
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterXMsgDefaultGasLimitChanged is a free log retrieval operation binding the contract event 0x479467d7183aeaacc2c95e61181bab2a6c3ae8bbc3af3f5746fb8742b559f6f0.
//
// Solidity: event XMsgDefaultGasLimitChanged(uint64 indexed oldDefault, uint64 indexed newDefault)
func (_OmniPortal *OmniPortalFilterer) FilterXMsgDefaultGasLimitChanged(opts *bind.FilterOpts, oldDefault []uint64, newDefault []uint64) (*OmniPortalXMsgDefaultGasLimitChangedIterator, error) {

	var oldDefaultRule []interface{}
	for _, oldDefaultItem := range oldDefault {
		oldDefaultRule = append(oldDefaultRule, oldDefaultItem)
	}
	var newDefaultRule []interface{}
	for _, newDefaultItem := range newDefault {
		newDefaultRule = append(newDefaultRule, newDefaultItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "XMsgDefaultGasLimitChanged", oldDefaultRule, newDefaultRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalXMsgDefaultGasLimitChangedIterator{contract: _OmniPortal.contract, event: "XMsgDefaultGasLimitChanged", logs: logs, sub: sub}, nil
}

// WatchXMsgDefaultGasLimitChanged is a free log subscription operation binding the contract event 0x479467d7183aeaacc2c95e61181bab2a6c3ae8bbc3af3f5746fb8742b559f6f0.
//
// Solidity: event XMsgDefaultGasLimitChanged(uint64 indexed oldDefault, uint64 indexed newDefault)
func (_OmniPortal *OmniPortalFilterer) WatchXMsgDefaultGasLimitChanged(opts *bind.WatchOpts, sink chan<- *OmniPortalXMsgDefaultGasLimitChanged, oldDefault []uint64, newDefault []uint64) (event.Subscription, error) {

	var oldDefaultRule []interface{}
	for _, oldDefaultItem := range oldDefault {
		oldDefaultRule = append(oldDefaultRule, oldDefaultItem)
	}
	var newDefaultRule []interface{}
	for _, newDefaultItem := range newDefault {
		newDefaultRule = append(newDefaultRule, newDefaultItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "XMsgDefaultGasLimitChanged", oldDefaultRule, newDefaultRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalXMsgDefaultGasLimitChanged)
				if err := _OmniPortal.contract.UnpackLog(event, "XMsgDefaultGasLimitChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseXMsgDefaultGasLimitChanged is a log parse operation binding the contract event 0x479467d7183aeaacc2c95e61181bab2a6c3ae8bbc3af3f5746fb8742b559f6f0.
//
// Solidity: event XMsgDefaultGasLimitChanged(uint64 indexed oldDefault, uint64 indexed newDefault)
func (_OmniPortal *OmniPortalFilterer) ParseXMsgDefaultGasLimitChanged(log types.Log) (*OmniPortalXMsgDefaultGasLimitChanged, error) {
	event := new(OmniPortalXMsgDefaultGasLimitChanged)
	if err := _OmniPortal.contract.UnpackLog(event, "XMsgDefaultGasLimitChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalXMsgMaxGasLimitChangedIterator is returned from FilterXMsgMaxGasLimitChanged and is used to iterate over the raw logs and unpacked data for XMsgMaxGasLimitChanged events raised by the OmniPortal contract.
type OmniPortalXMsgMaxGasLimitChangedIterator struct {
	Event *OmniPortalXMsgMaxGasLimitChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalXMsgMaxGasLimitChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalXMsgMaxGasLimitChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalXMsgMaxGasLimitChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalXMsgMaxGasLimitChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalXMsgMaxGasLimitChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalXMsgMaxGasLimitChanged represents a XMsgMaxGasLimitChanged event raised by the OmniPortal contract.
type OmniPortalXMsgMaxGasLimitChanged struct {
	OldMax uint64
	NewMax uint64
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterXMsgMaxGasLimitChanged is a free log retrieval operation binding the contract event 0x251f3ae1733d684e5cac178693d5377ceed13586692070e29ba70b0aa1f3fc2a.
//
// Solidity: event XMsgMaxGasLimitChanged(uint64 indexed oldMax, uint64 indexed newMax)
func (_OmniPortal *OmniPortalFilterer) FilterXMsgMaxGasLimitChanged(opts *bind.FilterOpts, oldMax []uint64, newMax []uint64) (*OmniPortalXMsgMaxGasLimitChangedIterator, error) {

	var oldMaxRule []interface{}
	for _, oldMaxItem := range oldMax {
		oldMaxRule = append(oldMaxRule, oldMaxItem)
	}
	var newMaxRule []interface{}
	for _, newMaxItem := range newMax {
		newMaxRule = append(newMaxRule, newMaxItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "XMsgMaxGasLimitChanged", oldMaxRule, newMaxRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalXMsgMaxGasLimitChangedIterator{contract: _OmniPortal.contract, event: "XMsgMaxGasLimitChanged", logs: logs, sub: sub}, nil
}

// WatchXMsgMaxGasLimitChanged is a free log subscription operation binding the contract event 0x251f3ae1733d684e5cac178693d5377ceed13586692070e29ba70b0aa1f3fc2a.
//
// Solidity: event XMsgMaxGasLimitChanged(uint64 indexed oldMax, uint64 indexed newMax)
func (_OmniPortal *OmniPortalFilterer) WatchXMsgMaxGasLimitChanged(opts *bind.WatchOpts, sink chan<- *OmniPortalXMsgMaxGasLimitChanged, oldMax []uint64, newMax []uint64) (event.Subscription, error) {

	var oldMaxRule []interface{}
	for _, oldMaxItem := range oldMax {
		oldMaxRule = append(oldMaxRule, oldMaxItem)
	}
	var newMaxRule []interface{}
	for _, newMaxItem := range newMax {
		newMaxRule = append(newMaxRule, newMaxItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "XMsgMaxGasLimitChanged", oldMaxRule, newMaxRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalXMsgMaxGasLimitChanged)
				if err := _OmniPortal.contract.UnpackLog(event, "XMsgMaxGasLimitChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseXMsgMaxGasLimitChanged is a log parse operation binding the contract event 0x251f3ae1733d684e5cac178693d5377ceed13586692070e29ba70b0aa1f3fc2a.
//
// Solidity: event XMsgMaxGasLimitChanged(uint64 indexed oldMax, uint64 indexed newMax)
func (_OmniPortal *OmniPortalFilterer) ParseXMsgMaxGasLimitChanged(log types.Log) (*OmniPortalXMsgMaxGasLimitChanged, error) {
	event := new(OmniPortalXMsgMaxGasLimitChanged)
	if err := _OmniPortal.contract.UnpackLog(event, "XMsgMaxGasLimitChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalXMsgMinGasLimitChangedIterator is returned from FilterXMsgMinGasLimitChanged and is used to iterate over the raw logs and unpacked data for XMsgMinGasLimitChanged events raised by the OmniPortal contract.
type OmniPortalXMsgMinGasLimitChangedIterator struct {
	Event *OmniPortalXMsgMinGasLimitChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalXMsgMinGasLimitChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalXMsgMinGasLimitChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalXMsgMinGasLimitChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalXMsgMinGasLimitChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalXMsgMinGasLimitChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalXMsgMinGasLimitChanged represents a XMsgMinGasLimitChanged event raised by the OmniPortal contract.
type OmniPortalXMsgMinGasLimitChanged struct {
	OldMin uint64
	NewMin uint64
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterXMsgMinGasLimitChanged is a free log retrieval operation binding the contract event 0x7f60dee945e48cd3b3dc543aa68ce448509f2d31dd910ae06a2dbddf939ed80e.
//
// Solidity: event XMsgMinGasLimitChanged(uint64 indexed oldMin, uint64 indexed newMin)
func (_OmniPortal *OmniPortalFilterer) FilterXMsgMinGasLimitChanged(opts *bind.FilterOpts, oldMin []uint64, newMin []uint64) (*OmniPortalXMsgMinGasLimitChangedIterator, error) {

	var oldMinRule []interface{}
	for _, oldMinItem := range oldMin {
		oldMinRule = append(oldMinRule, oldMinItem)
	}
	var newMinRule []interface{}
	for _, newMinItem := range newMin {
		newMinRule = append(newMinRule, newMinItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "XMsgMinGasLimitChanged", oldMinRule, newMinRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalXMsgMinGasLimitChangedIterator{contract: _OmniPortal.contract, event: "XMsgMinGasLimitChanged", logs: logs, sub: sub}, nil
}

// WatchXMsgMinGasLimitChanged is a free log subscription operation binding the contract event 0x7f60dee945e48cd3b3dc543aa68ce448509f2d31dd910ae06a2dbddf939ed80e.
//
// Solidity: event XMsgMinGasLimitChanged(uint64 indexed oldMin, uint64 indexed newMin)
func (_OmniPortal *OmniPortalFilterer) WatchXMsgMinGasLimitChanged(opts *bind.WatchOpts, sink chan<- *OmniPortalXMsgMinGasLimitChanged, oldMin []uint64, newMin []uint64) (event.Subscription, error) {

	var oldMinRule []interface{}
	for _, oldMinItem := range oldMin {
		oldMinRule = append(oldMinRule, oldMinItem)
	}
	var newMinRule []interface{}
	for _, newMinItem := range newMin {
		newMinRule = append(newMinRule, newMinItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "XMsgMinGasLimitChanged", oldMinRule, newMinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalXMsgMinGasLimitChanged)
				if err := _OmniPortal.contract.UnpackLog(event, "XMsgMinGasLimitChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseXMsgMinGasLimitChanged is a log parse operation binding the contract event 0x7f60dee945e48cd3b3dc543aa68ce448509f2d31dd910ae06a2dbddf939ed80e.
//
// Solidity: event XMsgMinGasLimitChanged(uint64 indexed oldMin, uint64 indexed newMin)
func (_OmniPortal *OmniPortalFilterer) ParseXMsgMinGasLimitChanged(log types.Log) (*OmniPortalXMsgMinGasLimitChanged, error) {
	event := new(OmniPortalXMsgMinGasLimitChanged)
	if err := _OmniPortal.contract.UnpackLog(event, "XMsgMinGasLimitChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalXReceiptIterator is returned from FilterXReceipt and is used to iterate over the raw logs and unpacked data for XReceipt events raised by the OmniPortal contract.
type OmniPortalXReceiptIterator struct {
	Event *OmniPortalXReceipt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalXReceiptIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalXReceipt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalXReceipt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalXReceiptIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalXReceiptIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalXReceipt represents a XReceipt event raised by the OmniPortal contract.
type OmniPortalXReceipt struct {
	SourceChainId uint64
	ShardId       uint64
	Offset        uint64
	GasUsed       *big.Int
	Relayer       common.Address
	Success       bool
	Error         []byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterXReceipt is a free log retrieval operation binding the contract event 0x8277cab1f0fa69b34674f64a7d43f242b0bacece6f5b7e8652f1e0d88a9b873b.
//
// Solidity: event XReceipt(uint64 indexed sourceChainId, uint64 indexed shardId, uint64 indexed offset, uint256 gasUsed, address relayer, bool success, bytes error)
func (_OmniPortal *OmniPortalFilterer) FilterXReceipt(opts *bind.FilterOpts, sourceChainId []uint64, shardId []uint64, offset []uint64) (*OmniPortalXReceiptIterator, error) {

	var sourceChainIdRule []interface{}
	for _, sourceChainIdItem := range sourceChainId {
		sourceChainIdRule = append(sourceChainIdRule, sourceChainIdItem)
	}
	var shardIdRule []interface{}
	for _, shardIdItem := range shardId {
		shardIdRule = append(shardIdRule, shardIdItem)
	}
	var offsetRule []interface{}
	for _, offsetItem := range offset {
		offsetRule = append(offsetRule, offsetItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "XReceipt", sourceChainIdRule, shardIdRule, offsetRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalXReceiptIterator{contract: _OmniPortal.contract, event: "XReceipt", logs: logs, sub: sub}, nil
}

// WatchXReceipt is a free log subscription operation binding the contract event 0x8277cab1f0fa69b34674f64a7d43f242b0bacece6f5b7e8652f1e0d88a9b873b.
//
// Solidity: event XReceipt(uint64 indexed sourceChainId, uint64 indexed shardId, uint64 indexed offset, uint256 gasUsed, address relayer, bool success, bytes error)
func (_OmniPortal *OmniPortalFilterer) WatchXReceipt(opts *bind.WatchOpts, sink chan<- *OmniPortalXReceipt, sourceChainId []uint64, shardId []uint64, offset []uint64) (event.Subscription, error) {

	var sourceChainIdRule []interface{}
	for _, sourceChainIdItem := range sourceChainId {
		sourceChainIdRule = append(sourceChainIdRule, sourceChainIdItem)
	}
	var shardIdRule []interface{}
	for _, shardIdItem := range shardId {
		shardIdRule = append(shardIdRule, shardIdItem)
	}
	var offsetRule []interface{}
	for _, offsetItem := range offset {
		offsetRule = append(offsetRule, offsetItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "XReceipt", sourceChainIdRule, shardIdRule, offsetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalXReceipt)
				if err := _OmniPortal.contract.UnpackLog(event, "XReceipt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseXReceipt is a log parse operation binding the contract event 0x8277cab1f0fa69b34674f64a7d43f242b0bacece6f5b7e8652f1e0d88a9b873b.
//
// Solidity: event XReceipt(uint64 indexed sourceChainId, uint64 indexed shardId, uint64 indexed offset, uint256 gasUsed, address relayer, bool success, bytes error)
func (_OmniPortal *OmniPortalFilterer) ParseXReceipt(log types.Log) (*OmniPortalXReceipt, error) {
	event := new(OmniPortalXReceipt)
	if err := _OmniPortal.contract.UnpackLog(event, "XReceipt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniPortalXReceiptMaxErrorBytesChangedIterator is returned from FilterXReceiptMaxErrorBytesChanged and is used to iterate over the raw logs and unpacked data for XReceiptMaxErrorBytesChanged events raised by the OmniPortal contract.
type OmniPortalXReceiptMaxErrorBytesChangedIterator struct {
	Event *OmniPortalXReceiptMaxErrorBytesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniPortalXReceiptMaxErrorBytesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniPortalXReceiptMaxErrorBytesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniPortalXReceiptMaxErrorBytesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniPortalXReceiptMaxErrorBytesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniPortalXReceiptMaxErrorBytesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniPortalXReceiptMaxErrorBytesChanged represents a XReceiptMaxErrorBytesChanged event raised by the OmniPortal contract.
type OmniPortalXReceiptMaxErrorBytesChanged struct {
	OldMax uint16
	NewMax uint16
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterXReceiptMaxErrorBytesChanged is a free log retrieval operation binding the contract event 0x6cbf88f9d82c3743ec3192f1ab1fbae71ef9535bf1d8b8e8d7e655dc68fb9119.
//
// Solidity: event XReceiptMaxErrorBytesChanged(uint16 indexed oldMax, uint16 indexed newMax)
func (_OmniPortal *OmniPortalFilterer) FilterXReceiptMaxErrorBytesChanged(opts *bind.FilterOpts, oldMax []uint16, newMax []uint16) (*OmniPortalXReceiptMaxErrorBytesChangedIterator, error) {

	var oldMaxRule []interface{}
	for _, oldMaxItem := range oldMax {
		oldMaxRule = append(oldMaxRule, oldMaxItem)
	}
	var newMaxRule []interface{}
	for _, newMaxItem := range newMax {
		newMaxRule = append(newMaxRule, newMaxItem)
	}

	logs, sub, err := _OmniPortal.contract.FilterLogs(opts, "XReceiptMaxErrorBytesChanged", oldMaxRule, newMaxRule)
	if err != nil {
		return nil, err
	}
	return &OmniPortalXReceiptMaxErrorBytesChangedIterator{contract: _OmniPortal.contract, event: "XReceiptMaxErrorBytesChanged", logs: logs, sub: sub}, nil
}

// WatchXReceiptMaxErrorBytesChanged is a free log subscription operation binding the contract event 0x6cbf88f9d82c3743ec3192f1ab1fbae71ef9535bf1d8b8e8d7e655dc68fb9119.
//
// Solidity: event XReceiptMaxErrorBytesChanged(uint16 indexed oldMax, uint16 indexed newMax)
func (_OmniPortal *OmniPortalFilterer) WatchXReceiptMaxErrorBytesChanged(opts *bind.WatchOpts, sink chan<- *OmniPortalXReceiptMaxErrorBytesChanged, oldMax []uint16, newMax []uint16) (event.Subscription, error) {

	var oldMaxRule []interface{}
	for _, oldMaxItem := range oldMax {
		oldMaxRule = append(oldMaxRule, oldMaxItem)
	}
	var newMaxRule []interface{}
	for _, newMaxItem := range newMax {
		newMaxRule = append(newMaxRule, newMaxItem)
	}

	logs, sub, err := _OmniPortal.contract.WatchLogs(opts, "XReceiptMaxErrorBytesChanged", oldMaxRule, newMaxRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniPortalXReceiptMaxErrorBytesChanged)
				if err := _OmniPortal.contract.UnpackLog(event, "XReceiptMaxErrorBytesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseXReceiptMaxErrorBytesChanged is a log parse operation binding the contract event 0x6cbf88f9d82c3743ec3192f1ab1fbae71ef9535bf1d8b8e8d7e655dc68fb9119.
//
// Solidity: event XReceiptMaxErrorBytesChanged(uint16 indexed oldMax, uint16 indexed newMax)
func (_OmniPortal *OmniPortalFilterer) ParseXReceiptMaxErrorBytesChanged(log types.Log) (*OmniPortalXReceiptMaxErrorBytesChanged, error) {
	event := new(OmniPortalXReceiptMaxErrorBytesChanged)
	if err := _OmniPortal.contract.UnpackLog(event, "XReceiptMaxErrorBytesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
