// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IOmniAVSOperator is an auto generated low-level Go binding around an user-defined struct.
type IOmniAVSOperator struct {
	Addr      common.Address
	Pubkey    []byte
	Delegated *big.Int
	Staked    *big.Int
}

// IOmniAVSStrategyParam is an auto generated low-level Go binding around an user-defined struct.
type IOmniAVSStrategyParam struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// OmniAVSMetaData contains all meta data concerning the OmniAVS contract.
var OmniAVSMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"delegationManager_\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"},{\"name\":\"avsDirectory_\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addToAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowlistEnabled\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"canRegister\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"disableAllowlist\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ejectOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"enableAllowlist\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ethStakeInbox\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"feeForSync\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"omni_\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"},{\"name\":\"omniChainId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"ethStakeInbox_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"minOperatorStake_\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"maxOperatorCount_\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"strategyParams_\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]},{\"name\":\"metadataURI_\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"allowlistEnabled_\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isInAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"maxOperatorCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minOperatorStake\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omni\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omniChainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operators\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.Operator[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"delegated\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"staked\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperator\",\"inputs\":[{\"name\":\"pubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeFromAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setEthStakeInbox\",\"inputs\":[{\"name\":\"inbox\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMaxOperatorCount\",\"inputs\":[{\"name\":\"count\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMetadataURI\",\"inputs\":[{\"name\":\"metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinOperatorStake\",\"inputs\":[{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOmniChainId\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOmniPortal\",\"inputs\":[{\"name\":\"portal\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStrategyParams\",\"inputs\":[{\"name\":\"params\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXCallGasLimits\",\"inputs\":[{\"name\":\"base\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"perOperator\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"strategyParams\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"syncWithOmni\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"xcallBaseGasLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xcallGasLimitPerOperator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AllowlistDisabled\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AllowlistEnabled\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EthStakeInboxSet\",\"inputs\":[{\"name\":\"inbox\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MaxOperatorCountSet\",\"inputs\":[{\"name\":\"maxOperatorCount\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MinOperatorStakeSet\",\"inputs\":[{\"name\":\"minOperatorStake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OmniChainIdSet\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OmniPortalSet\",\"inputs\":[{\"name\":\"portal\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAdded\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAllowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorDisallowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRemoved\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyParamsSet\",\"inputs\":[{\"name\":\"params\",\"type\":\"tuple[]\",\"indexed\":false,\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"XCallGasLimitsSet\",\"inputs\":[{\"name\":\"base\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"perValidator\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620034ba380380620034ba833981016040819052620000349162000133565b6001600160a01b03808316608052811660a0526200005162000059565b505062000172565b600054610100900460ff1615620000c65760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000118576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013057600080fd5b50565b600080604083850312156200014757600080fd5b825162000154816200011a565b602084015190925062000167816200011a565b809150509250929050565b60805160a0516132f8620001c26000396000818161043f01528181610bce01528181610e970152818161107b015261224501526000818161088b0152818161191e01526122fe01526132f86000f3fe6080604052600436106102255760003560e01c80638da5cb5b11610123578063d775cb61116100ab578063eedc8a211161006f578063eedc8a21146106ba578063f2fde38b146106da578063f36b8d36146106fa578063f57f33d01461071a578063f8e86ece1461073c57600080fd5b8063d775cb611461060b578063e481af9d14610643578063e5d98f9414610658578063e673df8a14610678578063eb3162351461069a57600080fd5b8063b98912b0116100f2578063b98912b01461056c578063c6a2aac81461058f578063c75e3aed146105a4578063cf8e629a146105d6578063d17efb36146105eb57600080fd5b80638da5cb5b146104ed5780638ef7ad5d1461050b57806394c8e4ff1461052b578063ae30f16d1461054c57600080fd5b806354c74ed3116101b1578063715018a611610175578063715018a614610463578063750521f5146104785780637719d097146104985780637815873d146104b85780638456cb59146104d857600080fd5b806354c74ed3146103b15780635c78b0e2146103d85780635c975abb146103f85780635da93d7e146104105780636b3aa72e1461043057600080fd5b806329d0fdc0116101f857806329d0fdc0146102c0578063320d46d41461030957806333cfb7b71461033757806339acf9f1146103645780633f4ba83a1461039c57600080fd5b80630c4158841461022a578063110ff5f11461024c57806313efbe9214610291578063243d51c714610299575b600080fd5b34801561023657600080fd5b5061024a610245366004612783565b61075c565b005b34801561025857600080fd5b50609b546102749064010000000090046001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b61024a610770565b3480156102a557600080fd5b50609b5461027490600160a01b90046001600160401b031681565b3480156102cc57600080fd5b506102f96102db366004612783565b6001600160a01b03166000908152609a602052604090205460ff1690565b6040519015158152602001610288565b34801561031557600080fd5b50610329610324366004612783565b610866565b6040516102889291906127ed565b34801561034357600080fd5b50610357610352366004612783565b610a8b565b6040516102889190612810565b34801561037057600080fd5b50609e54610384906001600160a01b031681565b6040516001600160a01b039091168152602001610288565b3480156103a857600080fd5b5061024a610abc565b3480156103bd57600080fd5b50609b5461027490600160601b90046001600160401b031681565b3480156103e457600080fd5b5061024a6103f3366004612874565b610ace565b34801561040457600080fd5b5060655460ff166102f9565b34801561041c57600080fd5b5061024a61042b366004612783565b610adf565b34801561043c57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610384565b34801561046f57600080fd5b5061024a610b9d565b34801561048457600080fd5b5061024a610493366004612954565b610baf565b3480156104a457600080fd5b5061024a6104b33660046129e4565b610c38565b3480156104c457600080fd5b50609d54610384906001600160a01b031681565b3480156104e457600080fd5b5061024a610f3a565b3480156104f957600080fd5b506033546001600160a01b0316610384565b34801561051757600080fd5b5061024a610526366004612b36565b610f4a565b34801561053757600080fd5b50609c546102f990600160601b900460ff1681565b34801561055857600080fd5b5061024a610567366004612c26565b611142565b34801561057857600080fd5b50610581611158565b604051908152602001610288565b34801561059b57600080fd5b5061024a61124c565b3480156105b057600080fd5b50609b546105c19063ffffffff1681565b60405163ffffffff9091168152602001610288565b3480156105e257600080fd5b5061024a61125c565b3480156105f757600080fd5b5061024a610606366004612783565b61126c565b34801561061757600080fd5b50609c5461062b906001600160601b031681565b6040516001600160601b039091168152602001610288565b34801561064f57600080fd5b5061035761127d565b34801561066457600080fd5b5061024a610673366004612783565b61128c565b34801561068457600080fd5b5061068d61129d565b6040516102889190612c67565b3480156106a657600080fd5b5061024a6106b5366004612d09565b6112a7565b3480156106c657600080fd5b5061024a6106d5366004612d26565b6112b8565b3480156106e657600080fd5b5061024a6106f5366004612783565b6112ca565b34801561070657600080fd5b5061024a610715366004612d59565b611340565b34801561072657600080fd5b5061072f611351565b6040516102889190612d74565b34801561074857600080fd5b5061024a610757366004612783565b6113cd565b6107646114d8565b61076d81611532565b50565b6107786115d2565b6000610782611618565b609e54609b54609d546040519394506001600160a01b039283169363c21dda4f93349364010000000090046001600160401b03169260049291169063ae102bc960e01b906107d4908990602401612c67565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152875161081190611821565b6040518763ffffffff1660e01b8152600401610831959493929190612dd5565b6000604051808303818588803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b505050505050565b6040516336b87bd760e11b81526001600160a01b0382811660048301526000916060917f00000000000000000000000000000000000000000000000000000000000000001690636d70f7ae90602401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190612e24565b61092a57505060408051808201909152600f81526e3737ba1030b71037b832b930ba37b960891b6020820152600092909150565b609c54600160601b900460ff16801561095c57506001600160a01b0383166000908152609a602052604090205460ff16155b1561099257505060408051808201909152601081526f1b9bdd081a5b88185b1b1bdddb1a5cdd60821b6020820152600092909150565b61099b83611856565b156109d3575050604080518082019091526012815271185b1c9958591e481c9959da5cdd195c995960721b6020820152600092909150565b609b5460985463ffffffff90911611610a1c5750506040805180820190915260158152741b585e081bdc195c985d1bdc9cc81c995858da1959605a1b6020820152600092909150565b609c546001600160601b0316610a3184611886565b6001600160601b03161015610a725750506040805180820190915260118152701b5a5b881cdd185ad9481b9bdd081b595d607a1b6020820152600092909150565b5050604080516020810190915260008152600192909150565b6060610a9682611856565b610aae57505060408051600081526020810190915290565b610ab66119b7565b92915050565b610ac46114d8565b610acc611a6f565b565b610ad66114d8565b61076d81611ac1565b610ae76114d8565b6001600160a01b0381166000908152609a602052604090205460ff16610b545760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a206e6f7420696e20616c6c6f776c6973740000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166000818152609a6020526040808220805460ff19169055517f8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb9190a250565b610ba56114d8565b610acc6000611b1a565b610bb76114d8565b60405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb35590610c03908490600401612e41565b600060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b5050505050565b610c406115d2565b6000339050610c8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b6c92505050565b6001600160a01b0316816001600160a01b031614610ce45760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a207075626b657920213d2073656e646572000000000000006044820152606401610b4b565b609c54600160601b900460ff161580610d1557506001600160a01b0381166000908152609a602052604090205460ff165b610d585760405162461bcd60e51b815260206004820152601460248201527313db5b9a505594ce881b9bdd08185b1b1bddd95960621b6044820152606401610b4b565b610d6181611856565b15610dae5760405162461bcd60e51b815260206004820152601c60248201527f4f6d6e694156533a20616c726561647920616e206f70657261746f72000000006044820152606401610b4b565b609b5460985463ffffffff90911611610e095760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e694156533a206d6178206f70657261746f7273207265616368656400006044820152606401610b4b565b609c546001600160601b0316610e1e82611886565b6001600160601b03161015610e755760405162461bcd60e51b815260206004820152601a60248201527f4f6d6e694156533a206d696e207374616b65206e6f74206d65740000000000006044820152606401610b4b565b610e80818585611bcb565b604051639926ee7d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639926ee7d90610ece9084908690600401612e54565b600060405180830381600087803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b50506040516001600160a01b03841692507fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d9150600090a250505050565b610f426114d8565b610acc611c33565b600054610100900460ff1615808015610f6a5750600054600160ff909116105b80610f845750303b158015610f84575060005460ff166001145b610fe75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b4b565b6000805460ff19166001179055801561100a576000805461ff0019166101001790555b6110138b611532565b61101c8a611ac1565b61102b620124f861c350611c70565b61103489611cfd565b61103d88611d96565b61104687611df0565b6110508686611e38565b811561105e5761105e61209f565b82156110e55760405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb355906110b29087908790600401612e9f565b600060405180830381600087803b1580156110cc57600080fd5b505af11580156110e0573d6000803e3d6000fd5b505050505b6110ee8c611b1a565b8015611134576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b61114a6114d8565b6111548282611e38565b5050565b600080611163611618565b609e54609b546040519293506001600160a01b0390911691638dd9523c9164010000000090046001600160401b03169063ae102bc960e01b906111aa908690602401612c67565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915284516111e790611821565b6040518463ffffffff1660e01b815260040161120593929190612ece565b602060405180830381865afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112469190612f04565b91505090565b6112546114d8565b610acc61209f565b6112646114d8565b610acc612137565b6112746114d8565b61076d81611cfd565b60606112876119b7565b905090565b6112946114d8565b61076d816121c8565b6060611287611618565b6112af6114d8565b61076d81611d96565b6112c06114d8565b6111548282611c70565b6112d26114d8565b6001600160a01b0381166113375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b4b565b61076d81611b1a565b6113486114d8565b61076d81611df0565b60606097805480602002602001604051908101604052809291908181526020016000905b828210156113c457600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b031681830152825260019092019101611375565b50505050905090565b6113d56114d8565b6001600160a01b0381166114235760405162461bcd60e51b81526020600482015260156024820152744f6d6e694156533a207a65726f206164647265737360581b6044820152606401610b4b565b6001600160a01b0381166000908152609a602052604090205460ff161561148c5760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e694156533a20616c726561647920696e20616c6c6f776c6973740000006044820152606401610b4b565b6001600160a01b0381166000818152609a6020526040808220805460ff19166001179055517fdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e759190a250565b6033546001600160a01b03163314610acc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b4b565b6001600160a01b0381166115885760405162461bcd60e51b815260206004820152601760248201527f4f6d6e694156533a206e6f207a65726f20706f7274616c0000000000000000006044820152606401610b4b565b609e80546001600160a01b0319166001600160a01b0383169081179091556040517f79162c8d053a07e70cdc1ccc536f0440b571f8508377d2bef51094fadab98f4790600090a250565b60655460ff1615610acc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b4b565b6098546060906000906001600160401b038111156116385761163861288f565b60405190808252806020026020018201604052801561168a57816020015b6040805160808101825260008082526060602080840182905293830182905282015282526000199092019101816116565790505b50905060005b815181101561181b576000609882815481106116ae576116ae612f1d565b60009182526020822001546001600160a01b031691506116cd82611886565b905060006116da836122d8565b90506000816001600160601b0316836001600160601b0316116116fe576000611708565b6117088284612f49565b6001600160a01b03851660009081526099602052604081208054929350909161173090612f71565b80601f016020809104026020016040519081016040528092919081815260200182805461175c90612f71565b80156117a95780601f1061177e576101008083540402835291602001916117a9565b820191906000526020600020905b81548152906001019060200180831161178c57829003601f168201915b505050505090506040518060800160405280866001600160a01b03168152602001828152602001836001600160601b03168152602001846001600160601b03168152508787815181106117fe576117fe612f1d565b602002602001018190525085806001019650505050505050611690565b50919050565b609b546000906001600160401b03600160a01b820481169161184c91600160601b9091041684612fa6565b610ab69190612fd5565b6001600160a01b0381166000908152609960205260408120805482919061187c90612f71565b9050119050919050565b6040805180820190915260008082526020820181905290819060005b6097548110156119ae57609781815481106118bf576118bf612f1d565b6000918252602080832060408051808201825293909101546001600160a01b03808216808652600160a01b9092046001600160601b031693850193909352905163778e55f360e01b8152898316600482015260248101919091529194507f0000000000000000000000000000000000000000000000000000000000000000169063778e55f390604401602060405180830381865afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190612f04565b90506119998184602001516124d8565b6119a39085613000565b9350506001016118a2565b50909392505050565b6097546060906000906001600160401b038111156119d7576119d761288f565b604051908082528060200260200182016040528015611a00578160200160208202803683370190505b50905060005b60975481101561181b5760978181548110611a2357611a23612f1d565b60009182526020909120015482516001600160a01b0390911690839083908110611a4f57611a4f612f1d565b6001600160a01b0390921660209283029190910190910152600101611a06565b611a77612507565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b609b80546bffffffffffffffff0000000019166401000000006001600160401b038416908102919091179091556040517f86c6800e7c164327530b6a334cd4599a5389a8b31d5e262d82034b1121dd8b8690600090a250565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008151604014611bbf5760405162461bcd60e51b815260206004820181905260248201527f536563703235366b313a20696e76616c6964207075626b6579206c656e6774686044820152606401610b4b565b50805160209091012090565b60988054600181019091557f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8140180546001600160a01b0319166001600160a01b0385169081179091556000908152609960205260409020611c2d908383612671565b50505050565b611c3b6115d2565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611aa43390565b609b80546fffffffffffffffffffffffffffffffff60601b1916600160a01b6001600160401b0385811691820267ffffffffffffffff60601b191692909217600160601b928516928302179092556040805192835260208301919091527fe8bd84272b361621aa78d2bf3b1232f4ec8bf4d53ea7e262b568952fd89dba3091015b60405180910390a15050565b6001600160a01b038116611d4c5760405162461bcd60e51b815260206004820152601660248201527509edadcd282aca67440dcde40f4cae4de40d2dcc4def60531b6044820152606401610b4b565b609d80546001600160a01b0319166001600160a01b0383169081179091556040517f51939cde6a90c107a83ed16cd83879c0fa830cbddb121deea9050042fae5ce6790600090a250565b609c80546bffffffffffffffffffffffff19166001600160601b0383169081179091556040519081527f9b13fd38c94948514c63f3132d22b60ecb8ed37521ba05fdfad046cfbc3a772a906020015b60405180910390a150565b609b805463ffffffff191663ffffffff83169081179091556040519081527f4867705ef2f7341363cb4d4bb0e1501ad37f84ae371b9f31e73a1c25c39840e490602001611de5565b611e44609760006126f5565b60005b8181101561206d576000838383818110611e6357611e63612f1d565b611e799260206040909202019081019150612783565b6001600160a01b03161415611ed05760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a206e6f207a65726f207374726174656779000000000000006044820152606401610b4b565b6000838383818110611ee457611ee4612f1d565b9050604002016020016020810190611efc9190612d09565b6001600160601b031611611f525760405162461bcd60e51b815260206004820152601b60248201527f4f6d6e694156533a206e6f207a65726f206d756c7469706c69657200000000006044820152606401610b4b565b6000611f5f826001613022565b90505b8281101561202257838382818110611f7c57611f7c612f1d565b611f929260206040909202019081019150612783565b6001600160a01b0316848484818110611fad57611fad612f1d565b611fc39260206040909202019081019150612783565b6001600160a01b0316141561201a5760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e694156533a206e6f206475706c696361746520737472617465677900006044820152606401610b4b565b600101611f62565b50609783838381811061203757612037612f1d565b83546001810185556000948552602090942060409091029290920192919091019050612063828261303a565b5050600101611e47565b507f236150b37b22bc9557672069e2dfb3f05be1dafd1f9ead78df2f8b855ee696408282604051611cf192919061307c565b609c54600160601b900460ff16156120f95760405162461bcd60e51b815260206004820152601860248201527f4f6d6e694156533a20616c726561647920656e61626c656400000000000000006044820152606401610b4b565b609c805460ff60601b1916600160601b1790556040517f8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec390600090a1565b609c54600160601b900460ff166121905760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a20616c72656164792064697361626c6564000000000000006044820152606401610b4b565b609c805460ff60601b191690556040517f2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb0790600090a1565b6121d181611856565b61221d5760405162461bcd60e51b815260206004820152601860248201527f4f6d6e694156533a206e6f7420616e206f70657261746f7200000000000000006044820152606401610b4b565b61222681612550565b6040516351b27a6d60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da90602401600060405180830381600087803b15801561228957600080fd5b505af115801561229d573d6000803e3d6000fd5b50506040516001600160a01b03841692507f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d9150600090a250565b6040516367c0439f60e11b81526001600160a01b038281166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063cf80873e90602401600060405180830381865afa158015612347573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261236f9190810190613175565b90925090506000805b83518110156124cf57600084828151811061239557612395612f1d565b602002602001015190506123ce604051806040016040528060006001600160a01b0316815260200160006001600160601b031681525090565b60005b60975481101561247057826001600160a01b0316609782815481106123f8576123f8612f1d565b6000918252602090912001546001600160a01b03161415612468576097818154811061242657612426612f1d565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b0316918101919091529150612470565b6001016123d1565b5080516001600160a01b03166124875750506124bd565b6124ae85848151811061249c5761249c612f1d565b602002602001015182602001516124d8565b6124b89085613000565b935050505b806124c781613239565b915050612378565b50949350505050565b6000670de0b6b3a76400006124f66001600160601b03841685613254565b6125009190613273565b9392505050565b60655460ff16610acc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b4b565b60005b60985481101561264f57816001600160a01b03166098828154811061257a5761257a612f1d565b6000918252602090912001546001600160a01b0316141561264757609880546125a590600190613295565b815481106125b5576125b5612f1d565b600091825260209091200154609880546001600160a01b0390921691839081106125e1576125e1612f1d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506098805480612620576126206132ac565b600082815260209020810160001990810180546001600160a01b031916905501905561264f565b600101612553565b506001600160a01b038116600090815260996020526040812061076d91612713565b82805461267d90612f71565b90600052602060002090601f01602090048101928261269f57600085556126e5565b82601f106126b85782800160ff198235161785556126e5565b828001600101855582156126e5579182015b828111156126e55782358255916020019190600101906126ca565b506126f1929150612749565b5090565b508054600082559060005260206000209081019061076d9190612749565b50805461271f90612f71565b6000825580601f1061272f575050565b601f01602090049060005260206000209081019061076d91905b5b808211156126f1576000815560010161274a565b6001600160a01b038116811461076d57600080fd5b803561277e8161275e565b919050565b60006020828403121561279557600080fd5b81356125008161275e565b6000815180845260005b818110156127c6576020818501810151868301820152016127aa565b818111156127d8576000602083870101525b50601f01601f19169290920160200192915050565b821515815260406020820152600061280860408301846127a0565b949350505050565b6020808252825182820181905260009190848201906040850190845b818110156128515783516001600160a01b03168352928401929184019160010161282c565b50909695505050505050565b80356001600160401b038116811461277e57600080fd5b60006020828403121561288657600080fd5b6125008261285d565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156128c7576128c761288f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156128f5576128f561288f565b604052919050565b60006001600160401b038311156129165761291661288f565b612929601f8401601f19166020016128cd565b905082815283838301111561293d57600080fd5b828260208301376000602084830101529392505050565b60006020828403121561296657600080fd5b81356001600160401b0381111561297c57600080fd5b8201601f8101841361298d57600080fd5b612808848235602084016128fd565b60008083601f8401126129ae57600080fd5b5081356001600160401b038111156129c557600080fd5b6020830191508360208285010111156129dd57600080fd5b9250929050565b6000806000604084860312156129f957600080fd5b83356001600160401b0380821115612a1057600080fd5b612a1c8783880161299c565b90955093506020860135915080821115612a3557600080fd5b9085019060608288031215612a4957600080fd5b612a516128a5565b823582811115612a6057600080fd5b83019150601f82018813612a7357600080fd5b612a82888335602085016128fd565b815260208301356020820152604083013560408201528093505050509250925092565b6001600160601b038116811461076d57600080fd5b803561277e81612aa5565b803563ffffffff8116811461277e57600080fd5b60008083601f840112612aeb57600080fd5b5081356001600160401b03811115612b0257600080fd5b6020830191508360208260061b85010111156129dd57600080fd5b801515811461076d57600080fd5b803561277e81612b1d565b60008060008060008060008060008060006101208c8e031215612b5857600080fd5b612b628c3561275e565b8b359a50612b7360208d013561275e565b60208c01359950612b8660408d0161285d565b9850612b9460608d01612773565b9750612ba260808d01612aba565b9650612bb060a08d01612ac5565b95506001600160401b038060c08e01351115612bcb57600080fd5b612bdb8e60c08f01358f01612ad9565b909650945060e08d0135811015612bf157600080fd5b50612c028d60e08e01358e0161299c565b9093509150612c146101008d01612b2b565b90509295989b509295989b9093969950565b60008060208385031215612c3957600080fd5b82356001600160401b03811115612c4f57600080fd5b612c5b85828601612ad9565b90969095509350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612cfb57888303603f19018552815180516001600160a01b0316845287810151608089860181905290612cc7828701826127a0565b838a01516001600160601b03908116888c015260609485015116939096019290925250509386019390860190600101612c8e565b509098975050505050505050565b600060208284031215612d1b57600080fd5b813561250081612aa5565b60008060408385031215612d3957600080fd5b612d428361285d565b9150612d506020840161285d565b90509250929050565b600060208284031215612d6b57600080fd5b61250082612ac5565b602080825282518282018190526000919060409081850190868401855b82811015612dc857815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101612d91565b5091979650505050505050565b60006001600160401b03808816835260ff8716602084015260018060a01b038616604084015260a06060840152612e0f60a08401866127a0565b91508084166080840152509695505050505050565b600060208284031215612e3657600080fd5b815161250081612b1d565b60208152600061250060208301846127a0565b60018060a01b0383168152604060208201526000825160606040840152612e7e60a08401826127a0565b90506020840151606084015260408401516080840152809150509392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006001600160401b03808616835260606020840152612ef160608401866127a0565b9150808416604084015250949350505050565b600060208284031215612f1657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b0383811690831681811015612f6957612f69612f33565b039392505050565b600181811c90821680612f8557607f821691505b6020821081141561181b57634e487b7160e01b600052602260045260246000fd5b60006001600160401b0380831681851681830481118215151615612fcc57612fcc612f33565b02949350505050565b60006001600160401b03808316818516808303821115612ff757612ff7612f33565b01949350505050565b60006001600160601b03808316818516808303821115612ff757612ff7612f33565b6000821982111561303557613035612f33565b500190565b81356130458161275e565b81546001600160a01b03199081166001600160a01b03929092169182178355602084013561307281612aa5565b60a01b1617905550565b6020808252818101839052600090604080840186845b878110156130da5781356130a58161275e565b6001600160a01b03168352818501356130bd81612aa5565b6001600160601b0316838601529183019190830190600101613092565b5090979650505050505050565b60006001600160401b038211156131005761310061288f565b5060051b60200190565b600082601f83011261311b57600080fd5b8151602061313061312b836130e7565b6128cd565b82815260059290921b8401810191818101908684111561314f57600080fd5b8286015b8481101561316a5780518352918301918301613153565b509695505050505050565b6000806040838503121561318857600080fd5b82516001600160401b038082111561319f57600080fd5b818501915085601f8301126131b357600080fd5b815160206131c361312b836130e7565b82815260059290921b840181019181810190898411156131e257600080fd5b948201945b838610156132095785516131fa8161275e565b825294820194908201906131e7565b9188015191965090935050508082111561322257600080fd5b5061322f8582860161310a565b9150509250929050565b600060001982141561324d5761324d612f33565b5060010190565b600081600019048311821515161561326e5761326e612f33565b500290565b60008261329057634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156132a7576132a7612f33565b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ecf69b2fccf97b7f0cdca94198d818727ce48fed2d3c6d39c2a244b576a1814764736f6c634300080c0033",
}

// OmniAVSABI is the input ABI used to generate the binding from.
// Deprecated: Use OmniAVSMetaData.ABI instead.
var OmniAVSABI = OmniAVSMetaData.ABI

// OmniAVSBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OmniAVSMetaData.Bin instead.
var OmniAVSBin = OmniAVSMetaData.Bin

// DeployOmniAVS deploys a new Ethereum contract, binding an instance of OmniAVS to it.
func DeployOmniAVS(auth *bind.TransactOpts, backend bind.ContractBackend, delegationManager_ common.Address, avsDirectory_ common.Address) (common.Address, *types.Transaction, *OmniAVS, error) {
	parsed, err := OmniAVSMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OmniAVSBin), backend, delegationManager_, avsDirectory_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OmniAVS{OmniAVSCaller: OmniAVSCaller{contract: contract}, OmniAVSTransactor: OmniAVSTransactor{contract: contract}, OmniAVSFilterer: OmniAVSFilterer{contract: contract}}, nil
}

// OmniAVS is an auto generated Go binding around an Ethereum contract.
type OmniAVS struct {
	OmniAVSCaller     // Read-only binding to the contract
	OmniAVSTransactor // Write-only binding to the contract
	OmniAVSFilterer   // Log filterer for contract events
}

// OmniAVSCaller is an auto generated read-only Go binding around an Ethereum contract.
type OmniAVSCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OmniAVSTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OmniAVSFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OmniAVSSession struct {
	Contract     *OmniAVS          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OmniAVSCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OmniAVSCallerSession struct {
	Contract *OmniAVSCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OmniAVSTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OmniAVSTransactorSession struct {
	Contract     *OmniAVSTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OmniAVSRaw is an auto generated low-level Go binding around an Ethereum contract.
type OmniAVSRaw struct {
	Contract *OmniAVS // Generic contract binding to access the raw methods on
}

// OmniAVSCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OmniAVSCallerRaw struct {
	Contract *OmniAVSCaller // Generic read-only contract binding to access the raw methods on
}

// OmniAVSTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OmniAVSTransactorRaw struct {
	Contract *OmniAVSTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOmniAVS creates a new instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVS(address common.Address, backend bind.ContractBackend) (*OmniAVS, error) {
	contract, err := bindOmniAVS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OmniAVS{OmniAVSCaller: OmniAVSCaller{contract: contract}, OmniAVSTransactor: OmniAVSTransactor{contract: contract}, OmniAVSFilterer: OmniAVSFilterer{contract: contract}}, nil
}

// NewOmniAVSCaller creates a new read-only instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSCaller(address common.Address, caller bind.ContractCaller) (*OmniAVSCaller, error) {
	contract, err := bindOmniAVS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OmniAVSCaller{contract: contract}, nil
}

// NewOmniAVSTransactor creates a new write-only instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSTransactor(address common.Address, transactor bind.ContractTransactor) (*OmniAVSTransactor, error) {
	contract, err := bindOmniAVS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OmniAVSTransactor{contract: contract}, nil
}

// NewOmniAVSFilterer creates a new log filterer instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSFilterer(address common.Address, filterer bind.ContractFilterer) (*OmniAVSFilterer, error) {
	contract, err := bindOmniAVS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OmniAVSFilterer{contract: contract}, nil
}

// bindOmniAVS binds a generic wrapper to an already deployed contract.
func bindOmniAVS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OmniAVSMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniAVS *OmniAVSRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniAVS.Contract.OmniAVSCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniAVS *OmniAVSRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.Contract.OmniAVSTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniAVS *OmniAVSRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniAVS.Contract.OmniAVSTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniAVS *OmniAVSCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniAVS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniAVS *OmniAVSTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniAVS *OmniAVSTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniAVS.Contract.contract.Transact(opts, method, params...)
}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_OmniAVS *OmniAVSCaller) AllowlistEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "allowlistEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_OmniAVS *OmniAVSSession) AllowlistEnabled() (bool, error) {
	return _OmniAVS.Contract.AllowlistEnabled(&_OmniAVS.CallOpts)
}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) AllowlistEnabled() (bool, error) {
	return _OmniAVS.Contract.AllowlistEnabled(&_OmniAVS.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSSession) AvsDirectory() (common.Address, error) {
	return _OmniAVS.Contract.AvsDirectory(&_OmniAVS.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) AvsDirectory() (common.Address, error) {
	return _OmniAVS.Contract.AvsDirectory(&_OmniAVS.CallOpts)
}

// CanRegister is a free data retrieval call binding the contract method 0x320d46d4.
//
// Solidity: function canRegister(address operator) view returns(bool, string)
func (_OmniAVS *OmniAVSCaller) CanRegister(opts *bind.CallOpts, operator common.Address) (bool, string, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "canRegister", operator)

	if err != nil {
		return *new(bool), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// CanRegister is a free data retrieval call binding the contract method 0x320d46d4.
//
// Solidity: function canRegister(address operator) view returns(bool, string)
func (_OmniAVS *OmniAVSSession) CanRegister(operator common.Address) (bool, string, error) {
	return _OmniAVS.Contract.CanRegister(&_OmniAVS.CallOpts, operator)
}

// CanRegister is a free data retrieval call binding the contract method 0x320d46d4.
//
// Solidity: function canRegister(address operator) view returns(bool, string)
func (_OmniAVS *OmniAVSCallerSession) CanRegister(operator common.Address) (bool, string, error) {
	return _OmniAVS.Contract.CanRegister(&_OmniAVS.CallOpts, operator)
}

// EthStakeInbox is a free data retrieval call binding the contract method 0x7815873d.
//
// Solidity: function ethStakeInbox() view returns(address)
func (_OmniAVS *OmniAVSCaller) EthStakeInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "ethStakeInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EthStakeInbox is a free data retrieval call binding the contract method 0x7815873d.
//
// Solidity: function ethStakeInbox() view returns(address)
func (_OmniAVS *OmniAVSSession) EthStakeInbox() (common.Address, error) {
	return _OmniAVS.Contract.EthStakeInbox(&_OmniAVS.CallOpts)
}

// EthStakeInbox is a free data retrieval call binding the contract method 0x7815873d.
//
// Solidity: function ethStakeInbox() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) EthStakeInbox() (common.Address, error) {
	return _OmniAVS.Contract.EthStakeInbox(&_OmniAVS.CallOpts)
}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSCaller) FeeForSync(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "feeForSync")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSSession) FeeForSync() (*big.Int, error) {
	return _OmniAVS.Contract.FeeForSync(&_OmniAVS.CallOpts)
}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSCallerSession) FeeForSync() (*big.Int, error) {
	return _OmniAVS.Contract.FeeForSync(&_OmniAVS.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "getOperatorRestakedStrategies", operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _OmniAVS.Contract.GetOperatorRestakedStrategies(&_OmniAVS.CallOpts, operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSCallerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _OmniAVS.Contract.GetOperatorRestakedStrategies(&_OmniAVS.CallOpts, operator)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _OmniAVS.Contract.GetRestakeableStrategies(&_OmniAVS.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _OmniAVS.Contract.GetRestakeableStrategies(&_OmniAVS.CallOpts)
}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSCaller) IsInAllowlist(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "isInAllowlist", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSSession) IsInAllowlist(operator common.Address) (bool, error) {
	return _OmniAVS.Contract.IsInAllowlist(&_OmniAVS.CallOpts, operator)
}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) IsInAllowlist(operator common.Address) (bool, error) {
	return _OmniAVS.Contract.IsInAllowlist(&_OmniAVS.CallOpts, operator)
}

// MaxOperatorCount is a free data retrieval call binding the contract method 0xc75e3aed.
//
// Solidity: function maxOperatorCount() view returns(uint32)
func (_OmniAVS *OmniAVSCaller) MaxOperatorCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "maxOperatorCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MaxOperatorCount is a free data retrieval call binding the contract method 0xc75e3aed.
//
// Solidity: function maxOperatorCount() view returns(uint32)
func (_OmniAVS *OmniAVSSession) MaxOperatorCount() (uint32, error) {
	return _OmniAVS.Contract.MaxOperatorCount(&_OmniAVS.CallOpts)
}

// MaxOperatorCount is a free data retrieval call binding the contract method 0xc75e3aed.
//
// Solidity: function maxOperatorCount() view returns(uint32)
func (_OmniAVS *OmniAVSCallerSession) MaxOperatorCount() (uint32, error) {
	return _OmniAVS.Contract.MaxOperatorCount(&_OmniAVS.CallOpts)
}

// MinOperatorStake is a free data retrieval call binding the contract method 0xd775cb61.
//
// Solidity: function minOperatorStake() view returns(uint96)
func (_OmniAVS *OmniAVSCaller) MinOperatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "minOperatorStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinOperatorStake is a free data retrieval call binding the contract method 0xd775cb61.
//
// Solidity: function minOperatorStake() view returns(uint96)
func (_OmniAVS *OmniAVSSession) MinOperatorStake() (*big.Int, error) {
	return _OmniAVS.Contract.MinOperatorStake(&_OmniAVS.CallOpts)
}

// MinOperatorStake is a free data retrieval call binding the contract method 0xd775cb61.
//
// Solidity: function minOperatorStake() view returns(uint96)
func (_OmniAVS *OmniAVSCallerSession) MinOperatorStake() (*big.Int, error) {
	return _OmniAVS.Contract.MinOperatorStake(&_OmniAVS.CallOpts)
}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSCaller) Omni(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "omni")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSSession) Omni() (common.Address, error) {
	return _OmniAVS.Contract.Omni(&_OmniAVS.CallOpts)
}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) Omni() (common.Address, error) {
	return _OmniAVS.Contract.Omni(&_OmniAVS.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) OmniChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "omniChainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSSession) OmniChainId() (uint64, error) {
	return _OmniAVS.Contract.OmniChainId(&_OmniAVS.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) OmniChainId() (uint64, error) {
	return _OmniAVS.Contract.OmniChainId(&_OmniAVS.CallOpts)
}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,bytes,uint96,uint96)[])
func (_OmniAVS *OmniAVSCaller) Operators(opts *bind.CallOpts) ([]IOmniAVSOperator, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "operators")

	if err != nil {
		return *new([]IOmniAVSOperator), err
	}

	out0 := *abi.ConvertType(out[0], new([]IOmniAVSOperator)).(*[]IOmniAVSOperator)

	return out0, err

}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,bytes,uint96,uint96)[])
func (_OmniAVS *OmniAVSSession) Operators() ([]IOmniAVSOperator, error) {
	return _OmniAVS.Contract.Operators(&_OmniAVS.CallOpts)
}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,bytes,uint96,uint96)[])
func (_OmniAVS *OmniAVSCallerSession) Operators() ([]IOmniAVSOperator, error) {
	return _OmniAVS.Contract.Operators(&_OmniAVS.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSSession) Owner() (common.Address, error) {
	return _OmniAVS.Contract.Owner(&_OmniAVS.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) Owner() (common.Address, error) {
	return _OmniAVS.Contract.Owner(&_OmniAVS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSSession) Paused() (bool, error) {
	return _OmniAVS.Contract.Paused(&_OmniAVS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) Paused() (bool, error) {
	return _OmniAVS.Contract.Paused(&_OmniAVS.CallOpts)
}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSCaller) StrategyParams(opts *bind.CallOpts) ([]IOmniAVSStrategyParam, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "strategyParams")

	if err != nil {
		return *new([]IOmniAVSStrategyParam), err
	}

	out0 := *abi.ConvertType(out[0], new([]IOmniAVSStrategyParam)).(*[]IOmniAVSStrategyParam)

	return out0, err

}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSSession) StrategyParams() ([]IOmniAVSStrategyParam, error) {
	return _OmniAVS.Contract.StrategyParams(&_OmniAVS.CallOpts)
}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSCallerSession) StrategyParams() ([]IOmniAVSStrategyParam, error) {
	return _OmniAVS.Contract.StrategyParams(&_OmniAVS.CallOpts)
}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) XcallBaseGasLimit(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "xcallBaseGasLimit")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSSession) XcallBaseGasLimit() (uint64, error) {
	return _OmniAVS.Contract.XcallBaseGasLimit(&_OmniAVS.CallOpts)
}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) XcallBaseGasLimit() (uint64, error) {
	return _OmniAVS.Contract.XcallBaseGasLimit(&_OmniAVS.CallOpts)
}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) XcallGasLimitPerOperator(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "xcallGasLimitPerOperator")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSSession) XcallGasLimitPerOperator() (uint64, error) {
	return _OmniAVS.Contract.XcallGasLimitPerOperator(&_OmniAVS.CallOpts)
}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) XcallGasLimitPerOperator() (uint64, error) {
	return _OmniAVS.Contract.XcallGasLimitPerOperator(&_OmniAVS.CallOpts)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) AddToAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "addToAllowlist", operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.AddToAllowlist(&_OmniAVS.TransactOpts, operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.AddToAllowlist(&_OmniAVS.TransactOpts, operator)
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactor) DisableAllowlist(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "disableAllowlist")
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_OmniAVS *OmniAVSSession) DisableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.DisableAllowlist(&_OmniAVS.TransactOpts)
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactorSession) DisableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.DisableAllowlist(&_OmniAVS.TransactOpts)
}

// EjectOperator is a paid mutator transaction binding the contract method 0xe5d98f94.
//
// Solidity: function ejectOperator(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) EjectOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "ejectOperator", operator)
}

// EjectOperator is a paid mutator transaction binding the contract method 0xe5d98f94.
//
// Solidity: function ejectOperator(address operator) returns()
func (_OmniAVS *OmniAVSSession) EjectOperator(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.EjectOperator(&_OmniAVS.TransactOpts, operator)
}

// EjectOperator is a paid mutator transaction binding the contract method 0xe5d98f94.
//
// Solidity: function ejectOperator(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) EjectOperator(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.EjectOperator(&_OmniAVS.TransactOpts, operator)
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactor) EnableAllowlist(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "enableAllowlist")
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_OmniAVS *OmniAVSSession) EnableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.EnableAllowlist(&_OmniAVS.TransactOpts)
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_OmniAVS *OmniAVSTransactorSession) EnableAllowlist() (*types.Transaction, error) {
	return _OmniAVS.Contract.EnableAllowlist(&_OmniAVS.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8ef7ad5d.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, address ethStakeInbox_, uint96 minOperatorStake_, uint32 maxOperatorCount_, (address,uint96)[] strategyParams_, string metadataURI_, bool allowlistEnabled_) returns()
func (_OmniAVS *OmniAVSTransactor) Initialize(opts *bind.TransactOpts, owner_ common.Address, omni_ common.Address, omniChainId_ uint64, ethStakeInbox_ common.Address, minOperatorStake_ *big.Int, maxOperatorCount_ uint32, strategyParams_ []IOmniAVSStrategyParam, metadataURI_ string, allowlistEnabled_ bool) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "initialize", owner_, omni_, omniChainId_, ethStakeInbox_, minOperatorStake_, maxOperatorCount_, strategyParams_, metadataURI_, allowlistEnabled_)
}

// Initialize is a paid mutator transaction binding the contract method 0x8ef7ad5d.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, address ethStakeInbox_, uint96 minOperatorStake_, uint32 maxOperatorCount_, (address,uint96)[] strategyParams_, string metadataURI_, bool allowlistEnabled_) returns()
func (_OmniAVS *OmniAVSSession) Initialize(owner_ common.Address, omni_ common.Address, omniChainId_ uint64, ethStakeInbox_ common.Address, minOperatorStake_ *big.Int, maxOperatorCount_ uint32, strategyParams_ []IOmniAVSStrategyParam, metadataURI_ string, allowlistEnabled_ bool) (*types.Transaction, error) {
	return _OmniAVS.Contract.Initialize(&_OmniAVS.TransactOpts, owner_, omni_, omniChainId_, ethStakeInbox_, minOperatorStake_, maxOperatorCount_, strategyParams_, metadataURI_, allowlistEnabled_)
}

// Initialize is a paid mutator transaction binding the contract method 0x8ef7ad5d.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, address ethStakeInbox_, uint96 minOperatorStake_, uint32 maxOperatorCount_, (address,uint96)[] strategyParams_, string metadataURI_, bool allowlistEnabled_) returns()
func (_OmniAVS *OmniAVSTransactorSession) Initialize(owner_ common.Address, omni_ common.Address, omniChainId_ uint64, ethStakeInbox_ common.Address, minOperatorStake_ *big.Int, maxOperatorCount_ uint32, strategyParams_ []IOmniAVSStrategyParam, metadataURI_ string, allowlistEnabled_ bool) (*types.Transaction, error) {
	return _OmniAVS.Contract.Initialize(&_OmniAVS.TransactOpts, owner_, omni_, omniChainId_, ethStakeInbox_, minOperatorStake_, maxOperatorCount_, strategyParams_, metadataURI_, allowlistEnabled_)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSSession) Pause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Pause(&_OmniAVS.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSTransactorSession) Pause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Pause(&_OmniAVS.TransactOpts)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x7719d097.
//
// Solidity: function registerOperator(bytes pubkey, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSTransactor) RegisterOperator(opts *bind.TransactOpts, pubkey []byte, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "registerOperator", pubkey, operatorSignature)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x7719d097.
//
// Solidity: function registerOperator(bytes pubkey, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSSession) RegisterOperator(pubkey []byte, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.Contract.RegisterOperator(&_OmniAVS.TransactOpts, pubkey, operatorSignature)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x7719d097.
//
// Solidity: function registerOperator(bytes pubkey, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSTransactorSession) RegisterOperator(pubkey []byte, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.Contract.RegisterOperator(&_OmniAVS.TransactOpts, pubkey, operatorSignature)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) RemoveFromAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "removeFromAllowlist", operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.RemoveFromAllowlist(&_OmniAVS.TransactOpts, operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.RemoveFromAllowlist(&_OmniAVS.TransactOpts, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniAVS.Contract.RenounceOwnership(&_OmniAVS.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniAVS.Contract.RenounceOwnership(&_OmniAVS.TransactOpts)
}

// SetEthStakeInbox is a paid mutator transaction binding the contract method 0xd17efb36.
//
// Solidity: function setEthStakeInbox(address inbox) returns()
func (_OmniAVS *OmniAVSTransactor) SetEthStakeInbox(opts *bind.TransactOpts, inbox common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setEthStakeInbox", inbox)
}

// SetEthStakeInbox is a paid mutator transaction binding the contract method 0xd17efb36.
//
// Solidity: function setEthStakeInbox(address inbox) returns()
func (_OmniAVS *OmniAVSSession) SetEthStakeInbox(inbox common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetEthStakeInbox(&_OmniAVS.TransactOpts, inbox)
}

// SetEthStakeInbox is a paid mutator transaction binding the contract method 0xd17efb36.
//
// Solidity: function setEthStakeInbox(address inbox) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetEthStakeInbox(inbox common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetEthStakeInbox(&_OmniAVS.TransactOpts, inbox)
}

// SetMaxOperatorCount is a paid mutator transaction binding the contract method 0xf36b8d36.
//
// Solidity: function setMaxOperatorCount(uint32 count) returns()
func (_OmniAVS *OmniAVSTransactor) SetMaxOperatorCount(opts *bind.TransactOpts, count uint32) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setMaxOperatorCount", count)
}

// SetMaxOperatorCount is a paid mutator transaction binding the contract method 0xf36b8d36.
//
// Solidity: function setMaxOperatorCount(uint32 count) returns()
func (_OmniAVS *OmniAVSSession) SetMaxOperatorCount(count uint32) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMaxOperatorCount(&_OmniAVS.TransactOpts, count)
}

// SetMaxOperatorCount is a paid mutator transaction binding the contract method 0xf36b8d36.
//
// Solidity: function setMaxOperatorCount(uint32 count) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetMaxOperatorCount(count uint32) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMaxOperatorCount(&_OmniAVS.TransactOpts, count)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSTransactor) SetMetadataURI(opts *bind.TransactOpts, metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setMetadataURI", metadataURI)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSSession) SetMetadataURI(metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMetadataURI(&_OmniAVS.TransactOpts, metadataURI)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetMetadataURI(metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMetadataURI(&_OmniAVS.TransactOpts, metadataURI)
}

// SetMinOperatorStake is a paid mutator transaction binding the contract method 0xeb316235.
//
// Solidity: function setMinOperatorStake(uint96 stake) returns()
func (_OmniAVS *OmniAVSTransactor) SetMinOperatorStake(opts *bind.TransactOpts, stake *big.Int) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setMinOperatorStake", stake)
}

// SetMinOperatorStake is a paid mutator transaction binding the contract method 0xeb316235.
//
// Solidity: function setMinOperatorStake(uint96 stake) returns()
func (_OmniAVS *OmniAVSSession) SetMinOperatorStake(stake *big.Int) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMinOperatorStake(&_OmniAVS.TransactOpts, stake)
}

// SetMinOperatorStake is a paid mutator transaction binding the contract method 0xeb316235.
//
// Solidity: function setMinOperatorStake(uint96 stake) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetMinOperatorStake(stake *big.Int) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMinOperatorStake(&_OmniAVS.TransactOpts, stake)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSTransactor) SetOmniChainId(opts *bind.TransactOpts, chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setOmniChainId", chainId)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSSession) SetOmniChainId(chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniChainId(&_OmniAVS.TransactOpts, chainId)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetOmniChainId(chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniChainId(&_OmniAVS.TransactOpts, chainId)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSTransactor) SetOmniPortal(opts *bind.TransactOpts, portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setOmniPortal", portal)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSSession) SetOmniPortal(portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniPortal(&_OmniAVS.TransactOpts, portal)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetOmniPortal(portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniPortal(&_OmniAVS.TransactOpts, portal)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSTransactor) SetStrategyParams(opts *bind.TransactOpts, params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setStrategyParams", params)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSSession) SetStrategyParams(params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetStrategyParams(&_OmniAVS.TransactOpts, params)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetStrategyParams(params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetStrategyParams(&_OmniAVS.TransactOpts, params)
}

// SetXCallGasLimits is a paid mutator transaction binding the contract method 0xeedc8a21.
//
// Solidity: function setXCallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSTransactor) SetXCallGasLimits(opts *bind.TransactOpts, base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setXCallGasLimits", base, perOperator)
}

// SetXCallGasLimits is a paid mutator transaction binding the contract method 0xeedc8a21.
//
// Solidity: function setXCallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSSession) SetXCallGasLimits(base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetXCallGasLimits(&_OmniAVS.TransactOpts, base, perOperator)
}

// SetXCallGasLimits is a paid mutator transaction binding the contract method 0xeedc8a21.
//
// Solidity: function setXCallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetXCallGasLimits(base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetXCallGasLimits(&_OmniAVS.TransactOpts, base, perOperator)
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSTransactor) SyncWithOmni(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "syncWithOmni")
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSSession) SyncWithOmni() (*types.Transaction, error) {
	return _OmniAVS.Contract.SyncWithOmni(&_OmniAVS.TransactOpts)
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSTransactorSession) SyncWithOmni() (*types.Transaction, error) {
	return _OmniAVS.Contract.SyncWithOmni(&_OmniAVS.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.TransferOwnership(&_OmniAVS.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.TransferOwnership(&_OmniAVS.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSSession) Unpause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Unpause(&_OmniAVS.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSTransactorSession) Unpause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Unpause(&_OmniAVS.TransactOpts)
}

// OmniAVSAllowlistDisabledIterator is returned from FilterAllowlistDisabled and is used to iterate over the raw logs and unpacked data for AllowlistDisabled events raised by the OmniAVS contract.
type OmniAVSAllowlistDisabledIterator struct {
	Event *OmniAVSAllowlistDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSAllowlistDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSAllowlistDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSAllowlistDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSAllowlistDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSAllowlistDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSAllowlistDisabled represents a AllowlistDisabled event raised by the OmniAVS contract.
type OmniAVSAllowlistDisabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAllowlistDisabled is a free log retrieval operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_OmniAVS *OmniAVSFilterer) FilterAllowlistDisabled(opts *bind.FilterOpts) (*OmniAVSAllowlistDisabledIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "AllowlistDisabled")
	if err != nil {
		return nil, err
	}
	return &OmniAVSAllowlistDisabledIterator{contract: _OmniAVS.contract, event: "AllowlistDisabled", logs: logs, sub: sub}, nil
}

// WatchAllowlistDisabled is a free log subscription operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_OmniAVS *OmniAVSFilterer) WatchAllowlistDisabled(opts *bind.WatchOpts, sink chan<- *OmniAVSAllowlistDisabled) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "AllowlistDisabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSAllowlistDisabled)
				if err := _OmniAVS.contract.UnpackLog(event, "AllowlistDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowlistDisabled is a log parse operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_OmniAVS *OmniAVSFilterer) ParseAllowlistDisabled(log types.Log) (*OmniAVSAllowlistDisabled, error) {
	event := new(OmniAVSAllowlistDisabled)
	if err := _OmniAVS.contract.UnpackLog(event, "AllowlistDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSAllowlistEnabledIterator is returned from FilterAllowlistEnabled and is used to iterate over the raw logs and unpacked data for AllowlistEnabled events raised by the OmniAVS contract.
type OmniAVSAllowlistEnabledIterator struct {
	Event *OmniAVSAllowlistEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSAllowlistEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSAllowlistEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSAllowlistEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSAllowlistEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSAllowlistEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSAllowlistEnabled represents a AllowlistEnabled event raised by the OmniAVS contract.
type OmniAVSAllowlistEnabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAllowlistEnabled is a free log retrieval operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_OmniAVS *OmniAVSFilterer) FilterAllowlistEnabled(opts *bind.FilterOpts) (*OmniAVSAllowlistEnabledIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "AllowlistEnabled")
	if err != nil {
		return nil, err
	}
	return &OmniAVSAllowlistEnabledIterator{contract: _OmniAVS.contract, event: "AllowlistEnabled", logs: logs, sub: sub}, nil
}

// WatchAllowlistEnabled is a free log subscription operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_OmniAVS *OmniAVSFilterer) WatchAllowlistEnabled(opts *bind.WatchOpts, sink chan<- *OmniAVSAllowlistEnabled) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "AllowlistEnabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSAllowlistEnabled)
				if err := _OmniAVS.contract.UnpackLog(event, "AllowlistEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowlistEnabled is a log parse operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_OmniAVS *OmniAVSFilterer) ParseAllowlistEnabled(log types.Log) (*OmniAVSAllowlistEnabled, error) {
	event := new(OmniAVSAllowlistEnabled)
	if err := _OmniAVS.contract.UnpackLog(event, "AllowlistEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSEthStakeInboxSetIterator is returned from FilterEthStakeInboxSet and is used to iterate over the raw logs and unpacked data for EthStakeInboxSet events raised by the OmniAVS contract.
type OmniAVSEthStakeInboxSetIterator struct {
	Event *OmniAVSEthStakeInboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSEthStakeInboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSEthStakeInboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSEthStakeInboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSEthStakeInboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSEthStakeInboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSEthStakeInboxSet represents a EthStakeInboxSet event raised by the OmniAVS contract.
type OmniAVSEthStakeInboxSet struct {
	Inbox common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEthStakeInboxSet is a free log retrieval operation binding the contract event 0x51939cde6a90c107a83ed16cd83879c0fa830cbddb121deea9050042fae5ce67.
//
// Solidity: event EthStakeInboxSet(address indexed inbox)
func (_OmniAVS *OmniAVSFilterer) FilterEthStakeInboxSet(opts *bind.FilterOpts, inbox []common.Address) (*OmniAVSEthStakeInboxSetIterator, error) {

	var inboxRule []interface{}
	for _, inboxItem := range inbox {
		inboxRule = append(inboxRule, inboxItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "EthStakeInboxSet", inboxRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSEthStakeInboxSetIterator{contract: _OmniAVS.contract, event: "EthStakeInboxSet", logs: logs, sub: sub}, nil
}

// WatchEthStakeInboxSet is a free log subscription operation binding the contract event 0x51939cde6a90c107a83ed16cd83879c0fa830cbddb121deea9050042fae5ce67.
//
// Solidity: event EthStakeInboxSet(address indexed inbox)
func (_OmniAVS *OmniAVSFilterer) WatchEthStakeInboxSet(opts *bind.WatchOpts, sink chan<- *OmniAVSEthStakeInboxSet, inbox []common.Address) (event.Subscription, error) {

	var inboxRule []interface{}
	for _, inboxItem := range inbox {
		inboxRule = append(inboxRule, inboxItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "EthStakeInboxSet", inboxRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSEthStakeInboxSet)
				if err := _OmniAVS.contract.UnpackLog(event, "EthStakeInboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEthStakeInboxSet is a log parse operation binding the contract event 0x51939cde6a90c107a83ed16cd83879c0fa830cbddb121deea9050042fae5ce67.
//
// Solidity: event EthStakeInboxSet(address indexed inbox)
func (_OmniAVS *OmniAVSFilterer) ParseEthStakeInboxSet(log types.Log) (*OmniAVSEthStakeInboxSet, error) {
	event := new(OmniAVSEthStakeInboxSet)
	if err := _OmniAVS.contract.UnpackLog(event, "EthStakeInboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the OmniAVS contract.
type OmniAVSInitializedIterator struct {
	Event *OmniAVSInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSInitialized represents a Initialized event raised by the OmniAVS contract.
type OmniAVSInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) FilterInitialized(opts *bind.FilterOpts) (*OmniAVSInitializedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &OmniAVSInitializedIterator{contract: _OmniAVS.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *OmniAVSInitialized) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSInitialized)
				if err := _OmniAVS.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) ParseInitialized(log types.Log) (*OmniAVSInitialized, error) {
	event := new(OmniAVSInitialized)
	if err := _OmniAVS.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSMaxOperatorCountSetIterator is returned from FilterMaxOperatorCountSet and is used to iterate over the raw logs and unpacked data for MaxOperatorCountSet events raised by the OmniAVS contract.
type OmniAVSMaxOperatorCountSetIterator struct {
	Event *OmniAVSMaxOperatorCountSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSMaxOperatorCountSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSMaxOperatorCountSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSMaxOperatorCountSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSMaxOperatorCountSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSMaxOperatorCountSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSMaxOperatorCountSet represents a MaxOperatorCountSet event raised by the OmniAVS contract.
type OmniAVSMaxOperatorCountSet struct {
	MaxOperatorCount uint32
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterMaxOperatorCountSet is a free log retrieval operation binding the contract event 0x4867705ef2f7341363cb4d4bb0e1501ad37f84ae371b9f31e73a1c25c39840e4.
//
// Solidity: event MaxOperatorCountSet(uint32 maxOperatorCount)
func (_OmniAVS *OmniAVSFilterer) FilterMaxOperatorCountSet(opts *bind.FilterOpts) (*OmniAVSMaxOperatorCountSetIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "MaxOperatorCountSet")
	if err != nil {
		return nil, err
	}
	return &OmniAVSMaxOperatorCountSetIterator{contract: _OmniAVS.contract, event: "MaxOperatorCountSet", logs: logs, sub: sub}, nil
}

// WatchMaxOperatorCountSet is a free log subscription operation binding the contract event 0x4867705ef2f7341363cb4d4bb0e1501ad37f84ae371b9f31e73a1c25c39840e4.
//
// Solidity: event MaxOperatorCountSet(uint32 maxOperatorCount)
func (_OmniAVS *OmniAVSFilterer) WatchMaxOperatorCountSet(opts *bind.WatchOpts, sink chan<- *OmniAVSMaxOperatorCountSet) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "MaxOperatorCountSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSMaxOperatorCountSet)
				if err := _OmniAVS.contract.UnpackLog(event, "MaxOperatorCountSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaxOperatorCountSet is a log parse operation binding the contract event 0x4867705ef2f7341363cb4d4bb0e1501ad37f84ae371b9f31e73a1c25c39840e4.
//
// Solidity: event MaxOperatorCountSet(uint32 maxOperatorCount)
func (_OmniAVS *OmniAVSFilterer) ParseMaxOperatorCountSet(log types.Log) (*OmniAVSMaxOperatorCountSet, error) {
	event := new(OmniAVSMaxOperatorCountSet)
	if err := _OmniAVS.contract.UnpackLog(event, "MaxOperatorCountSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSMinOperatorStakeSetIterator is returned from FilterMinOperatorStakeSet and is used to iterate over the raw logs and unpacked data for MinOperatorStakeSet events raised by the OmniAVS contract.
type OmniAVSMinOperatorStakeSetIterator struct {
	Event *OmniAVSMinOperatorStakeSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSMinOperatorStakeSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSMinOperatorStakeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSMinOperatorStakeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSMinOperatorStakeSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSMinOperatorStakeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSMinOperatorStakeSet represents a MinOperatorStakeSet event raised by the OmniAVS contract.
type OmniAVSMinOperatorStakeSet struct {
	MinOperatorStake *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterMinOperatorStakeSet is a free log retrieval operation binding the contract event 0x9b13fd38c94948514c63f3132d22b60ecb8ed37521ba05fdfad046cfbc3a772a.
//
// Solidity: event MinOperatorStakeSet(uint96 minOperatorStake)
func (_OmniAVS *OmniAVSFilterer) FilterMinOperatorStakeSet(opts *bind.FilterOpts) (*OmniAVSMinOperatorStakeSetIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "MinOperatorStakeSet")
	if err != nil {
		return nil, err
	}
	return &OmniAVSMinOperatorStakeSetIterator{contract: _OmniAVS.contract, event: "MinOperatorStakeSet", logs: logs, sub: sub}, nil
}

// WatchMinOperatorStakeSet is a free log subscription operation binding the contract event 0x9b13fd38c94948514c63f3132d22b60ecb8ed37521ba05fdfad046cfbc3a772a.
//
// Solidity: event MinOperatorStakeSet(uint96 minOperatorStake)
func (_OmniAVS *OmniAVSFilterer) WatchMinOperatorStakeSet(opts *bind.WatchOpts, sink chan<- *OmniAVSMinOperatorStakeSet) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "MinOperatorStakeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSMinOperatorStakeSet)
				if err := _OmniAVS.contract.UnpackLog(event, "MinOperatorStakeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinOperatorStakeSet is a log parse operation binding the contract event 0x9b13fd38c94948514c63f3132d22b60ecb8ed37521ba05fdfad046cfbc3a772a.
//
// Solidity: event MinOperatorStakeSet(uint96 minOperatorStake)
func (_OmniAVS *OmniAVSFilterer) ParseMinOperatorStakeSet(log types.Log) (*OmniAVSMinOperatorStakeSet, error) {
	event := new(OmniAVSMinOperatorStakeSet)
	if err := _OmniAVS.contract.UnpackLog(event, "MinOperatorStakeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOmniChainIdSetIterator is returned from FilterOmniChainIdSet and is used to iterate over the raw logs and unpacked data for OmniChainIdSet events raised by the OmniAVS contract.
type OmniAVSOmniChainIdSetIterator struct {
	Event *OmniAVSOmniChainIdSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOmniChainIdSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOmniChainIdSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOmniChainIdSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOmniChainIdSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOmniChainIdSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOmniChainIdSet represents a OmniChainIdSet event raised by the OmniAVS contract.
type OmniAVSOmniChainIdSet struct {
	ChainID uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOmniChainIdSet is a free log retrieval operation binding the contract event 0x86c6800e7c164327530b6a334cd4599a5389a8b31d5e262d82034b1121dd8b86.
//
// Solidity: event OmniChainIdSet(uint64 indexed chainID)
func (_OmniAVS *OmniAVSFilterer) FilterOmniChainIdSet(opts *bind.FilterOpts, chainID []uint64) (*OmniAVSOmniChainIdSetIterator, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OmniChainIdSet", chainIDRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOmniChainIdSetIterator{contract: _OmniAVS.contract, event: "OmniChainIdSet", logs: logs, sub: sub}, nil
}

// WatchOmniChainIdSet is a free log subscription operation binding the contract event 0x86c6800e7c164327530b6a334cd4599a5389a8b31d5e262d82034b1121dd8b86.
//
// Solidity: event OmniChainIdSet(uint64 indexed chainID)
func (_OmniAVS *OmniAVSFilterer) WatchOmniChainIdSet(opts *bind.WatchOpts, sink chan<- *OmniAVSOmniChainIdSet, chainID []uint64) (event.Subscription, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OmniChainIdSet", chainIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOmniChainIdSet)
				if err := _OmniAVS.contract.UnpackLog(event, "OmniChainIdSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOmniChainIdSet is a log parse operation binding the contract event 0x86c6800e7c164327530b6a334cd4599a5389a8b31d5e262d82034b1121dd8b86.
//
// Solidity: event OmniChainIdSet(uint64 indexed chainID)
func (_OmniAVS *OmniAVSFilterer) ParseOmniChainIdSet(log types.Log) (*OmniAVSOmniChainIdSet, error) {
	event := new(OmniAVSOmniChainIdSet)
	if err := _OmniAVS.contract.UnpackLog(event, "OmniChainIdSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOmniPortalSetIterator is returned from FilterOmniPortalSet and is used to iterate over the raw logs and unpacked data for OmniPortalSet events raised by the OmniAVS contract.
type OmniAVSOmniPortalSetIterator struct {
	Event *OmniAVSOmniPortalSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOmniPortalSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOmniPortalSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOmniPortalSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOmniPortalSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOmniPortalSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOmniPortalSet represents a OmniPortalSet event raised by the OmniAVS contract.
type OmniAVSOmniPortalSet struct {
	Portal common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOmniPortalSet is a free log retrieval operation binding the contract event 0x79162c8d053a07e70cdc1ccc536f0440b571f8508377d2bef51094fadab98f47.
//
// Solidity: event OmniPortalSet(address indexed portal)
func (_OmniAVS *OmniAVSFilterer) FilterOmniPortalSet(opts *bind.FilterOpts, portal []common.Address) (*OmniAVSOmniPortalSetIterator, error) {

	var portalRule []interface{}
	for _, portalItem := range portal {
		portalRule = append(portalRule, portalItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OmniPortalSet", portalRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOmniPortalSetIterator{contract: _OmniAVS.contract, event: "OmniPortalSet", logs: logs, sub: sub}, nil
}

// WatchOmniPortalSet is a free log subscription operation binding the contract event 0x79162c8d053a07e70cdc1ccc536f0440b571f8508377d2bef51094fadab98f47.
//
// Solidity: event OmniPortalSet(address indexed portal)
func (_OmniAVS *OmniAVSFilterer) WatchOmniPortalSet(opts *bind.WatchOpts, sink chan<- *OmniAVSOmniPortalSet, portal []common.Address) (event.Subscription, error) {

	var portalRule []interface{}
	for _, portalItem := range portal {
		portalRule = append(portalRule, portalItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OmniPortalSet", portalRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOmniPortalSet)
				if err := _OmniAVS.contract.UnpackLog(event, "OmniPortalSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOmniPortalSet is a log parse operation binding the contract event 0x79162c8d053a07e70cdc1ccc536f0440b571f8508377d2bef51094fadab98f47.
//
// Solidity: event OmniPortalSet(address indexed portal)
func (_OmniAVS *OmniAVSFilterer) ParseOmniPortalSet(log types.Log) (*OmniAVSOmniPortalSet, error) {
	event := new(OmniAVSOmniPortalSet)
	if err := _OmniAVS.contract.UnpackLog(event, "OmniPortalSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the OmniAVS contract.
type OmniAVSOperatorAddedIterator struct {
	Event *OmniAVSOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorAdded represents a OperatorAdded event raised by the OmniAVS contract.
type OmniAVSOperatorAdded struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorAdded(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorAddedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorAddedIterator{contract: _OmniAVS.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorAdded, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorAdded)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorAdded(log types.Log) (*OmniAVSOperatorAdded, error) {
	event := new(OmniAVSOperatorAdded)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorAllowedIterator is returned from FilterOperatorAllowed and is used to iterate over the raw logs and unpacked data for OperatorAllowed events raised by the OmniAVS contract.
type OmniAVSOperatorAllowedIterator struct {
	Event *OmniAVSOperatorAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorAllowed represents a OperatorAllowed event raised by the OmniAVS contract.
type OmniAVSOperatorAllowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAllowed is a free log retrieval operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorAllowed(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorAllowedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorAllowed", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorAllowedIterator{contract: _OmniAVS.contract, event: "OperatorAllowed", logs: logs, sub: sub}, nil
}

// WatchOperatorAllowed is a free log subscription operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorAllowed(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorAllowed, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorAllowed", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorAllowed)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAllowed is a log parse operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorAllowed(log types.Log) (*OmniAVSOperatorAllowed, error) {
	event := new(OmniAVSOperatorAllowed)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorDisallowedIterator is returned from FilterOperatorDisallowed and is used to iterate over the raw logs and unpacked data for OperatorDisallowed events raised by the OmniAVS contract.
type OmniAVSOperatorDisallowedIterator struct {
	Event *OmniAVSOperatorDisallowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorDisallowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorDisallowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorDisallowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorDisallowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorDisallowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorDisallowed represents a OperatorDisallowed event raised by the OmniAVS contract.
type OmniAVSOperatorDisallowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorDisallowed is a free log retrieval operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorDisallowed(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorDisallowedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorDisallowed", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorDisallowedIterator{contract: _OmniAVS.contract, event: "OperatorDisallowed", logs: logs, sub: sub}, nil
}

// WatchOperatorDisallowed is a free log subscription operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorDisallowed(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorDisallowed, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorDisallowed", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorDisallowed)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDisallowed is a log parse operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorDisallowed(log types.Log) (*OmniAVSOperatorDisallowed, error) {
	event := new(OmniAVSOperatorDisallowed)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorRemovedIterator is returned from FilterOperatorRemoved and is used to iterate over the raw logs and unpacked data for OperatorRemoved events raised by the OmniAVS contract.
type OmniAVSOperatorRemovedIterator struct {
	Event *OmniAVSOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorRemoved represents a OperatorRemoved event raised by the OmniAVS contract.
type OmniAVSOperatorRemoved struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorRemoved is a free log retrieval operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorRemoved(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorRemovedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorRemovedIterator{contract: _OmniAVS.contract, event: "OperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchOperatorRemoved is a free log subscription operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorRemoved(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorRemoved, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorRemoved)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRemoved is a log parse operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorRemoved(log types.Log) (*OmniAVSOperatorRemoved, error) {
	event := new(OmniAVSOperatorRemoved)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OmniAVS contract.
type OmniAVSOwnershipTransferredIterator struct {
	Event *OmniAVSOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOwnershipTransferred represents a OwnershipTransferred event raised by the OmniAVS contract.
type OmniAVSOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OmniAVSOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOwnershipTransferredIterator{contract: _OmniAVS.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OmniAVSOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOwnershipTransferred)
				if err := _OmniAVS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) ParseOwnershipTransferred(log types.Log) (*OmniAVSOwnershipTransferred, error) {
	event := new(OmniAVSOwnershipTransferred)
	if err := _OmniAVS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the OmniAVS contract.
type OmniAVSPausedIterator struct {
	Event *OmniAVSPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSPaused represents a Paused event raised by the OmniAVS contract.
type OmniAVSPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) FilterPaused(opts *bind.FilterOpts) (*OmniAVSPausedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &OmniAVSPausedIterator{contract: _OmniAVS.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *OmniAVSPaused) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSPaused)
				if err := _OmniAVS.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) ParsePaused(log types.Log) (*OmniAVSPaused, error) {
	event := new(OmniAVSPaused)
	if err := _OmniAVS.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSStrategyParamsSetIterator is returned from FilterStrategyParamsSet and is used to iterate over the raw logs and unpacked data for StrategyParamsSet events raised by the OmniAVS contract.
type OmniAVSStrategyParamsSetIterator struct {
	Event *OmniAVSStrategyParamsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSStrategyParamsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSStrategyParamsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSStrategyParamsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSStrategyParamsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSStrategyParamsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSStrategyParamsSet represents a StrategyParamsSet event raised by the OmniAVS contract.
type OmniAVSStrategyParamsSet struct {
	Params []IOmniAVSStrategyParam
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStrategyParamsSet is a free log retrieval operation binding the contract event 0x236150b37b22bc9557672069e2dfb3f05be1dafd1f9ead78df2f8b855ee69640.
//
// Solidity: event StrategyParamsSet((address,uint96)[] params)
func (_OmniAVS *OmniAVSFilterer) FilterStrategyParamsSet(opts *bind.FilterOpts) (*OmniAVSStrategyParamsSetIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "StrategyParamsSet")
	if err != nil {
		return nil, err
	}
	return &OmniAVSStrategyParamsSetIterator{contract: _OmniAVS.contract, event: "StrategyParamsSet", logs: logs, sub: sub}, nil
}

// WatchStrategyParamsSet is a free log subscription operation binding the contract event 0x236150b37b22bc9557672069e2dfb3f05be1dafd1f9ead78df2f8b855ee69640.
//
// Solidity: event StrategyParamsSet((address,uint96)[] params)
func (_OmniAVS *OmniAVSFilterer) WatchStrategyParamsSet(opts *bind.WatchOpts, sink chan<- *OmniAVSStrategyParamsSet) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "StrategyParamsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSStrategyParamsSet)
				if err := _OmniAVS.contract.UnpackLog(event, "StrategyParamsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyParamsSet is a log parse operation binding the contract event 0x236150b37b22bc9557672069e2dfb3f05be1dafd1f9ead78df2f8b855ee69640.
//
// Solidity: event StrategyParamsSet((address,uint96)[] params)
func (_OmniAVS *OmniAVSFilterer) ParseStrategyParamsSet(log types.Log) (*OmniAVSStrategyParamsSet, error) {
	event := new(OmniAVSStrategyParamsSet)
	if err := _OmniAVS.contract.UnpackLog(event, "StrategyParamsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the OmniAVS contract.
type OmniAVSUnpausedIterator struct {
	Event *OmniAVSUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSUnpaused represents a Unpaused event raised by the OmniAVS contract.
type OmniAVSUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) FilterUnpaused(opts *bind.FilterOpts) (*OmniAVSUnpausedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &OmniAVSUnpausedIterator{contract: _OmniAVS.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *OmniAVSUnpaused) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSUnpaused)
				if err := _OmniAVS.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) ParseUnpaused(log types.Log) (*OmniAVSUnpaused, error) {
	event := new(OmniAVSUnpaused)
	if err := _OmniAVS.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSXCallGasLimitsSetIterator is returned from FilterXCallGasLimitsSet and is used to iterate over the raw logs and unpacked data for XCallGasLimitsSet events raised by the OmniAVS contract.
type OmniAVSXCallGasLimitsSetIterator struct {
	Event *OmniAVSXCallGasLimitsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSXCallGasLimitsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSXCallGasLimitsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSXCallGasLimitsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSXCallGasLimitsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSXCallGasLimitsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSXCallGasLimitsSet represents a XCallGasLimitsSet event raised by the OmniAVS contract.
type OmniAVSXCallGasLimitsSet struct {
	Base         uint64
	PerValidator uint64
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterXCallGasLimitsSet is a free log retrieval operation binding the contract event 0xe8bd84272b361621aa78d2bf3b1232f4ec8bf4d53ea7e262b568952fd89dba30.
//
// Solidity: event XCallGasLimitsSet(uint64 base, uint64 perValidator)
func (_OmniAVS *OmniAVSFilterer) FilterXCallGasLimitsSet(opts *bind.FilterOpts) (*OmniAVSXCallGasLimitsSetIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "XCallGasLimitsSet")
	if err != nil {
		return nil, err
	}
	return &OmniAVSXCallGasLimitsSetIterator{contract: _OmniAVS.contract, event: "XCallGasLimitsSet", logs: logs, sub: sub}, nil
}

// WatchXCallGasLimitsSet is a free log subscription operation binding the contract event 0xe8bd84272b361621aa78d2bf3b1232f4ec8bf4d53ea7e262b568952fd89dba30.
//
// Solidity: event XCallGasLimitsSet(uint64 base, uint64 perValidator)
func (_OmniAVS *OmniAVSFilterer) WatchXCallGasLimitsSet(opts *bind.WatchOpts, sink chan<- *OmniAVSXCallGasLimitsSet) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "XCallGasLimitsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSXCallGasLimitsSet)
				if err := _OmniAVS.contract.UnpackLog(event, "XCallGasLimitsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseXCallGasLimitsSet is a log parse operation binding the contract event 0xe8bd84272b361621aa78d2bf3b1232f4ec8bf4d53ea7e262b568952fd89dba30.
//
// Solidity: event XCallGasLimitsSet(uint64 base, uint64 perValidator)
func (_OmniAVS *OmniAVSFilterer) ParseXCallGasLimitsSet(log types.Log) (*OmniAVSXCallGasLimitsSet, error) {
	event := new(OmniAVSXCallGasLimitsSet)
	if err := _OmniAVS.contract.UnpackLog(event, "XCallGasLimitsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
