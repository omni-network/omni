// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IOmniAVSOperator is an auto generated low-level Go binding around an user-defined struct.
type IOmniAVSOperator struct {
	Addr      common.Address
	Delegated *big.Int
	Staked    *big.Int
}

// IOmniAVSStrategyParam is an auto generated low-level Go binding around an user-defined struct.
type IOmniAVSStrategyParam struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// OmniAVSMetaData contains all meta data concerning the OmniAVS contract.
var OmniAVSMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"delegationManager_\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"},{\"name\":\"avsDirectory_\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addToAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperatorFromAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"feeForSync\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"omni_\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"},{\"name\":\"omniChainId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"strategyParams_\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isInAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omni\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"omniChainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operators\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.Operator[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegated\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"staked\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorToAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeFromAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMetadataURI\",\"inputs\":[{\"name\":\"metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOmniChainId\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOmniPortal\",\"inputs\":[{\"name\":\"portal\",\"type\":\"address\",\"internalType\":\"contractIOmniPortal\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStrategyParams\",\"inputs\":[{\"name\":\"params\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setXcallGasLimits\",\"inputs\":[{\"name\":\"base\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"perOperator\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"strategyParams\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIOmniAVS.StrategyParam[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"syncWithOmni\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"xcallBaseGasLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"xcallGasLimitPerOperator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAdded\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAllowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorDisallowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRemoved\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x60c06040523480156200001157600080fd5b506040516200280138038062002801833981016040819052620000349162000133565b6001600160a01b03808316608052811660a0526200005162000059565b505062000172565b600054610100900460ff1615620000c65760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000118576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013057600080fd5b50565b600080604083850312156200014757600080fd5b825162000154816200011a565b602084015190925062000167816200011a565b809150509250929050565b60805160a051612646620001bb600039600081816103db01528181610b1901528181610cb80152610e9301526000818161073a015281816119f80152611ac201526126466000f3fe6080604052600436106101b75760003560e01c80636b3aa72e116100ec578063ae30f16d1161008a578063e673df8a11610064578063e673df8a146104ff578063f2fde38b14610521578063f57f33d014610541578063f8e86ece1461056357600080fd5b8063ae30f16d146104a7578063b98912b0146104c7578063e481af9d146104ea57600080fd5b80638456cb59116100c65780638456cb59146104345780638da5cb5b146104495780639926ee7d14610467578063a364f4da1461048757600080fd5b80636b3aa72e146103cc578063715018a6146103ff578063750521f51461041457600080fd5b80633f4ba83a1161015957806354c74ed31161013357806354c74ed31461034d5780635c78b0e2146103745780635c975abb146103945780635da93d7e146103ac57600080fd5b80633f4ba83a146102f85780634a8fa4591461030d5780634dcff6e61461032d57600080fd5b8063243d51c711610195578063243d51c71461022357806329d0fdc01461024a57806333cfb7b71461029357806339acf9f1146102c057600080fd5b80630c415884146101bc578063110ff5f1146101de57806313efbe921461021b575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611d65565b610583565b005b3480156101ea57600080fd5b50609a546101fe906001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b6101dc6105ad565b34801561022f57600080fd5b50609a546101fe90600160801b90046001600160401b031681565b34801561025657600080fd5b50610283610265366004611d65565b6001600160a01b031660009081526099602052604090205460ff1690565b6040519015158152602001610212565b34801561029f57600080fd5b506102b36102ae366004611d65565b610696565b6040516102129190611d82565b3480156102cc57600080fd5b50609b546102e0906001600160a01b031681565b6040516001600160a01b039091168152602001610212565b34801561030457600080fd5b506101dc6107fb565b34801561031957600080fd5b506101dc610328366004611deb565b61080d565b34801561033957600080fd5b506101dc610348366004611e69565b61086e565b34801561035957600080fd5b50609a546101fe90600160401b90046001600160401b031681565b34801561038057600080fd5b506101dc61038f366004611ee2565b6109f5565b3480156103a057600080fd5b5060655460ff16610283565b3480156103b857600080fd5b506101dc6103c7366004611d65565b610a20565b3480156103d857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102e0565b34801561040b57600080fd5b506101dc610ae8565b34801561042057600080fd5b506101dc61042f366004611fc2565b610afa565b34801561044057600080fd5b506101dc610b83565b34801561045557600080fd5b506033546001600160a01b03166102e0565b34801561047357600080fd5b506101dc610482366004612012565b610b93565b34801561049357600080fd5b506101dc6104a2366004611d65565b610daa565b3480156104b357600080fd5b506101dc6104c23660046120bc565b610f2f565b3480156104d357600080fd5b506104dc610f45565b604051908152602001610212565b3480156104f657600080fd5b506102b3611031565b34801561050b57600080fd5b506105146110f9565b60405161021291906120fd565b34801561052d57600080fd5b506101dc61053c366004611d65565b611108565b34801561054d57600080fd5b50610556611181565b604051610212919061216c565b34801561056f57600080fd5b506101dc61057e366004611d65565b6111fd565b61058b611310565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6105b561136a565b60006105bf6113b0565b609b54609a546040519293506001600160a01b03909116916370e8b56a9134916001600160401b03909116906000906333364ffb60e11b906106059088906024016120fd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152865161064290611505565b6040518663ffffffff1660e01b8152600401610661949392919061220d565b6000604051808303818588803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b505050505050565b6097546060906000906001600160401b038111156106b6576106b6611efd565b6040519080825280602002602001820160405280156106df578160200160208202803683370190505b50905060005b6097548110156107f45760006097828154811061070457610704612252565b600091825260208220015460405163778e55f360e01b81526001600160a01b0388811660048301529182166024820181905293507f00000000000000000000000000000000000000000000000000000000000000009091169063778e55f390604401602060405180830381865afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190612268565b11156107e157808383815181106107c0576107c0612252565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50806107ec81612297565b9150506106e5565b5092915050565b610803611310565b61080b611540565b565b610815611310565b609a805477ffffffffffffffffffffffffffffffff00000000000000001916600160801b6001600160401b03948516026fffffffffffffffff0000000000000000191617600160401b9290931691909102919091179055565b600054610100900460ff161580801561088e5750600054600160ff909116105b806108a85750303b1580156108a8575060005460ff166001145b6109105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610933576000805461ff0019166101001790555b609b80546001600160a01b0319166001600160a01b038716179055609a80546001600160401b0386166fffffffffffffffffffffffffffffffff199091161769c35000000000000000001767ffffffffffffffff60801b191661249f60831b17905561099e86611592565b6109a883836115e4565b801561068e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6109fd611310565b609a805467ffffffffffffffff19166001600160401b0392909216919091179055565b610a28611310565b6001600160a01b03811660009081526099602052604090205460ff16610a905760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a206e6f7420696e20616c6c6f776c697374000000000000006044820152606401610907565b6001600160a01b038116600081815260996020908152604091829020805460ff1916905590519182527f8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb91015b60405180910390a150565b610af0611310565b61080b6000611592565b610b02611310565b60405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb35590610b4e9084906004016122b2565b600060405180830381600087803b158015610b6857600080fd5b505af1158015610b7c573d6000803e3d6000fd5b5050505050565b610b8b611310565b61080b6117b1565b610b9b61136a565b336001600160a01b03831614610bec5760405162461bcd60e51b815260206004820152601660248201527527b6b734a0ab299d1037b7363c9037b832b930ba37b960511b6044820152606401610907565b6001600160a01b03821660009081526099602052604090205460ff16610c4b5760405162461bcd60e51b815260206004820152601460248201527313db5b9a505594ce881b9bdd08185b1b1bddd95960621b6044820152606401610907565b610c54826117ee565b15610ca15760405162461bcd60e51b815260206004820152601c60248201527f4f6d6e694156533a20616c726561647920616e206f70657261746f72000000006044820152606401610907565b604051639926ee7d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639926ee7d90610cef90859085906004016122c5565b600060405180830381600087803b158015610d0957600080fd5b505af1158015610d1d573d6000803e3d6000fd5b5050609880546001810182556000919091527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8140180546001600160a01b0319166001600160a01b03861617905550610d729050565b6040516001600160a01b038316907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a25050565b610db261136a565b336001600160a01b0382161480610dd357506033546001600160a01b031633145b610e1f5760405162461bcd60e51b815260206004820152601f60248201527f4f6d6e694156533a206f6e6c79206f70657261746f72206f72206f776e6572006044820152606401610907565b610e28816117ee565b610e745760405162461bcd60e51b815260206004820152601860248201527f4f6d6e694156533a206e6f7420616e206f70657261746f7200000000000000006044820152606401610907565b6040516351b27a6d60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da90602401600060405180830381600087803b158015610ed757600080fd5b505af1158015610eeb573d6000803e3d6000fd5b50505050610ef881611858565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b610f37611310565b610f4182826115e4565b5050565b600080610f506113b0565b609b54609a546040519293506001600160a01b0390911691638dd9523c916001600160401b0316906333364ffb60e11b90610f8f9086906024016120fd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091528451610fcc90611505565b6040518463ffffffff1660e01b8152600401610fea93929190612310565b602060405180830381865afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b9190612268565b91505090565b6097546060906000906001600160401b0381111561105157611051611efd565b60405190808252806020026020018201604052801561107a578160200160208202803683370190505b50905060005b6097548110156110f3576097818154811061109d5761109d612252565b60009182526020909120015482516001600160a01b03909116908390839081106110c9576110c9612252565b6001600160a01b0390921660209283029190910190910152806110eb81612297565b915050611080565b50919050565b60606111036113b0565b905090565b611110611310565b6001600160a01b0381166111755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610907565b61117e81611592565b50565b60606097805480602002602001604051908101604052809291908181526020016000905b828210156111f457600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b0316818301528252600190920191016111a5565b50505050905090565b611205611310565b6001600160a01b0381166112535760405162461bcd60e51b81526020600482015260156024820152744f6d6e694156533a207a65726f206164647265737360581b6044820152606401610907565b6001600160a01b03811660009081526099602052604090205460ff16156112bc5760405162461bcd60e51b815260206004820152601d60248201527f4f6d6e694156533a20616c726561647920696e20616c6c6f776c6973740000006044820152606401610907565b6001600160a01b038116600081815260996020908152604091829020805460ff1916600117905590519182527fdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e759101610add565b6033546001600160a01b0316331461080b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610907565b60655460ff161561080b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610907565b6098546060906000906001600160401b038111156113d0576113d0611efd565b60405190808252806020026020018201604052801561141b57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816113ee5790505b50905060005b81518110156110f35760006098828154811061143f5761143f612252565b60009182526020822001546001600160a01b0316915061145e82611960565b9050600061146b83611a9c565b90506000816001600160601b0316836001600160601b03161161148f576000611499565b6114998284612346565b90506040518060600160405280856001600160a01b03168152602001826001600160601b03168152602001836001600160601b03168152508686815181106114e3576114e3612252565b60200260200101819052505050505080806114fd90612297565b915050611421565b609a546000906001600160401b03600160801b820481169161153091600160401b909104168461236e565b61153a919061239d565b92915050565b611548611ca6565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6115f060976000611d1e565b60005b818110156117ac57600083838381811061160f5761160f612252565b6116259260206040909202019081019150611d65565b6001600160a01b0316141561167c5760405162461bcd60e51b815260206004820152601960248201527f4f6d6e694156533a206e6f207a65726f207374726174656779000000000000006044820152606401610907565b60006116898260016123c8565b90505b82811015611756578383828181106116a6576116a6612252565b6116bc9260206040909202019081019150611d65565b6001600160a01b03168484848181106116d7576116d7612252565b6116ed9260206040909202019081019150611d65565b6001600160a01b031614156117445760405162461bcd60e51b815260206004820152601e60248201527f4f6d6e694156533a206e6f206475706c696361746520737472617465677900006044820152606401610907565b8061174e81612297565b91505061168c565b50609783838381811061176b5761176b612252565b8354600181018555600094855260209094206040909102929092019291909101905061179782826123e0565b505080806117a490612297565b9150506115f3565b505050565b6117b961136a565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115753390565b6000805b60985481101561184f57826001600160a01b03166098828154811061181957611819612252565b6000918252602090912001546001600160a01b0316141561183d5750600192915050565b8061184781612297565b9150506117f2565b50600092915050565b60005b609854811015610f4157816001600160a01b03166098828154811061188257611882612252565b6000918252602090912001546001600160a01b0316141561194e57609880546118ad9060019061242e565b815481106118bd576118bd612252565b600091825260209091200154609880546001600160a01b0390921691839081106118e9576118e9612252565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550609880548061192857611928612445565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b8061195881612297565b91505061185b565b6040805180820190915260008082526020820181905290819060005b609754811015611a93576097818154811061199957611999612252565b6000918252602080832060408051808201825293909101546001600160a01b03808216808652600160a01b9092046001600160601b031693850193909352905163778e55f360e01b8152898316600482015260248101919091529194507f0000000000000000000000000000000000000000000000000000000000000000169063778e55f390604401602060405180830381865afa158015611a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a639190612268565b9050611a73818460200151611cef565b611a7d908561245b565b9350508080611a8b90612297565b91505061197c565b50909392505050565b6040516367c0439f60e11b81526001600160a01b038281166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063cf80873e90602401600060405180830381865afa158015611b0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b33919081019061250b565b90925090506000805b8351811015611c9d576000848281518110611b5957611b59612252565b60200260200101519050611b92604051806040016040528060006001600160a01b0316815260200160006001600160601b031681525090565b60005b609754811015611c3e57826001600160a01b031660978281548110611bbc57611bbc612252565b6000918252602090912001546001600160a01b03161415611c2c5760978181548110611bea57611bea612252565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b0316918101919091529150611c3e565b80611c3681612297565b915050611b95565b5080516001600160a01b0316611c55575050611c8b565b611c7c858481518110611c6a57611c6a612252565b60200260200101518260200151611cef565b611c86908561245b565b935050505b80611c9581612297565b915050611b3c565b50949350505050565b60655460ff1661080b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610907565b6000670de0b6b3a7640000611d0d6001600160601b038416856125cf565b611d1791906125ee565b9392505050565b508054600082559060005260206000209081019061117e91905b80821115611d4c5760008155600101611d38565b5090565b6001600160a01b038116811461117e57600080fd5b600060208284031215611d7757600080fd5b8135611d1781611d50565b6020808252825182820181905260009190848201906040850190845b81811015611dc35783516001600160a01b031683529284019291840191600101611d9e565b50909695505050505050565b80356001600160401b0381168114611de657600080fd5b919050565b60008060408385031215611dfe57600080fd5b611e0783611dcf565b9150611e1560208401611dcf565b90509250929050565b60008083601f840112611e3057600080fd5b5081356001600160401b03811115611e4757600080fd5b6020830191508360208260061b8501011115611e6257600080fd5b9250929050565b600080600080600060808688031215611e8157600080fd5b8535611e8c81611d50565b94506020860135611e9c81611d50565b9350611eaa60408701611dcf565b925060608601356001600160401b03811115611ec557600080fd5b611ed188828901611e1e565b969995985093965092949392505050565b600060208284031215611ef457600080fd5b611d1782611dcf565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715611f3557611f35611efd565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611f6357611f63611efd565b604052919050565b60006001600160401b03831115611f8457611f84611efd565b611f97601f8401601f1916602001611f3b565b9050828152838383011115611fab57600080fd5b828260208301376000602084830101529392505050565b600060208284031215611fd457600080fd5b81356001600160401b03811115611fea57600080fd5b8201601f81018413611ffb57600080fd5b61200a84823560208401611f6b565b949350505050565b6000806040838503121561202557600080fd5b823561203081611d50565b915060208301356001600160401b038082111561204c57600080fd5b908401906060828703121561206057600080fd5b612068611f13565b82358281111561207757600080fd5b83019150601f8201871361208a57600080fd5b61209987833560208501611f6b565b815260208301356020820152604083013560408201528093505050509250929050565b600080602083850312156120cf57600080fd5b82356001600160401b038111156120e557600080fd5b6120f185828601611e1e565b90969095509350505050565b602080825282518282018190526000919060409081850190868401855b8281101561215f57815180516001600160a01b03168552868101516001600160601b03908116888701529086015116858501526060909301929085019060010161211a565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561215f57815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101612189565b6000815180845260005b818110156121e6576020818501810151868301820152016121ca565b818111156121f8576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160401b03808716835260018060a01b03861660208401526080604084015261223e60808401866121c0565b915080841660608401525095945050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561227a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156122ab576122ab612281565b5060010190565b602081526000611d1760208301846121c0565b60018060a01b03831681526040602082015260008251606060408401526122ef60a08401826121c0565b90506020840151606084015260408401516080840152809150509392505050565b60006001600160401b0380861683526060602084015261233360608401866121c0565b9150808416604084015250949350505050565b60006001600160601b038381169083168181101561236657612366612281565b039392505050565b60006001600160401b038083168185168183048111821515161561239457612394612281565b02949350505050565b60006001600160401b038083168185168083038211156123bf576123bf612281565b01949350505050565b600082198211156123db576123db612281565b500190565b81356123eb81611d50565b81546001600160a01b03199081166001600160a01b0392909216918217835560208401356001600160601b038116811461242457600080fd5b60a01b1617905550565b60008282101561244057612440612281565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001600160601b038083168185168083038211156123bf576123bf612281565b60006001600160401b0382111561249657612496611efd565b5060051b60200190565b600082601f8301126124b157600080fd5b815160206124c66124c18361247d565b611f3b565b82815260059290921b840181019181810190868411156124e557600080fd5b8286015b8481101561250057805183529183019183016124e9565b509695505050505050565b6000806040838503121561251e57600080fd5b82516001600160401b038082111561253557600080fd5b818501915085601f83011261254957600080fd5b815160206125596124c18361247d565b82815260059290921b8401810191818101908984111561257857600080fd5b948201945b8386101561259f57855161259081611d50565b8252948201949082019061257d565b918801519196509093505050808211156125b857600080fd5b506125c5858286016124a0565b9150509250929050565b60008160001904831182151516156125e9576125e9612281565b500290565b60008261260b57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212204a16ff5507b6076655a0d79b8381cd3bcca290330b69896305248b2e1805ee7f64736f6c634300080c0033",
}

// OmniAVSABI is the input ABI used to generate the binding from.
// Deprecated: Use OmniAVSMetaData.ABI instead.
var OmniAVSABI = OmniAVSMetaData.ABI

// OmniAVSBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OmniAVSMetaData.Bin instead.
var OmniAVSBin = OmniAVSMetaData.Bin

// DeployOmniAVS deploys a new Ethereum contract, binding an instance of OmniAVS to it.
func DeployOmniAVS(auth *bind.TransactOpts, backend bind.ContractBackend, delegationManager_ common.Address, avsDirectory_ common.Address) (common.Address, *types.Transaction, *OmniAVS, error) {
	parsed, err := OmniAVSMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OmniAVSBin), backend, delegationManager_, avsDirectory_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OmniAVS{OmniAVSCaller: OmniAVSCaller{contract: contract}, OmniAVSTransactor: OmniAVSTransactor{contract: contract}, OmniAVSFilterer: OmniAVSFilterer{contract: contract}}, nil
}

// OmniAVS is an auto generated Go binding around an Ethereum contract.
type OmniAVS struct {
	OmniAVSCaller     // Read-only binding to the contract
	OmniAVSTransactor // Write-only binding to the contract
	OmniAVSFilterer   // Log filterer for contract events
}

// OmniAVSCaller is an auto generated read-only Go binding around an Ethereum contract.
type OmniAVSCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OmniAVSTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OmniAVSFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmniAVSSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OmniAVSSession struct {
	Contract     *OmniAVS          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OmniAVSCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OmniAVSCallerSession struct {
	Contract *OmniAVSCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OmniAVSTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OmniAVSTransactorSession struct {
	Contract     *OmniAVSTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OmniAVSRaw is an auto generated low-level Go binding around an Ethereum contract.
type OmniAVSRaw struct {
	Contract *OmniAVS // Generic contract binding to access the raw methods on
}

// OmniAVSCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OmniAVSCallerRaw struct {
	Contract *OmniAVSCaller // Generic read-only contract binding to access the raw methods on
}

// OmniAVSTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OmniAVSTransactorRaw struct {
	Contract *OmniAVSTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOmniAVS creates a new instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVS(address common.Address, backend bind.ContractBackend) (*OmniAVS, error) {
	contract, err := bindOmniAVS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OmniAVS{OmniAVSCaller: OmniAVSCaller{contract: contract}, OmniAVSTransactor: OmniAVSTransactor{contract: contract}, OmniAVSFilterer: OmniAVSFilterer{contract: contract}}, nil
}

// NewOmniAVSCaller creates a new read-only instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSCaller(address common.Address, caller bind.ContractCaller) (*OmniAVSCaller, error) {
	contract, err := bindOmniAVS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OmniAVSCaller{contract: contract}, nil
}

// NewOmniAVSTransactor creates a new write-only instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSTransactor(address common.Address, transactor bind.ContractTransactor) (*OmniAVSTransactor, error) {
	contract, err := bindOmniAVS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OmniAVSTransactor{contract: contract}, nil
}

// NewOmniAVSFilterer creates a new log filterer instance of OmniAVS, bound to a specific deployed contract.
func NewOmniAVSFilterer(address common.Address, filterer bind.ContractFilterer) (*OmniAVSFilterer, error) {
	contract, err := bindOmniAVS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OmniAVSFilterer{contract: contract}, nil
}

// bindOmniAVS binds a generic wrapper to an already deployed contract.
func bindOmniAVS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OmniAVSMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniAVS *OmniAVSRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniAVS.Contract.OmniAVSCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniAVS *OmniAVSRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.Contract.OmniAVSTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniAVS *OmniAVSRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniAVS.Contract.OmniAVSTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmniAVS *OmniAVSCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmniAVS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmniAVS *OmniAVSTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmniAVS *OmniAVSTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmniAVS.Contract.contract.Transact(opts, method, params...)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSSession) AvsDirectory() (common.Address, error) {
	return _OmniAVS.Contract.AvsDirectory(&_OmniAVS.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) AvsDirectory() (common.Address, error) {
	return _OmniAVS.Contract.AvsDirectory(&_OmniAVS.CallOpts)
}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSCaller) FeeForSync(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "feeForSync")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSSession) FeeForSync() (*big.Int, error) {
	return _OmniAVS.Contract.FeeForSync(&_OmniAVS.CallOpts)
}

// FeeForSync is a free data retrieval call binding the contract method 0xb98912b0.
//
// Solidity: function feeForSync() view returns(uint256)
func (_OmniAVS *OmniAVSCallerSession) FeeForSync() (*big.Int, error) {
	return _OmniAVS.Contract.FeeForSync(&_OmniAVS.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "getOperatorRestakedStrategies", operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _OmniAVS.Contract.GetOperatorRestakedStrategies(&_OmniAVS.CallOpts, operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_OmniAVS *OmniAVSCallerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _OmniAVS.Contract.GetOperatorRestakedStrategies(&_OmniAVS.CallOpts, operator)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _OmniAVS.Contract.GetRestakeableStrategies(&_OmniAVS.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_OmniAVS *OmniAVSCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _OmniAVS.Contract.GetRestakeableStrategies(&_OmniAVS.CallOpts)
}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSCaller) IsInAllowlist(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "isInAllowlist", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSSession) IsInAllowlist(operator common.Address) (bool, error) {
	return _OmniAVS.Contract.IsInAllowlist(&_OmniAVS.CallOpts, operator)
}

// IsInAllowlist is a free data retrieval call binding the contract method 0x29d0fdc0.
//
// Solidity: function isInAllowlist(address operator) view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) IsInAllowlist(operator common.Address) (bool, error) {
	return _OmniAVS.Contract.IsInAllowlist(&_OmniAVS.CallOpts, operator)
}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSCaller) Omni(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "omni")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSSession) Omni() (common.Address, error) {
	return _OmniAVS.Contract.Omni(&_OmniAVS.CallOpts)
}

// Omni is a free data retrieval call binding the contract method 0x39acf9f1.
//
// Solidity: function omni() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) Omni() (common.Address, error) {
	return _OmniAVS.Contract.Omni(&_OmniAVS.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) OmniChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "omniChainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSSession) OmniChainId() (uint64, error) {
	return _OmniAVS.Contract.OmniChainId(&_OmniAVS.CallOpts)
}

// OmniChainId is a free data retrieval call binding the contract method 0x110ff5f1.
//
// Solidity: function omniChainId() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) OmniChainId() (uint64, error) {
	return _OmniAVS.Contract.OmniChainId(&_OmniAVS.CallOpts)
}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,uint96,uint96)[])
func (_OmniAVS *OmniAVSCaller) Operators(opts *bind.CallOpts) ([]IOmniAVSOperator, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "operators")

	if err != nil {
		return *new([]IOmniAVSOperator), err
	}

	out0 := *abi.ConvertType(out[0], new([]IOmniAVSOperator)).(*[]IOmniAVSOperator)

	return out0, err

}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,uint96,uint96)[])
func (_OmniAVS *OmniAVSSession) Operators() ([]IOmniAVSOperator, error) {
	return _OmniAVS.Contract.Operators(&_OmniAVS.CallOpts)
}

// Operators is a free data retrieval call binding the contract method 0xe673df8a.
//
// Solidity: function operators() view returns((address,uint96,uint96)[])
func (_OmniAVS *OmniAVSCallerSession) Operators() ([]IOmniAVSOperator, error) {
	return _OmniAVS.Contract.Operators(&_OmniAVS.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSSession) Owner() (common.Address, error) {
	return _OmniAVS.Contract.Owner(&_OmniAVS.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OmniAVS *OmniAVSCallerSession) Owner() (common.Address, error) {
	return _OmniAVS.Contract.Owner(&_OmniAVS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSSession) Paused() (bool, error) {
	return _OmniAVS.Contract.Paused(&_OmniAVS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OmniAVS *OmniAVSCallerSession) Paused() (bool, error) {
	return _OmniAVS.Contract.Paused(&_OmniAVS.CallOpts)
}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSCaller) StrategyParams(opts *bind.CallOpts) ([]IOmniAVSStrategyParam, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "strategyParams")

	if err != nil {
		return *new([]IOmniAVSStrategyParam), err
	}

	out0 := *abi.ConvertType(out[0], new([]IOmniAVSStrategyParam)).(*[]IOmniAVSStrategyParam)

	return out0, err

}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSSession) StrategyParams() ([]IOmniAVSStrategyParam, error) {
	return _OmniAVS.Contract.StrategyParams(&_OmniAVS.CallOpts)
}

// StrategyParams is a free data retrieval call binding the contract method 0xf57f33d0.
//
// Solidity: function strategyParams() view returns((address,uint96)[])
func (_OmniAVS *OmniAVSCallerSession) StrategyParams() ([]IOmniAVSStrategyParam, error) {
	return _OmniAVS.Contract.StrategyParams(&_OmniAVS.CallOpts)
}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) XcallBaseGasLimit(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "xcallBaseGasLimit")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSSession) XcallBaseGasLimit() (uint64, error) {
	return _OmniAVS.Contract.XcallBaseGasLimit(&_OmniAVS.CallOpts)
}

// XcallBaseGasLimit is a free data retrieval call binding the contract method 0x243d51c7.
//
// Solidity: function xcallBaseGasLimit() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) XcallBaseGasLimit() (uint64, error) {
	return _OmniAVS.Contract.XcallBaseGasLimit(&_OmniAVS.CallOpts)
}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSCaller) XcallGasLimitPerOperator(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _OmniAVS.contract.Call(opts, &out, "xcallGasLimitPerOperator")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSSession) XcallGasLimitPerOperator() (uint64, error) {
	return _OmniAVS.Contract.XcallGasLimitPerOperator(&_OmniAVS.CallOpts)
}

// XcallGasLimitPerOperator is a free data retrieval call binding the contract method 0x54c74ed3.
//
// Solidity: function xcallGasLimitPerOperator() view returns(uint64)
func (_OmniAVS *OmniAVSCallerSession) XcallGasLimitPerOperator() (uint64, error) {
	return _OmniAVS.Contract.XcallGasLimitPerOperator(&_OmniAVS.CallOpts)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) AddToAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "addToAllowlist", operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.AddToAllowlist(&_OmniAVS.TransactOpts, operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.AddToAllowlist(&_OmniAVS.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) DeregisterOperatorFromAVS(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "deregisterOperatorFromAVS", operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_OmniAVS *OmniAVSSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.DeregisterOperatorFromAVS(&_OmniAVS.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.DeregisterOperatorFromAVS(&_OmniAVS.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0x4dcff6e6.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, (address,uint96)[] strategyParams_) returns()
func (_OmniAVS *OmniAVSTransactor) Initialize(opts *bind.TransactOpts, owner_ common.Address, omni_ common.Address, omniChainId_ uint64, strategyParams_ []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "initialize", owner_, omni_, omniChainId_, strategyParams_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4dcff6e6.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, (address,uint96)[] strategyParams_) returns()
func (_OmniAVS *OmniAVSSession) Initialize(owner_ common.Address, omni_ common.Address, omniChainId_ uint64, strategyParams_ []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.Initialize(&_OmniAVS.TransactOpts, owner_, omni_, omniChainId_, strategyParams_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4dcff6e6.
//
// Solidity: function initialize(address owner_, address omni_, uint64 omniChainId_, (address,uint96)[] strategyParams_) returns()
func (_OmniAVS *OmniAVSTransactorSession) Initialize(owner_ common.Address, omni_ common.Address, omniChainId_ uint64, strategyParams_ []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.Initialize(&_OmniAVS.TransactOpts, owner_, omni_, omniChainId_, strategyParams_)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSSession) Pause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Pause(&_OmniAVS.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OmniAVS *OmniAVSTransactorSession) Pause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Pause(&_OmniAVS.TransactOpts)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSTransactor) RegisterOperatorToAVS(opts *bind.TransactOpts, operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "registerOperatorToAVS", operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.Contract.RegisterOperatorToAVS(&_OmniAVS.TransactOpts, operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_OmniAVS *OmniAVSTransactorSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _OmniAVS.Contract.RegisterOperatorToAVS(&_OmniAVS.TransactOpts, operator, operatorSignature)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactor) RemoveFromAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "removeFromAllowlist", operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.RemoveFromAllowlist(&_OmniAVS.TransactOpts, operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_OmniAVS *OmniAVSTransactorSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.RemoveFromAllowlist(&_OmniAVS.TransactOpts, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniAVS.Contract.RenounceOwnership(&_OmniAVS.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OmniAVS *OmniAVSTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OmniAVS.Contract.RenounceOwnership(&_OmniAVS.TransactOpts)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSTransactor) SetMetadataURI(opts *bind.TransactOpts, metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setMetadataURI", metadataURI)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSSession) SetMetadataURI(metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMetadataURI(&_OmniAVS.TransactOpts, metadataURI)
}

// SetMetadataURI is a paid mutator transaction binding the contract method 0x750521f5.
//
// Solidity: function setMetadataURI(string metadataURI) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetMetadataURI(metadataURI string) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetMetadataURI(&_OmniAVS.TransactOpts, metadataURI)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSTransactor) SetOmniChainId(opts *bind.TransactOpts, chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setOmniChainId", chainId)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSSession) SetOmniChainId(chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniChainId(&_OmniAVS.TransactOpts, chainId)
}

// SetOmniChainId is a paid mutator transaction binding the contract method 0x5c78b0e2.
//
// Solidity: function setOmniChainId(uint64 chainId) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetOmniChainId(chainId uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniChainId(&_OmniAVS.TransactOpts, chainId)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSTransactor) SetOmniPortal(opts *bind.TransactOpts, portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setOmniPortal", portal)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSSession) SetOmniPortal(portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniPortal(&_OmniAVS.TransactOpts, portal)
}

// SetOmniPortal is a paid mutator transaction binding the contract method 0x0c415884.
//
// Solidity: function setOmniPortal(address portal) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetOmniPortal(portal common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetOmniPortal(&_OmniAVS.TransactOpts, portal)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSTransactor) SetStrategyParams(opts *bind.TransactOpts, params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setStrategyParams", params)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSSession) SetStrategyParams(params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetStrategyParams(&_OmniAVS.TransactOpts, params)
}

// SetStrategyParams is a paid mutator transaction binding the contract method 0xae30f16d.
//
// Solidity: function setStrategyParams((address,uint96)[] params) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetStrategyParams(params []IOmniAVSStrategyParam) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetStrategyParams(&_OmniAVS.TransactOpts, params)
}

// SetXcallGasLimits is a paid mutator transaction binding the contract method 0x4a8fa459.
//
// Solidity: function setXcallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSTransactor) SetXcallGasLimits(opts *bind.TransactOpts, base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "setXcallGasLimits", base, perOperator)
}

// SetXcallGasLimits is a paid mutator transaction binding the contract method 0x4a8fa459.
//
// Solidity: function setXcallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSSession) SetXcallGasLimits(base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetXcallGasLimits(&_OmniAVS.TransactOpts, base, perOperator)
}

// SetXcallGasLimits is a paid mutator transaction binding the contract method 0x4a8fa459.
//
// Solidity: function setXcallGasLimits(uint64 base, uint64 perOperator) returns()
func (_OmniAVS *OmniAVSTransactorSession) SetXcallGasLimits(base uint64, perOperator uint64) (*types.Transaction, error) {
	return _OmniAVS.Contract.SetXcallGasLimits(&_OmniAVS.TransactOpts, base, perOperator)
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSTransactor) SyncWithOmni(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "syncWithOmni")
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSSession) SyncWithOmni() (*types.Transaction, error) {
	return _OmniAVS.Contract.SyncWithOmni(&_OmniAVS.TransactOpts)
}

// SyncWithOmni is a paid mutator transaction binding the contract method 0x13efbe92.
//
// Solidity: function syncWithOmni() payable returns()
func (_OmniAVS *OmniAVSTransactorSession) SyncWithOmni() (*types.Transaction, error) {
	return _OmniAVS.Contract.SyncWithOmni(&_OmniAVS.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.TransferOwnership(&_OmniAVS.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OmniAVS *OmniAVSTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OmniAVS.Contract.TransferOwnership(&_OmniAVS.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmniAVS.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSSession) Unpause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Unpause(&_OmniAVS.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OmniAVS *OmniAVSTransactorSession) Unpause() (*types.Transaction, error) {
	return _OmniAVS.Contract.Unpause(&_OmniAVS.TransactOpts)
}

// OmniAVSInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the OmniAVS contract.
type OmniAVSInitializedIterator struct {
	Event *OmniAVSInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSInitialized represents a Initialized event raised by the OmniAVS contract.
type OmniAVSInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) FilterInitialized(opts *bind.FilterOpts) (*OmniAVSInitializedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &OmniAVSInitializedIterator{contract: _OmniAVS.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *OmniAVSInitialized) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSInitialized)
				if err := _OmniAVS.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OmniAVS *OmniAVSFilterer) ParseInitialized(log types.Log) (*OmniAVSInitialized, error) {
	event := new(OmniAVSInitialized)
	if err := _OmniAVS.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the OmniAVS contract.
type OmniAVSOperatorAddedIterator struct {
	Event *OmniAVSOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorAdded represents a OperatorAdded event raised by the OmniAVS contract.
type OmniAVSOperatorAdded struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorAdded(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorAddedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorAddedIterator{contract: _OmniAVS.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorAdded, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorAdded)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorAdded(log types.Log) (*OmniAVSOperatorAdded, error) {
	event := new(OmniAVSOperatorAdded)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorAllowedIterator is returned from FilterOperatorAllowed and is used to iterate over the raw logs and unpacked data for OperatorAllowed events raised by the OmniAVS contract.
type OmniAVSOperatorAllowedIterator struct {
	Event *OmniAVSOperatorAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorAllowed represents a OperatorAllowed event raised by the OmniAVS contract.
type OmniAVSOperatorAllowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAllowed is a free log retrieval operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorAllowed(opts *bind.FilterOpts) (*OmniAVSOperatorAllowedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorAllowed")
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorAllowedIterator{contract: _OmniAVS.contract, event: "OperatorAllowed", logs: logs, sub: sub}, nil
}

// WatchOperatorAllowed is a free log subscription operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorAllowed(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorAllowed) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorAllowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorAllowed)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAllowed is a log parse operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorAllowed(log types.Log) (*OmniAVSOperatorAllowed, error) {
	event := new(OmniAVSOperatorAllowed)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorDisallowedIterator is returned from FilterOperatorDisallowed and is used to iterate over the raw logs and unpacked data for OperatorDisallowed events raised by the OmniAVS contract.
type OmniAVSOperatorDisallowedIterator struct {
	Event *OmniAVSOperatorDisallowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorDisallowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorDisallowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorDisallowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorDisallowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorDisallowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorDisallowed represents a OperatorDisallowed event raised by the OmniAVS contract.
type OmniAVSOperatorDisallowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorDisallowed is a free log retrieval operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorDisallowed(opts *bind.FilterOpts) (*OmniAVSOperatorDisallowedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorDisallowed")
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorDisallowedIterator{contract: _OmniAVS.contract, event: "OperatorDisallowed", logs: logs, sub: sub}, nil
}

// WatchOperatorDisallowed is a free log subscription operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorDisallowed(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorDisallowed) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorDisallowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorDisallowed)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDisallowed is a log parse operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorDisallowed(log types.Log) (*OmniAVSOperatorDisallowed, error) {
	event := new(OmniAVSOperatorDisallowed)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOperatorRemovedIterator is returned from FilterOperatorRemoved and is used to iterate over the raw logs and unpacked data for OperatorRemoved events raised by the OmniAVS contract.
type OmniAVSOperatorRemovedIterator struct {
	Event *OmniAVSOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOperatorRemoved represents a OperatorRemoved event raised by the OmniAVS contract.
type OmniAVSOperatorRemoved struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorRemoved is a free log retrieval operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) FilterOperatorRemoved(opts *bind.FilterOpts, operator []common.Address) (*OmniAVSOperatorRemovedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOperatorRemovedIterator{contract: _OmniAVS.contract, event: "OperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchOperatorRemoved is a free log subscription operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) WatchOperatorRemoved(opts *bind.WatchOpts, sink chan<- *OmniAVSOperatorRemoved, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOperatorRemoved)
				if err := _OmniAVS.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRemoved is a log parse operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_OmniAVS *OmniAVSFilterer) ParseOperatorRemoved(log types.Log) (*OmniAVSOperatorRemoved, error) {
	event := new(OmniAVSOperatorRemoved)
	if err := _OmniAVS.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OmniAVS contract.
type OmniAVSOwnershipTransferredIterator struct {
	Event *OmniAVSOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSOwnershipTransferred represents a OwnershipTransferred event raised by the OmniAVS contract.
type OmniAVSOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OmniAVSOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OmniAVSOwnershipTransferredIterator{contract: _OmniAVS.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OmniAVSOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSOwnershipTransferred)
				if err := _OmniAVS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OmniAVS *OmniAVSFilterer) ParseOwnershipTransferred(log types.Log) (*OmniAVSOwnershipTransferred, error) {
	event := new(OmniAVSOwnershipTransferred)
	if err := _OmniAVS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the OmniAVS contract.
type OmniAVSPausedIterator struct {
	Event *OmniAVSPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSPaused represents a Paused event raised by the OmniAVS contract.
type OmniAVSPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) FilterPaused(opts *bind.FilterOpts) (*OmniAVSPausedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &OmniAVSPausedIterator{contract: _OmniAVS.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *OmniAVSPaused) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSPaused)
				if err := _OmniAVS.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OmniAVS *OmniAVSFilterer) ParsePaused(log types.Log) (*OmniAVSPaused, error) {
	event := new(OmniAVSPaused)
	if err := _OmniAVS.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmniAVSUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the OmniAVS contract.
type OmniAVSUnpausedIterator struct {
	Event *OmniAVSUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmniAVSUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmniAVSUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmniAVSUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmniAVSUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmniAVSUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmniAVSUnpaused represents a Unpaused event raised by the OmniAVS contract.
type OmniAVSUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) FilterUnpaused(opts *bind.FilterOpts) (*OmniAVSUnpausedIterator, error) {

	logs, sub, err := _OmniAVS.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &OmniAVSUnpausedIterator{contract: _OmniAVS.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *OmniAVSUnpaused) (event.Subscription, error) {

	logs, sub, err := _OmniAVS.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmniAVSUnpaused)
				if err := _OmniAVS.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OmniAVS *OmniAVSFilterer) ParseUnpaused(log types.Log) (*OmniAVSUnpaused, error) {
	event := new(OmniAVSUnpaused)
	if err := _OmniAVS.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
