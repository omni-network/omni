// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getByID = `-- name: GetByID :one
SELECT id, privy_id, address FROM users.users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i User
	err := row.Scan(&i.ID, &i.PrivyID, &i.Address)
	return i, err
}

const getByPrivyID = `-- name: GetByPrivyID :one

SELECT id, privy_id, address FROM users.users
WHERE privy_id = $1 LIMIT 1
`

// No index required for GetByID as it is a primary key lookup.
func (q *Queries) GetByPrivyID(ctx context.Context, privyID string) (User, error) {
	row := q.db.QueryRow(ctx, getByPrivyID, privyID)
	var i User
	err := row.Scan(&i.ID, &i.PrivyID, &i.Address)
	return i, err
}

const getByWalletAddress = `-- name: GetByWalletAddress :one

SELECT id, privy_id, address FROM users.users
WHERE address = $1 LIMIT 1
`

// No index required for GetByPrivyID as it is a unique lookup (auto indexed).
func (q *Queries) GetByWalletAddress(ctx context.Context, address string) (User, error) {
	row := q.db.QueryRow(ctx, getByWalletAddress, address)
	var i User
	err := row.Scan(&i.ID, &i.PrivyID, &i.Address)
	return i, err
}

const insert = `-- name: Insert :one
INSERT INTO users.users (
    id, privy_id, address
) VALUES (
    $1, $2, $3
)
RETURNING id, privy_id, address
`

type InsertParams struct {
	ID      uuid.UUID
	PrivyID string
	Address string
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) (User, error) {
	row := q.db.QueryRow(ctx, insert, arg.ID, arg.PrivyID, arg.Address)
	var i User
	err := row.Scan(&i.ID, &i.PrivyID, &i.Address)
	return i, err
}

const listAll = `-- name: ListAll :many

SELECT id, privy_id, address FROM users.users
`

// No index required for GetByWalletAddress as it is a unique lookup (auto indexed).
func (q *Queries) ListAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.PrivyID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
