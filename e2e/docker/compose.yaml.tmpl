version: '2.4'
networks:
  {{ .NetworkName }}:
    labels:
      e2e: true
    driver: bridge
    {{- if .Network }}
    ipam:
      driver: default
      config:
      - subnet: {{ .NetworkCIDR }}
    {{- end }}

services:
{{- range .Nodes }}
  {{ .Name }}:
    labels:
      e2e: true
    container_name: {{ .Name }}
    image: {{ .Version }}
    init: true
    ports:
    - {{ if $.BindAll }}26656:{{end}}26656
    - {{ if .ProxyPort }}{{ .ProxyPort }}:{{ end }}26657
{{- if .PrometheusProxyPort }}
    - {{ .PrometheusProxyPort }}:26660
{{- end }}
    - 6060
    environment:
    - HALO_LOG_FORMAT={{ $.OmniLogFormat }}
    volumes:
    - ./{{ .Name }}:/halo
    - ./{{ index $.NodeOmniEVMs .Name }}/jwtsecret:/geth/jwtsecret
    depends_on:
      {{ index $.NodeOmniEVMs .Name }}:
        condition: service_healthy
    networks:
      {{ $.NetworkName }}:
        {{ if $.Network }}ipv4_address: {{ .InternalIP }}{{ end }}
{{end}}

{{- range .Anvils }}
  # Initialises geth files and folder from provided genesis file.
  {{ .Chain.Name }}:
    labels:
      e2e: true
    container_name: {{ .Chain.Name }}
    image: ghcr.io/foundry-rs/foundry:latest
    entrypoint:
      - anvil
      - --host=0.0.0.0
      - --chain-id={{ .Chain.ID }}
      - --block-time={{.Chain.BlockPeriod.Seconds}}
      - --silent
      {{ if .LoadState }}- --load-state=/anvil/state.json{{ end }}
    ports:
      - {{ if .ProxyPort }}{{ .ProxyPort }}:{{ end }}8545
    networks:
      {{ $.NetworkName }}:
        {{ if $.Network }}ipv4_address: {{ .InternalIP }}{{ end }}
    {{ if .LoadState }}
    volumes:
      - {{ .LoadState }}:/anvil/state.json
    {{ end }}
{{- end}}

  # Use geth as the omni EVMs.
{{- range .OmniEVMs }}
  # Initialises geth files and folder from provided genesis file.
  {{ .InstanceName }}-init:
    labels:
      e2e: true
    container_name: {{ .InstanceName }}-init
    image: "ethereum/client-go:{{ $.GethTag }}"
    command: {{ if eq .GcMode "archive" }}--state.scheme=hash {{ end }}--datadir=/geth init /geth/genesis.json
    volumes:
      - ./{{ .InstanceName }}:/geth
    networks:
      {{ $.NetworkName }}:

  {{ .InstanceName }}:
    labels:
      e2e: true
    container_name: {{ .InstanceName }}
    image: "ethereum/client-go:latest"
    command:
      - --config=/geth/config.toml
      - --http
      - --http.vhosts=*
      - --http.api=eth,net,web3
      - --http.addr=0.0.0.0
      - --http.corsdomain=*
      - --ws
      - --ws.api=eth,net,web3
      - --ws.addr=0.0.0.0
      - --ws.origins=*
      - --authrpc.vhosts=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.jwtsecret=/geth/jwtsecret
      - --datadir=/geth
      - --unlock=0x123463a4b065722e99115d6c222f267d9cabb524
      - --allow-insecure-unlock
      - --password=/geth/geth_password.txt
      - --nodiscover
      - --syncmode=full
      - --gcmode={{.GcMode}}
      - --nodekeyhex={{.NodeKeyHex}}
      - --miner.recommit=500ms
      - --nat=extip:{{.ExternalIP}}
    ports:
      - {{ if $.BindAll }}8551:{{end}}8551
      - {{ if .ProxyPort }}{{ .ProxyPort }}:{{ end }}8545
      - {{ if $.BindAll }}30303:{{end}}30303
      - 8546
    depends_on:
      {{ .InstanceName }}-init:
        condition: service_completed_successfully
    healthcheck:
      test: "nc -z localhost 8545"
      interval: 1s
      retries: 30
    volumes:
      - ./{{ .InstanceName }}:/geth
    networks:
      {{ $.NetworkName }}:
        {{ if $.Network }}ipv4_address: {{ .InternalIP }}{{ end }}
{{end}}

{{- if .Relayer }}
  relayer:
    labels:
      e2e: true
    container_name: relayer
    image: omniops/relayer:{{or .OmniTag "main"}}
    restart: unless-stopped # Restart on crash to mitigate startup race issues
    environment:
    - RELAYER_LOG_FORMAT={{ $.OmniLogFormat }}
    volumes:
      - ./relayer:/relayer
    networks:
      {{ $.NetworkName }}:
        {{ if $.Network }}ipv4_address: 10.186.73.200{{ end }}
{{end}}

{{- if .Monitor }}
  monitor:
    labels:
      e2e: true
    container_name: monitor
    image: omniops/monitor:{{or .OmniTag "main"}}
    restart: unless-stopped # Restart on crash to mitigate startup race issues
    environment:
      - LOG_FORMAT={{ $.OmniLogFormat }}
    volumes:
      - ./monitor:/monitor
    networks:
      {{ $.NetworkName }}:
        {{ if $.Network }}ipv4_address: 10.186.73.201{{ end }}
{{ end }}

{{- if .Prometheus }}
  prometheus:
    labels:
      e2e: true
    container_name: prometheus
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --enable-feature=exemplar-storage
      - --enable-feature=agent
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      {{ $.NetworkName }}:
        {{ if $.Network }}ipv4_address: 10.186.73.202{{ end }}
{{ end }}
