syntax = "proto3";

package halo2.attest.types;

import "cosmos/msg/v1/msg.proto";

option go_package = "halo2/attest/types";


// MsgService defines all the gRPC methods exposed by the attest module.
service MsgService {
  option (cosmos.msg.v1.service) = true;

  // ExecutionPayload submits a new finalised execution payload from consensus to the OmniEVM.
  rpc AddAggAttestation (MsgAggAttestation) returns (AddAggAttestationResponse);
}

// AddAggAttestationResponse is the empty response of AddAggAttestation.
message AddAggAttestationResponse {}

// AggAttestation aggregates multiple attestation by a validator set of a cross-chain Block.
message MsgAggAttestation {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;

  BlockHeader       block_header     = 2; // BlockHeader identifies the cross-chain Block
  uint64            validator_set_id = 3; // Unique identified of the validator set included in this aggregate.
  bytes             block_root       = 4; // Merkle root of the cross-chain Block
  repeated SigTuple signatures       = 5; // Validator signatures and public keys
}

// BlockHeader uniquely identifies a cross chain block.
message BlockHeader {
  uint64 chain_id    = 1; // Chain ID as per https://chainlist.org
  uint64 height      = 2; // Height of the block
  bytes  hash        = 3; // Hash of the block
}

// SigTuple is a validator signature and public key.
message SigTuple {
  bytes validator_address = 1; // Validator ethereum address; 20 bytes.
  bytes signature         = 2; // Validator signature over XBlockRoot; Ethereum 65 bytes [R || S || V] format.
}