// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package keeper

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type NetworkTable interface {
	Insert(ctx context.Context, network *Network) error
	InsertReturningId(ctx context.Context, network *Network) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, network *Network) error
	Save(ctx context.Context, network *Network) error
	Delete(ctx context.Context, network *Network) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Network, error)
	List(ctx context.Context, prefixKey NetworkIndexKey, opts ...ormlist.Option) (NetworkIterator, error)
	ListRange(ctx context.Context, from, to NetworkIndexKey, opts ...ormlist.Option) (NetworkIterator, error)
	DeleteBy(ctx context.Context, prefixKey NetworkIndexKey) error
	DeleteRange(ctx context.Context, from, to NetworkIndexKey) error

	doNotImplement()
}

type NetworkIterator struct {
	ormtable.Iterator
}

func (i NetworkIterator) Value() (*Network, error) {
	var network Network
	err := i.UnmarshalMessage(&network)
	return &network, err
}

type NetworkIndexKey interface {
	id() uint32
	values() []interface{}
	networkIndexKey()
}

// primary key starting index..
type NetworkPrimaryKey = NetworkIdIndexKey

type NetworkIdIndexKey struct {
	vs []interface{}
}

func (x NetworkIdIndexKey) id() uint32            { return 0 }
func (x NetworkIdIndexKey) values() []interface{} { return x.vs }
func (x NetworkIdIndexKey) networkIndexKey()      {}

func (this NetworkIdIndexKey) WithId(id uint64) NetworkIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type networkTable struct {
	table ormtable.AutoIncrementTable
}

func (this networkTable) Insert(ctx context.Context, network *Network) error {
	return this.table.Insert(ctx, network)
}

func (this networkTable) Update(ctx context.Context, network *Network) error {
	return this.table.Update(ctx, network)
}

func (this networkTable) Save(ctx context.Context, network *Network) error {
	return this.table.Save(ctx, network)
}

func (this networkTable) Delete(ctx context.Context, network *Network) error {
	return this.table.Delete(ctx, network)
}

func (this networkTable) InsertReturningId(ctx context.Context, network *Network) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, network)
}

func (this networkTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this networkTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this networkTable) Get(ctx context.Context, id uint64) (*Network, error) {
	var network Network
	found, err := this.table.PrimaryKey().Get(ctx, &network, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &network, nil
}

func (this networkTable) List(ctx context.Context, prefixKey NetworkIndexKey, opts ...ormlist.Option) (NetworkIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return NetworkIterator{it}, err
}

func (this networkTable) ListRange(ctx context.Context, from, to NetworkIndexKey, opts ...ormlist.Option) (NetworkIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return NetworkIterator{it}, err
}

func (this networkTable) DeleteBy(ctx context.Context, prefixKey NetworkIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this networkTable) DeleteRange(ctx context.Context, from, to NetworkIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this networkTable) doNotImplement() {}

var _ NetworkTable = networkTable{}

func NewNetworkTable(db ormtable.Schema) (NetworkTable, error) {
	table := db.GetTable(&Network{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Network{}).ProtoReflect().Descriptor().FullName()))
	}
	return networkTable{table.(ormtable.AutoIncrementTable)}, nil
}

type RegistryStore interface {
	NetworkTable() NetworkTable

	doNotImplement()
}

type registryStore struct {
	network NetworkTable
}

func (x registryStore) NetworkTable() NetworkTable {
	return x.network
}

func (registryStore) doNotImplement() {}

var _ RegistryStore = registryStore{}

func NewRegistryStore(db ormtable.Schema) (RegistryStore, error) {
	networkTable, err := NewNetworkTable(db)
	if err != nil {
		return nil, err
	}

	return registryStore{
		networkTable,
	}, nil
}
