// Code generated by MockGen. DO NOT EDIT.
// Source: ./expected_interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./expected_interfaces.go -package testutil -destination ./mock_interfaces.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/omni-network/omni/halo/portal/types"
	xchain "github.com/omni-network/omni/lib/xchain"
	gomock "go.uber.org/mock/gomock"
)

// MockPortal is a mock of Portal interface.
type MockPortal struct {
	ctrl     *gomock.Controller
	recorder *MockPortalMockRecorder
}

// MockPortalMockRecorder is the mock recorder for MockPortal.
type MockPortalMockRecorder struct {
	mock *MockPortal
}

// NewMockPortal creates a new mock instance.
func NewMockPortal(ctrl *gomock.Controller) *MockPortal {
	mock := &MockPortal{ctrl: ctrl}
	mock.recorder = &MockPortalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortal) EXPECT() *MockPortalMockRecorder {
	return m.recorder
}

// EmitMsg mocks base method.
func (m *MockPortal) EmitMsg(ctx types.Context, typ types0.MsgType, msgTypeID, destChainID uint64, shardID xchain.ShardID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmitMsg", ctx, typ, msgTypeID, destChainID, shardID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmitMsg indicates an expected call of EmitMsg.
func (mr *MockPortalMockRecorder) EmitMsg(ctx, typ, msgTypeID, destChainID, shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitMsg", reflect.TypeOf((*MockPortal)(nil).EmitMsg), ctx, typ, msgTypeID, destChainID, shardID)
}
