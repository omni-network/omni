// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: halo/halopb/v1/query.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HaloService_ApprovedFrom_FullMethodName = "/halo.halopb.v1.HaloService/ApprovedFrom"
)

// HaloServiceClient is the client API for HaloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HaloServiceClient interface {
	ApprovedFrom(ctx context.Context, in *ApprovedFromRequest, opts ...grpc.CallOption) (*ApprovedFromResponse, error)
}

type haloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHaloServiceClient(cc grpc.ClientConnInterface) HaloServiceClient {
	return &haloServiceClient{cc}
}

func (c *haloServiceClient) ApprovedFrom(ctx context.Context, in *ApprovedFromRequest, opts ...grpc.CallOption) (*ApprovedFromResponse, error) {
	out := new(ApprovedFromResponse)
	err := c.cc.Invoke(ctx, HaloService_ApprovedFrom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HaloServiceServer is the server API for HaloService service.
// All implementations must embed UnimplementedHaloServiceServer
// for forward compatibility
type HaloServiceServer interface {
	ApprovedFrom(context.Context, *ApprovedFromRequest) (*ApprovedFromResponse, error)
	mustEmbedUnimplementedHaloServiceServer()
}

// UnimplementedHaloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHaloServiceServer struct {
}

func (UnimplementedHaloServiceServer) ApprovedFrom(context.Context, *ApprovedFromRequest) (*ApprovedFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedFrom not implemented")
}
func (UnimplementedHaloServiceServer) mustEmbedUnimplementedHaloServiceServer() {}

// UnsafeHaloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HaloServiceServer will
// result in compilation errors.
type UnsafeHaloServiceServer interface {
	mustEmbedUnimplementedHaloServiceServer()
}

func RegisterHaloServiceServer(s grpc.ServiceRegistrar, srv HaloServiceServer) {
	s.RegisterService(&HaloService_ServiceDesc, srv)
}

func _HaloService_ApprovedFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovedFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaloServiceServer).ApprovedFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaloService_ApprovedFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaloServiceServer).ApprovedFrom(ctx, req.(*ApprovedFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HaloService_ServiceDesc is the grpc.ServiceDesc for HaloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HaloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "halo.halopb.v1.HaloService",
	HandlerType: (*HaloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApprovedFrom",
			Handler:    _HaloService_ApprovedFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "halo/halopb/v1/query.proto",
}
