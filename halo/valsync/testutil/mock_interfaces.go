// Code generated by MockGen. DO NOT EDIT.
// Source: ./expected_interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./expected_interfaces.go -package testutil -destination ./mock_interfaces.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cometbft/cometbft/abci/types"
	types0 "github.com/cosmos/cosmos-sdk/x/staking/types"
	types1 "github.com/omni-network/omni/halo/attest/types"
	gomock "go.uber.org/mock/gomock"
)

// MockStakingKeeper is a mock of StakingKeeper interface.
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper.
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance.
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// EndBlocker mocks base method.
func (m *MockStakingKeeper) EndBlocker(ctx context.Context) ([]types.ValidatorUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndBlocker", ctx)
	ret0, _ := ret[0].([]types.ValidatorUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndBlocker indicates an expected call of EndBlocker.
func (mr *MockStakingKeeperMockRecorder) EndBlocker(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBlocker", reflect.TypeOf((*MockStakingKeeper)(nil).EndBlocker), ctx)
}

// GetLastValidators mocks base method.
func (m *MockStakingKeeper) GetLastValidators(ctx context.Context) ([]types0.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastValidators", ctx)
	ret0, _ := ret[0].([]types0.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastValidators indicates an expected call of GetLastValidators.
func (mr *MockStakingKeeperMockRecorder) GetLastValidators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastValidators", reflect.TypeOf((*MockStakingKeeper)(nil).GetLastValidators), ctx)
}

// MockAttestKeeper is a mock of AttestKeeper interface.
type MockAttestKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAttestKeeperMockRecorder
}

// MockAttestKeeperMockRecorder is the mock recorder for MockAttestKeeper.
type MockAttestKeeperMockRecorder struct {
	mock *MockAttestKeeper
}

// NewMockAttestKeeper creates a new mock instance.
func NewMockAttestKeeper(ctrl *gomock.Controller) *MockAttestKeeper {
	mock := &MockAttestKeeper{ctrl: ctrl}
	mock.recorder = &MockAttestKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttestKeeper) EXPECT() *MockAttestKeeperMockRecorder {
	return m.recorder
}

// ListAttestationsFrom mocks base method.
func (m *MockAttestKeeper) ListAttestationsFrom(ctx context.Context, chainID, height, max uint64) ([]*types1.Attestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttestationsFrom", ctx, chainID, height, max)
	ret0, _ := ret[0].([]*types1.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttestationsFrom indicates an expected call of ListAttestationsFrom.
func (mr *MockAttestKeeperMockRecorder) ListAttestationsFrom(ctx, chainID, height, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttestationsFrom", reflect.TypeOf((*MockAttestKeeper)(nil).ListAttestationsFrom), ctx, chainID, height, max)
}

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// UpdateValidators mocks base method.
func (m *MockSubscriber) UpdateValidators(arg0 []types.ValidatorUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateValidators", arg0)
}

// UpdateValidators indicates an expected call of UpdateValidators.
func (mr *MockSubscriberMockRecorder) UpdateValidators(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidators", reflect.TypeOf((*MockSubscriber)(nil).UpdateValidators), arg0)
}
