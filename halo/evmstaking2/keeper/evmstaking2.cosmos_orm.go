// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package keeper

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type EVMEventsTable interface {
	Insert(ctx context.Context, evmevents *EVMEvents) error
	InsertReturningId(ctx context.Context, evmevents *EVMEvents) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, evmevents *EVMEvents) error
	Save(ctx context.Context, evmevents *EVMEvents) error
	Delete(ctx context.Context, evmevents *EVMEvents) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*EVMEvents, error)
	List(ctx context.Context, prefixKey EVMEventsIndexKey, opts ...ormlist.Option) (EVMEventsIterator, error)
	ListRange(ctx context.Context, from, to EVMEventsIndexKey, opts ...ormlist.Option) (EVMEventsIterator, error)
	DeleteBy(ctx context.Context, prefixKey EVMEventsIndexKey) error
	DeleteRange(ctx context.Context, from, to EVMEventsIndexKey) error

	doNotImplement()
}

type EVMEventsIterator struct {
	ormtable.Iterator
}

func (i EVMEventsIterator) Value() (*EVMEvents, error) {
	var evmevents EVMEvents
	err := i.UnmarshalMessage(&evmevents)
	return &evmevents, err
}

type EVMEventsIndexKey interface {
	id() uint32
	values() []interface{}
	evmeventsIndexKey()
}

// primary key starting index..
type EVMEventsPrimaryKey = EVMEventsIdIndexKey

type EVMEventsIdIndexKey struct {
	vs []interface{}
}

func (x EVMEventsIdIndexKey) id() uint32            { return 0 }
func (x EVMEventsIdIndexKey) values() []interface{} { return x.vs }
func (x EVMEventsIdIndexKey) evmeventsIndexKey()    {}

func (this EVMEventsIdIndexKey) WithId(id uint64) EVMEventsIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type evmeventsTable struct {
	table ormtable.AutoIncrementTable
}

func (this evmeventsTable) Insert(ctx context.Context, evmevents *EVMEvents) error {
	return this.table.Insert(ctx, evmevents)
}

func (this evmeventsTable) Update(ctx context.Context, evmevents *EVMEvents) error {
	return this.table.Update(ctx, evmevents)
}

func (this evmeventsTable) Save(ctx context.Context, evmevents *EVMEvents) error {
	return this.table.Save(ctx, evmevents)
}

func (this evmeventsTable) Delete(ctx context.Context, evmevents *EVMEvents) error {
	return this.table.Delete(ctx, evmevents)
}

func (this evmeventsTable) InsertReturningId(ctx context.Context, evmevents *EVMEvents) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, evmevents)
}

func (this evmeventsTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this evmeventsTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this evmeventsTable) Get(ctx context.Context, id uint64) (*EVMEvents, error) {
	var evmevents EVMEvents
	found, err := this.table.PrimaryKey().Get(ctx, &evmevents, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &evmevents, nil
}

func (this evmeventsTable) List(ctx context.Context, prefixKey EVMEventsIndexKey, opts ...ormlist.Option) (EVMEventsIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return EVMEventsIterator{it}, err
}

func (this evmeventsTable) ListRange(ctx context.Context, from, to EVMEventsIndexKey, opts ...ormlist.Option) (EVMEventsIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return EVMEventsIterator{it}, err
}

func (this evmeventsTable) DeleteBy(ctx context.Context, prefixKey EVMEventsIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this evmeventsTable) DeleteRange(ctx context.Context, from, to EVMEventsIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this evmeventsTable) doNotImplement() {}

var _ EVMEventsTable = evmeventsTable{}

func NewEVMEventsTable(db ormtable.Schema) (EVMEventsTable, error) {
	table := db.GetTable(&EVMEvents{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&EVMEvents{}).ProtoReflect().Descriptor().FullName()))
	}
	return evmeventsTable{table.(ormtable.AutoIncrementTable)}, nil
}

type Evmstaking2Store interface {
	EVMEventsTable() EVMEventsTable

	doNotImplement()
}

type evmstaking2Store struct {
	evmevents EVMEventsTable
}

func (x evmstaking2Store) EVMEventsTable() EVMEventsTable {
	return x.evmevents
}

func (evmstaking2Store) doNotImplement() {}

var _ Evmstaking2Store = evmstaking2Store{}

func NewEvmstaking2Store(db ormtable.Schema) (Evmstaking2Store, error) {
	evmeventsTable, err := NewEVMEventsTable(db)
	if err != nil {
		return nil, err
	}

	return evmstaking2Store{
		evmeventsTable,
	}, nil
}
