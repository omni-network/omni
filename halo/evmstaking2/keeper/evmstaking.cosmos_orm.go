// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package keeper

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type EVMEventTable interface {
	Insert(ctx context.Context, evmevent *EVMEvent) error
	InsertReturningId(ctx context.Context, evmevent *EVMEvent) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, evmevent *EVMEvent) error
	Save(ctx context.Context, evmevent *EVMEvent) error
	Delete(ctx context.Context, evmevent *EVMEvent) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*EVMEvent, error)
	List(ctx context.Context, prefixKey EVMEventIndexKey, opts ...ormlist.Option) (EVMEventIterator, error)
	ListRange(ctx context.Context, from, to EVMEventIndexKey, opts ...ormlist.Option) (EVMEventIterator, error)
	DeleteBy(ctx context.Context, prefixKey EVMEventIndexKey) error
	DeleteRange(ctx context.Context, from, to EVMEventIndexKey) error

	doNotImplement()
}

type EVMEventIterator struct {
	ormtable.Iterator
}

func (i EVMEventIterator) Value() (*EVMEvent, error) {
	var evmevent EVMEvent
	err := i.UnmarshalMessage(&evmevent)
	return &evmevent, err
}

type EVMEventIndexKey interface {
	id() uint32
	values() []interface{}
	evmeventIndexKey()
}

// primary key starting index..
type EVMEventPrimaryKey = EVMEventIdIndexKey

type EVMEventIdIndexKey struct {
	vs []interface{}
}

func (x EVMEventIdIndexKey) id() uint32            { return 0 }
func (x EVMEventIdIndexKey) values() []interface{} { return x.vs }
func (x EVMEventIdIndexKey) evmeventIndexKey()     {}

func (this EVMEventIdIndexKey) WithId(id uint64) EVMEventIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type evmeventTable struct {
	table ormtable.AutoIncrementTable
}

func (this evmeventTable) Insert(ctx context.Context, evmevent *EVMEvent) error {
	return this.table.Insert(ctx, evmevent)
}

func (this evmeventTable) Update(ctx context.Context, evmevent *EVMEvent) error {
	return this.table.Update(ctx, evmevent)
}

func (this evmeventTable) Save(ctx context.Context, evmevent *EVMEvent) error {
	return this.table.Save(ctx, evmevent)
}

func (this evmeventTable) Delete(ctx context.Context, evmevent *EVMEvent) error {
	return this.table.Delete(ctx, evmevent)
}

func (this evmeventTable) InsertReturningId(ctx context.Context, evmevent *EVMEvent) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, evmevent)
}

func (this evmeventTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this evmeventTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this evmeventTable) Get(ctx context.Context, id uint64) (*EVMEvent, error) {
	var evmevent EVMEvent
	found, err := this.table.PrimaryKey().Get(ctx, &evmevent, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &evmevent, nil
}

func (this evmeventTable) List(ctx context.Context, prefixKey EVMEventIndexKey, opts ...ormlist.Option) (EVMEventIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return EVMEventIterator{it}, err
}

func (this evmeventTable) ListRange(ctx context.Context, from, to EVMEventIndexKey, opts ...ormlist.Option) (EVMEventIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return EVMEventIterator{it}, err
}

func (this evmeventTable) DeleteBy(ctx context.Context, prefixKey EVMEventIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this evmeventTable) DeleteRange(ctx context.Context, from, to EVMEventIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this evmeventTable) doNotImplement() {}

var _ EVMEventTable = evmeventTable{}

func NewEVMEventTable(db ormtable.Schema) (EVMEventTable, error) {
	table := db.GetTable(&EVMEvent{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&EVMEvent{}).ProtoReflect().Descriptor().FullName()))
	}
	return evmeventTable{table.(ormtable.AutoIncrementTable)}, nil
}

type EvmstakingStore interface {
	EVMEventTable() EVMEventTable

	doNotImplement()
}

type evmstakingStore struct {
	evmevent EVMEventTable
}

func (x evmstakingStore) EVMEventTable() EVMEventTable {
	return x.evmevent
}

func (evmstakingStore) doNotImplement() {}

var _ EvmstakingStore = evmstakingStore{}

func NewEvmstakingStore(db ormtable.Schema) (EvmstakingStore, error) {
	evmeventTable, err := NewEVMEventTable(db)
	if err != nil {
		return nil, err
	}

	return evmstakingStore{
		evmeventTable,
	}, nil
}
