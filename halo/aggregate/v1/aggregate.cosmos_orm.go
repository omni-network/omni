// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package aggregatev1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type AggAttestationTable interface {
	Insert(ctx context.Context, aggAttestation *AggAttestation) error
	InsertReturningId(ctx context.Context, aggAttestation *AggAttestation) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, aggAttestation *AggAttestation) error
	Save(ctx context.Context, aggAttestation *AggAttestation) error
	Delete(ctx context.Context, aggAttestation *AggAttestation) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*AggAttestation, error)
	HasByChainIdHeightHash(ctx context.Context, chain_id uint64, height uint64, hash []byte) (found bool, err error)
	// GetByChainIdHeightHash returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByChainIdHeightHash(ctx context.Context, chain_id uint64, height uint64, hash []byte) (*AggAttestation, error)
	List(ctx context.Context, prefixKey AggAttestationIndexKey, opts ...ormlist.Option) (AggAttestationIterator, error)
	ListRange(ctx context.Context, from, to AggAttestationIndexKey, opts ...ormlist.Option) (AggAttestationIterator, error)
	DeleteBy(ctx context.Context, prefixKey AggAttestationIndexKey) error
	DeleteRange(ctx context.Context, from, to AggAttestationIndexKey) error

	doNotImplement()
}

type AggAttestationIterator struct {
	ormtable.Iterator
}

func (i AggAttestationIterator) Value() (*AggAttestation, error) {
	var aggAttestation AggAttestation
	err := i.UnmarshalMessage(&aggAttestation)
	return &aggAttestation, err
}

type AggAttestationIndexKey interface {
	id() uint32
	values() []interface{}
	aggAttestationIndexKey()
}

// primary key starting index..
type AggAttestationPrimaryKey = AggAttestationIdIndexKey

type AggAttestationIdIndexKey struct {
	vs []interface{}
}

func (x AggAttestationIdIndexKey) id() uint32              { return 0 }
func (x AggAttestationIdIndexKey) values() []interface{}   { return x.vs }
func (x AggAttestationIdIndexKey) aggAttestationIndexKey() {}

func (this AggAttestationIdIndexKey) WithId(id uint64) AggAttestationIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type AggAttestationChainIdHeightHashIndexKey struct {
	vs []interface{}
}

func (x AggAttestationChainIdHeightHashIndexKey) id() uint32              { return 1 }
func (x AggAttestationChainIdHeightHashIndexKey) values() []interface{}   { return x.vs }
func (x AggAttestationChainIdHeightHashIndexKey) aggAttestationIndexKey() {}

func (this AggAttestationChainIdHeightHashIndexKey) WithChainId(chain_id uint64) AggAttestationChainIdHeightHashIndexKey {
	this.vs = []interface{}{chain_id}
	return this
}

func (this AggAttestationChainIdHeightHashIndexKey) WithChainIdHeight(chain_id uint64, height uint64) AggAttestationChainIdHeightHashIndexKey {
	this.vs = []interface{}{chain_id, height}
	return this
}

func (this AggAttestationChainIdHeightHashIndexKey) WithChainIdHeightHash(chain_id uint64, height uint64, hash []byte) AggAttestationChainIdHeightHashIndexKey {
	this.vs = []interface{}{chain_id, height, hash}
	return this
}

type AggAttestationStatusChainIdHeightIndexKey struct {
	vs []interface{}
}

func (x AggAttestationStatusChainIdHeightIndexKey) id() uint32              { return 2 }
func (x AggAttestationStatusChainIdHeightIndexKey) values() []interface{}   { return x.vs }
func (x AggAttestationStatusChainIdHeightIndexKey) aggAttestationIndexKey() {}

func (this AggAttestationStatusChainIdHeightIndexKey) WithStatus(status AggStatus) AggAttestationStatusChainIdHeightIndexKey {
	this.vs = []interface{}{status}
	return this
}

func (this AggAttestationStatusChainIdHeightIndexKey) WithStatusChainId(status AggStatus, chain_id uint64) AggAttestationStatusChainIdHeightIndexKey {
	this.vs = []interface{}{status, chain_id}
	return this
}

func (this AggAttestationStatusChainIdHeightIndexKey) WithStatusChainIdHeight(status AggStatus, chain_id uint64, height uint64) AggAttestationStatusChainIdHeightIndexKey {
	this.vs = []interface{}{status, chain_id, height}
	return this
}

type aggAttestationTable struct {
	table ormtable.AutoIncrementTable
}

func (this aggAttestationTable) Insert(ctx context.Context, aggAttestation *AggAttestation) error {
	return this.table.Insert(ctx, aggAttestation)
}

func (this aggAttestationTable) Update(ctx context.Context, aggAttestation *AggAttestation) error {
	return this.table.Update(ctx, aggAttestation)
}

func (this aggAttestationTable) Save(ctx context.Context, aggAttestation *AggAttestation) error {
	return this.table.Save(ctx, aggAttestation)
}

func (this aggAttestationTable) Delete(ctx context.Context, aggAttestation *AggAttestation) error {
	return this.table.Delete(ctx, aggAttestation)
}

func (this aggAttestationTable) InsertReturningId(ctx context.Context, aggAttestation *AggAttestation) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, aggAttestation)
}

func (this aggAttestationTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this aggAttestationTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this aggAttestationTable) Get(ctx context.Context, id uint64) (*AggAttestation, error) {
	var aggAttestation AggAttestation
	found, err := this.table.PrimaryKey().Get(ctx, &aggAttestation, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &aggAttestation, nil
}

func (this aggAttestationTable) HasByChainIdHeightHash(ctx context.Context, chain_id uint64, height uint64, hash []byte) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		chain_id,
		height,
		hash,
	)
}

func (this aggAttestationTable) GetByChainIdHeightHash(ctx context.Context, chain_id uint64, height uint64, hash []byte) (*AggAttestation, error) {
	var aggAttestation AggAttestation
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &aggAttestation,
		chain_id,
		height,
		hash,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &aggAttestation, nil
}

func (this aggAttestationTable) List(ctx context.Context, prefixKey AggAttestationIndexKey, opts ...ormlist.Option) (AggAttestationIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AggAttestationIterator{it}, err
}

func (this aggAttestationTable) ListRange(ctx context.Context, from, to AggAttestationIndexKey, opts ...ormlist.Option) (AggAttestationIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AggAttestationIterator{it}, err
}

func (this aggAttestationTable) DeleteBy(ctx context.Context, prefixKey AggAttestationIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this aggAttestationTable) DeleteRange(ctx context.Context, from, to AggAttestationIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this aggAttestationTable) doNotImplement() {}

var _ AggAttestationTable = aggAttestationTable{}

func NewAggAttestationTable(db ormtable.Schema) (AggAttestationTable, error) {
	table := db.GetTable(&AggAttestation{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&AggAttestation{}).ProtoReflect().Descriptor().FullName()))
	}
	return aggAttestationTable{table.(ormtable.AutoIncrementTable)}, nil
}

type AttSignatureTable interface {
	Insert(ctx context.Context, attSignature *AttSignature) error
	InsertReturningId(ctx context.Context, attSignature *AttSignature) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, attSignature *AttSignature) error
	Save(ctx context.Context, attSignature *AttSignature) error
	Delete(ctx context.Context, attSignature *AttSignature) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*AttSignature, error)
	HasByAggIdValidatorAddress(ctx context.Context, agg_id uint64, validator_address []byte) (found bool, err error)
	// GetByAggIdValidatorAddress returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByAggIdValidatorAddress(ctx context.Context, agg_id uint64, validator_address []byte) (*AttSignature, error)
	List(ctx context.Context, prefixKey AttSignatureIndexKey, opts ...ormlist.Option) (AttSignatureIterator, error)
	ListRange(ctx context.Context, from, to AttSignatureIndexKey, opts ...ormlist.Option) (AttSignatureIterator, error)
	DeleteBy(ctx context.Context, prefixKey AttSignatureIndexKey) error
	DeleteRange(ctx context.Context, from, to AttSignatureIndexKey) error

	doNotImplement()
}

type AttSignatureIterator struct {
	ormtable.Iterator
}

func (i AttSignatureIterator) Value() (*AttSignature, error) {
	var attSignature AttSignature
	err := i.UnmarshalMessage(&attSignature)
	return &attSignature, err
}

type AttSignatureIndexKey interface {
	id() uint32
	values() []interface{}
	attSignatureIndexKey()
}

// primary key starting index..
type AttSignaturePrimaryKey = AttSignatureIdIndexKey

type AttSignatureIdIndexKey struct {
	vs []interface{}
}

func (x AttSignatureIdIndexKey) id() uint32            { return 0 }
func (x AttSignatureIdIndexKey) values() []interface{} { return x.vs }
func (x AttSignatureIdIndexKey) attSignatureIndexKey() {}

func (this AttSignatureIdIndexKey) WithId(id uint64) AttSignatureIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type AttSignatureAggIdValidatorAddressIndexKey struct {
	vs []interface{}
}

func (x AttSignatureAggIdValidatorAddressIndexKey) id() uint32            { return 1 }
func (x AttSignatureAggIdValidatorAddressIndexKey) values() []interface{} { return x.vs }
func (x AttSignatureAggIdValidatorAddressIndexKey) attSignatureIndexKey() {}

func (this AttSignatureAggIdValidatorAddressIndexKey) WithAggId(agg_id uint64) AttSignatureAggIdValidatorAddressIndexKey {
	this.vs = []interface{}{agg_id}
	return this
}

func (this AttSignatureAggIdValidatorAddressIndexKey) WithAggIdValidatorAddress(agg_id uint64, validator_address []byte) AttSignatureAggIdValidatorAddressIndexKey {
	this.vs = []interface{}{agg_id, validator_address}
	return this
}

type AttSignatureAggIdIndexKey struct {
	vs []interface{}
}

func (x AttSignatureAggIdIndexKey) id() uint32            { return 2 }
func (x AttSignatureAggIdIndexKey) values() []interface{} { return x.vs }
func (x AttSignatureAggIdIndexKey) attSignatureIndexKey() {}

func (this AttSignatureAggIdIndexKey) WithAggId(agg_id uint64) AttSignatureAggIdIndexKey {
	this.vs = []interface{}{agg_id}
	return this
}

type attSignatureTable struct {
	table ormtable.AutoIncrementTable
}

func (this attSignatureTable) Insert(ctx context.Context, attSignature *AttSignature) error {
	return this.table.Insert(ctx, attSignature)
}

func (this attSignatureTable) Update(ctx context.Context, attSignature *AttSignature) error {
	return this.table.Update(ctx, attSignature)
}

func (this attSignatureTable) Save(ctx context.Context, attSignature *AttSignature) error {
	return this.table.Save(ctx, attSignature)
}

func (this attSignatureTable) Delete(ctx context.Context, attSignature *AttSignature) error {
	return this.table.Delete(ctx, attSignature)
}

func (this attSignatureTable) InsertReturningId(ctx context.Context, attSignature *AttSignature) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, attSignature)
}

func (this attSignatureTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this attSignatureTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this attSignatureTable) Get(ctx context.Context, id uint64) (*AttSignature, error) {
	var attSignature AttSignature
	found, err := this.table.PrimaryKey().Get(ctx, &attSignature, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &attSignature, nil
}

func (this attSignatureTable) HasByAggIdValidatorAddress(ctx context.Context, agg_id uint64, validator_address []byte) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		agg_id,
		validator_address,
	)
}

func (this attSignatureTable) GetByAggIdValidatorAddress(ctx context.Context, agg_id uint64, validator_address []byte) (*AttSignature, error) {
	var attSignature AttSignature
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &attSignature,
		agg_id,
		validator_address,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &attSignature, nil
}

func (this attSignatureTable) List(ctx context.Context, prefixKey AttSignatureIndexKey, opts ...ormlist.Option) (AttSignatureIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AttSignatureIterator{it}, err
}

func (this attSignatureTable) ListRange(ctx context.Context, from, to AttSignatureIndexKey, opts ...ormlist.Option) (AttSignatureIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AttSignatureIterator{it}, err
}

func (this attSignatureTable) DeleteBy(ctx context.Context, prefixKey AttSignatureIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this attSignatureTable) DeleteRange(ctx context.Context, from, to AttSignatureIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this attSignatureTable) doNotImplement() {}

var _ AttSignatureTable = attSignatureTable{}

func NewAttSignatureTable(db ormtable.Schema) (AttSignatureTable, error) {
	table := db.GetTable(&AttSignature{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&AttSignature{}).ProtoReflect().Descriptor().FullName()))
	}
	return attSignatureTable{table.(ormtable.AutoIncrementTable)}, nil
}

type AggregateStore interface {
	AggAttestationTable() AggAttestationTable
	AttSignatureTable() AttSignatureTable

	doNotImplement()
}

type aggregateStore struct {
	aggAttestation AggAttestationTable
	attSignature   AttSignatureTable
}

func (x aggregateStore) AggAttestationTable() AggAttestationTable {
	return x.aggAttestation
}

func (x aggregateStore) AttSignatureTable() AttSignatureTable {
	return x.attSignature
}

func (aggregateStore) doNotImplement() {}

var _ AggregateStore = aggregateStore{}

func NewAggregateStore(db ormtable.Schema) (AggregateStore, error) {
	aggAttestationTable, err := NewAggAttestationTable(db)
	if err != nil {
		return nil, err
	}

	attSignatureTable, err := NewAttSignatureTable(db)
	if err != nil {
		return nil, err
	}

	return aggregateStore{
		aggAttestationTable,
		attSignatureTable,
	}, nil
}
