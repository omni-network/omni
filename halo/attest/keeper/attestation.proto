syntax = "proto3";

package halo.attest.keeper;

import "cosmos/orm/v1/orm.proto";

option go_package = "halo/attest/keeper";

enum Status {
  Unknown   = 0;
  Pending = 1;
  Approved  = 2;
}

message Attestation {
  option (cosmos.orm.v1.table) = {
    id: 1;
    primary_key: { fields: "id", auto_increment: true }
    index: {id: 1, fields: "attestation_root", unique: true} // Unique index on attestation root.
    index: {id: 2, fields: "status,chain_id,conf_level,block_offset" } // Allows querying by approved attestations by confLevel and offset.
    index: {id: 3, fields: "created_height"} // Allows querying/deleting by created height.
  };

  uint64 id = 1; // Auto-incremented ID

  uint64 chain_id         = 2; // Chain ID as per https://chainlist.org
  uint32 conf_level       = 3; // Confirmation level of the cross-chain block
  uint64 block_offset     = 4; // Offset of the cross-chain block
  uint64 block_height     = 5; // Height of the source-chain block
  bytes  block_hash       = 6; // Hash of the source-chain block
  bytes  msg_root         = 7; // Merkle root of all the messages in the cross-chain Block
  bytes  attestation_root = 8; // Attestation merkle root of the cross-chain Block
  uint32 status           = 9; // Status of the block; pending, approved.
  uint64 validator_set_id = 10; // Validator set that approved this attestation.
  uint64 created_height   = 11; // Consensus height at which this attestation was created.
  uint64 finalized_att_id = 12; // Approved finalized attestation for same chain_id and offset.
}

// Signature is the attestation signature of the validator over the block root.
message Signature {
  option (cosmos.orm.v1.table) = {
    id: 2;
    primary_key: { fields: "id", auto_increment: true }
    index: {id: 1, fields: "att_id,validator_address", unique: true} // Only allow one signature per validator per block.
    index: {id: 2, fields: "att_id"} // Allow querying by Attestation ID
  };

  uint64 id                 = 1; // Auto-incremented ID
  bytes  signature          = 3; // Validator signature over XBlockRoot; Ethereum 65 bytes [R || S || V] format.
  bytes  validator_address  = 2; // Validator ethereum address; 20 bytes.
  uint64 att_id             = 4; // Attestation ID to which this signature belongs.
}