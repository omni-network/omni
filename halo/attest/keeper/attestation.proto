syntax = "proto3";

package halo.attest.keeper;

import "cosmos/orm/v1/orm.proto";

option go_package = "halo/attest/keeper";

enum Status {
  Unknown   = 0;
  Pending = 1;
  Approved  = 2;
}

message Attestation {
  option (cosmos.orm.v1.table) = {
    id: 1;
    primary_key: { fields: "id", auto_increment: true }
    index: {id: 1, fields: "chain_id,offset,height,hash,attestation_root", unique: true} // Unique attestation.
    index: {id: 2, fields: "status,chain_id,offset" } // Allows querying by status and approved ranges.
    index: {id: 3, fields: "created_height"} // Allows querying/deleting by created height.
  };

  uint64 id = 1; // Auto-incremented ID

  uint64 chain_id         = 2; // Chain ID as per https://chainlist.org
  uint64 offset           = 3; // Offset of the cross chain block
  uint64 height           = 4; // Height of the source chain block
  bytes  hash             = 5; // Hash of the source chain block
  bytes  attestation_root = 6; // Attestation merkle root of the cross-chain Block
  int32  status           = 7; // Status of the block; pending, approved.
  uint64 validator_set_id = 8; // Validator set that approved this attestation.
  uint64 created_height   = 9; // Consensus height at which this attestation was created.
}

// Signature is the attestation signature of the validator over the block root.
message Signature {
  option (cosmos.orm.v1.table) = {
    id: 2;
    primary_key: { fields: "id", auto_increment: true }
    index: {id: 1, fields: "att_id,validator_address", unique: true} // Only allow one signature per validator per block.
    index: {id: 2, fields: "att_id"} // Allow querying by Attestation ID
  };

  uint64 id                 = 1; // Auto-incremented ID
  bytes  signature          = 3; // Validator signature over XBlockRoot; Ethereum 65 bytes [R || S || V] format.
  bytes  validator_address  = 2; // Validator ethereum address; 20 bytes.
  uint64 att_id             = 4; // Attestation ID to which this signature belongs.
}