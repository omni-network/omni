// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: halo/attest/types/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ApprovedFromRequest queries halo for approved attestations for the given chain_id
// and from the given height (inclusive). The response will contain at most max attestations sequentially
// following from_height.
type AttestationsFromRequest struct {
	ChainId    uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConfLevel  uint32 `protobuf:"varint,2,opt,name=conf_level,json=confLevel,proto3" json:"conf_level,omitempty"`
	FromOffset uint64 `protobuf:"varint,3,opt,name=from_offset,json=fromOffset,proto3" json:"from_offset,omitempty"`
}

func (m *AttestationsFromRequest) Reset()         { *m = AttestationsFromRequest{} }
func (m *AttestationsFromRequest) String() string { return proto.CompactTextString(m) }
func (*AttestationsFromRequest) ProtoMessage()    {}
func (*AttestationsFromRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{0}
}
func (m *AttestationsFromRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationsFromRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationsFromRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationsFromRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationsFromRequest.Merge(m, src)
}
func (m *AttestationsFromRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttestationsFromRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationsFromRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationsFromRequest proto.InternalMessageInfo

func (m *AttestationsFromRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *AttestationsFromRequest) GetConfLevel() uint32 {
	if m != nil {
		return m.ConfLevel
	}
	return 0
}

func (m *AttestationsFromRequest) GetFromOffset() uint64 {
	if m != nil {
		return m.FromOffset
	}
	return 0
}

type AttestationsFromResponse struct {
	Attestations []*Attestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *AttestationsFromResponse) Reset()         { *m = AttestationsFromResponse{} }
func (m *AttestationsFromResponse) String() string { return proto.CompactTextString(m) }
func (*AttestationsFromResponse) ProtoMessage()    {}
func (*AttestationsFromResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{1}
}
func (m *AttestationsFromResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationsFromResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationsFromResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationsFromResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationsFromResponse.Merge(m, src)
}
func (m *AttestationsFromResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttestationsFromResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationsFromResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationsFromResponse proto.InternalMessageInfo

func (m *AttestationsFromResponse) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type LatestAttestationRequest struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConfLevel uint32 `protobuf:"varint,2,opt,name=conf_level,json=confLevel,proto3" json:"conf_level,omitempty"`
}

func (m *LatestAttestationRequest) Reset()         { *m = LatestAttestationRequest{} }
func (m *LatestAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*LatestAttestationRequest) ProtoMessage()    {}
func (*LatestAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{2}
}
func (m *LatestAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestAttestationRequest.Merge(m, src)
}
func (m *LatestAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *LatestAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LatestAttestationRequest proto.InternalMessageInfo

func (m *LatestAttestationRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *LatestAttestationRequest) GetConfLevel() uint32 {
	if m != nil {
		return m.ConfLevel
	}
	return 0
}

type LatestAttestationResponse struct {
	Attestation *Attestation `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *LatestAttestationResponse) Reset()         { *m = LatestAttestationResponse{} }
func (m *LatestAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*LatestAttestationResponse) ProtoMessage()    {}
func (*LatestAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{3}
}
func (m *LatestAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestAttestationResponse.Merge(m, src)
}
func (m *LatestAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *LatestAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LatestAttestationResponse proto.InternalMessageInfo

func (m *LatestAttestationResponse) GetAttestation() *Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type EarliestAttestationRequest struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConfLevel uint32 `protobuf:"varint,2,opt,name=conf_level,json=confLevel,proto3" json:"conf_level,omitempty"`
}

func (m *EarliestAttestationRequest) Reset()         { *m = EarliestAttestationRequest{} }
func (m *EarliestAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*EarliestAttestationRequest) ProtoMessage()    {}
func (*EarliestAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{4}
}
func (m *EarliestAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EarliestAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EarliestAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EarliestAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarliestAttestationRequest.Merge(m, src)
}
func (m *EarliestAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *EarliestAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EarliestAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EarliestAttestationRequest proto.InternalMessageInfo

func (m *EarliestAttestationRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *EarliestAttestationRequest) GetConfLevel() uint32 {
	if m != nil {
		return m.ConfLevel
	}
	return 0
}

type EarliestAttestationResponse struct {
	Attestation *Attestation `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *EarliestAttestationResponse) Reset()         { *m = EarliestAttestationResponse{} }
func (m *EarliestAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*EarliestAttestationResponse) ProtoMessage()    {}
func (*EarliestAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{5}
}
func (m *EarliestAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EarliestAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EarliestAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EarliestAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarliestAttestationResponse.Merge(m, src)
}
func (m *EarliestAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *EarliestAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EarliestAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EarliestAttestationResponse proto.InternalMessageInfo

func (m *EarliestAttestationResponse) GetAttestation() *Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type ListAllAttestationsRequest struct {
	ChainId    uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConfLevel  uint32 `protobuf:"varint,2,opt,name=conf_level,json=confLevel,proto3" json:"conf_level,omitempty"`
	Status     uint32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	FromOffset uint64 `protobuf:"varint,4,opt,name=from_offset,json=fromOffset,proto3" json:"from_offset,omitempty"`
}

func (m *ListAllAttestationsRequest) Reset()         { *m = ListAllAttestationsRequest{} }
func (m *ListAllAttestationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAllAttestationsRequest) ProtoMessage()    {}
func (*ListAllAttestationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{6}
}
func (m *ListAllAttestationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAllAttestationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAllAttestationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAllAttestationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAllAttestationsRequest.Merge(m, src)
}
func (m *ListAllAttestationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAllAttestationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAllAttestationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAllAttestationsRequest proto.InternalMessageInfo

func (m *ListAllAttestationsRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ListAllAttestationsRequest) GetConfLevel() uint32 {
	if m != nil {
		return m.ConfLevel
	}
	return 0
}

func (m *ListAllAttestationsRequest) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ListAllAttestationsRequest) GetFromOffset() uint64 {
	if m != nil {
		return m.FromOffset
	}
	return 0
}

type ListAllAttestationsResponse struct {
	Attestations []*Attestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *ListAllAttestationsResponse) Reset()         { *m = ListAllAttestationsResponse{} }
func (m *ListAllAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAllAttestationsResponse) ProtoMessage()    {}
func (*ListAllAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{7}
}
func (m *ListAllAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAllAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAllAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAllAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAllAttestationsResponse.Merge(m, src)
}
func (m *ListAllAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAllAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAllAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAllAttestationsResponse proto.InternalMessageInfo

func (m *ListAllAttestationsResponse) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type WindowCompareRequest struct {
	ChainId      uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConfLevel    uint32 `protobuf:"varint,2,opt,name=conf_level,json=confLevel,proto3" json:"conf_level,omitempty"`
	AttestOffset uint64 `protobuf:"varint,3,opt,name=attest_offset,json=attestOffset,proto3" json:"attest_offset,omitempty"`
}

func (m *WindowCompareRequest) Reset()         { *m = WindowCompareRequest{} }
func (m *WindowCompareRequest) String() string { return proto.CompactTextString(m) }
func (*WindowCompareRequest) ProtoMessage()    {}
func (*WindowCompareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{8}
}
func (m *WindowCompareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WindowCompareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WindowCompareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WindowCompareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowCompareRequest.Merge(m, src)
}
func (m *WindowCompareRequest) XXX_Size() int {
	return m.Size()
}
func (m *WindowCompareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowCompareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WindowCompareRequest proto.InternalMessageInfo

func (m *WindowCompareRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *WindowCompareRequest) GetConfLevel() uint32 {
	if m != nil {
		return m.ConfLevel
	}
	return 0
}

func (m *WindowCompareRequest) GetAttestOffset() uint64 {
	if m != nil {
		return m.AttestOffset
	}
	return 0
}

type WindowCompareResponse struct {
	Cmp int32 `protobuf:"varint,1,opt,name=cmp,proto3" json:"cmp,omitempty"`
}

func (m *WindowCompareResponse) Reset()         { *m = WindowCompareResponse{} }
func (m *WindowCompareResponse) String() string { return proto.CompactTextString(m) }
func (*WindowCompareResponse) ProtoMessage()    {}
func (*WindowCompareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d3f1745081aabb, []int{9}
}
func (m *WindowCompareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WindowCompareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WindowCompareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WindowCompareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowCompareResponse.Merge(m, src)
}
func (m *WindowCompareResponse) XXX_Size() int {
	return m.Size()
}
func (m *WindowCompareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowCompareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WindowCompareResponse proto.InternalMessageInfo

func (m *WindowCompareResponse) GetCmp() int32 {
	if m != nil {
		return m.Cmp
	}
	return 0
}

func init() {
	proto.RegisterType((*AttestationsFromRequest)(nil), "halo.attest.types.AttestationsFromRequest")
	proto.RegisterType((*AttestationsFromResponse)(nil), "halo.attest.types.AttestationsFromResponse")
	proto.RegisterType((*LatestAttestationRequest)(nil), "halo.attest.types.LatestAttestationRequest")
	proto.RegisterType((*LatestAttestationResponse)(nil), "halo.attest.types.LatestAttestationResponse")
	proto.RegisterType((*EarliestAttestationRequest)(nil), "halo.attest.types.EarliestAttestationRequest")
	proto.RegisterType((*EarliestAttestationResponse)(nil), "halo.attest.types.EarliestAttestationResponse")
	proto.RegisterType((*ListAllAttestationsRequest)(nil), "halo.attest.types.ListAllAttestationsRequest")
	proto.RegisterType((*ListAllAttestationsResponse)(nil), "halo.attest.types.ListAllAttestationsResponse")
	proto.RegisterType((*WindowCompareRequest)(nil), "halo.attest.types.WindowCompareRequest")
	proto.RegisterType((*WindowCompareResponse)(nil), "halo.attest.types.WindowCompareResponse")
}

func init() { proto.RegisterFile("halo/attest/types/query.proto", fileDescriptor_93d3f1745081aabb) }

var fileDescriptor_93d3f1745081aabb = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x8e, 0x69, 0x37, 0xe0, 0x94, 0x4a, 0xab, 0xf9, 0xcb, 0x3c, 0x2d, 0x54, 0xe1, 0x82, 0xc2,
	0x20, 0x95, 0xc6, 0x0b, 0xb0, 0x21, 0x90, 0x90, 0x2a, 0x21, 0x22, 0x04, 0x12, 0x12, 0x54, 0xa6,
	0x75, 0xb5, 0x48, 0x49, 0x9c, 0xc5, 0xee, 0x60, 0x4f, 0x01, 0x4f, 0xc4, 0x35, 0x97, 0xbb, 0xe4,
	0x12, 0xb5, 0x2f, 0x82, 0xec, 0x84, 0xc9, 0x6d, 0xdc, 0xb5, 0x52, 0x7b, 0x17, 0x9f, 0x9f, 0xef,
	0xfb, 0x8e, 0xf2, 0x1d, 0x1b, 0xf6, 0x4f, 0x68, 0xcc, 0xbb, 0x54, 0x4a, 0x26, 0x64, 0x57, 0x9e,
	0x67, 0x4c, 0x74, 0x4f, 0xc7, 0x2c, 0x3f, 0x0f, 0xb2, 0x9c, 0x4b, 0x8e, 0x5b, 0x2a, 0x1d, 0x14,
	0xe9, 0x40, 0xa7, 0x09, 0xa9, 0x76, 0xc8, 0xef, 0x45, 0xb9, 0x2f, 0xe1, 0xfe, 0x91, 0x4e, 0x50,
	0x19, 0xf1, 0x54, 0xbc, 0xce, 0x79, 0x12, 0xb2, 0xd3, 0x31, 0x13, 0x12, 0xef, 0xc2, 0x8d, 0xc1,
	0x09, 0x8d, 0xd2, 0x7e, 0x34, 0x74, 0x51, 0x1b, 0x75, 0xea, 0xe1, 0x75, 0x7d, 0x7e, 0x33, 0xc4,
	0xfb, 0x00, 0x03, 0x9e, 0x8e, 0xfa, 0x31, 0x3b, 0x63, 0xb1, 0x7b, 0xad, 0x8d, 0x3a, 0xcd, 0xf0,
	0xa6, 0x8a, 0xf4, 0x54, 0x00, 0x3f, 0x80, 0xc6, 0x28, 0xe7, 0x49, 0x9f, 0x8f, 0x46, 0x82, 0x49,
	0xb7, 0xa6, 0x9b, 0x41, 0x85, 0xde, 0xea, 0x88, 0xff, 0x05, 0xdc, 0x2a, 0xab, 0xc8, 0x78, 0x2a,
	0x18, 0x3e, 0x86, 0x5b, 0xd4, 0xc8, 0xb9, 0xa8, 0x5d, 0xeb, 0x34, 0x0e, 0xbd, 0xa0, 0x32, 0x57,
	0x60, 0x40, 0x84, 0x33, 0x3d, 0xfe, 0x7b, 0x70, 0x7b, 0x54, 0x9d, 0xcd, 0x92, 0x75, 0xc7, 0xf2,
	0x3f, 0xc3, 0xae, 0x05, 0xb5, 0x94, 0xfd, 0x02, 0x1a, 0x86, 0x04, 0x8d, 0xbc, 0x5c, 0xb5, 0xd9,
	0xe2, 0x7f, 0x00, 0xf2, 0x8a, 0xe6, 0x71, 0xb4, 0x69, 0xd9, 0x7d, 0xd8, 0xb3, 0xe2, 0x6e, 0x4c,
	0xf8, 0x0f, 0x04, 0xa4, 0x17, 0x09, 0x79, 0x14, 0xc7, 0xe6, 0x5f, 0x5d, 0xdf, 0x47, 0xf7, 0x60,
	0x5b, 0x81, 0x8d, 0x85, 0xb6, 0x50, 0x33, 0x2c, 0x4f, 0xf3, 0xfe, 0xaa, 0x57, 0xfc, 0x45, 0x61,
	0xcf, 0x2a, 0x68, 0x83, 0x16, 0x1b, 0xc3, 0x9d, 0x8f, 0x51, 0x3a, 0xe4, 0xdf, 0x5e, 0xf2, 0x24,
	0xa3, 0x39, 0x5b, 0x7f, 0xda, 0x87, 0xd0, 0x2c, 0x18, 0x66, 0xf7, 0xa6, 0xa4, 0x2d, 0x27, 0x7b,
	0x0c, 0x77, 0xe7, 0x68, 0xcb, 0x99, 0x76, 0xa0, 0x36, 0x48, 0x32, 0x4d, 0xb9, 0x15, 0xaa, 0xcf,
	0xc3, 0x5f, 0x75, 0xd8, 0x7a, 0xa7, 0x6e, 0x06, 0x9c, 0xc0, 0xce, 0xfc, 0xba, 0xe1, 0x27, 0x57,
	0x4f, 0x6b, 0xde, 0x04, 0xe4, 0x60, 0xa5, 0xda, 0x42, 0x88, 0xef, 0xe0, 0x0c, 0x5a, 0x95, 0x3d,
	0xc1, 0x36, 0x8c, 0x45, 0x3b, 0x4a, 0x9e, 0xae, 0x56, 0x7c, 0xc9, 0x78, 0x06, 0xb7, 0x2d, 0x16,
	0xc7, 0xcf, 0x2c, 0x30, 0x8b, 0x57, 0x8c, 0x04, 0xab, 0x96, 0x9b, 0xbc, 0x16, 0x9f, 0x59, 0x79,
	0x17, 0x2f, 0x88, 0x95, 0xf7, 0x0a, 0xfb, 0xfa, 0x0e, 0x1e, 0x42, 0x73, 0xc6, 0x05, 0xf8, 0x91,
	0x05, 0xc2, 0x66, 0x4f, 0xd2, 0x59, 0x5e, 0xf8, 0x9f, 0xe5, 0xf8, 0xe0, 0xf7, 0xc4, 0x43, 0x17,
	0x13, 0x0f, 0xfd, 0x9d, 0x78, 0xe8, 0xe7, 0xd4, 0x73, 0x2e, 0xa6, 0x9e, 0xf3, 0x67, 0xea, 0x39,
	0x9f, 0x5a, 0x95, 0x17, 0xe5, 0xeb, 0xb6, 0x7e, 0x4f, 0x9e, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x0a, 0xd8, 0xf1, 0x12, 0x9f, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// AttestationsFrom queries halo for approved attestations for the given chain_id
	// and from the given height (inclusive). The response will contain at most max attestations sequentially
	// following from_height.
	AttestationsFrom(ctx context.Context, in *AttestationsFromRequest, opts ...grpc.CallOption) (*AttestationsFromResponse, error)
	// LatestAttestation queries halo for the latest approved attestations for the given chain_id.
	LatestAttestation(ctx context.Context, in *LatestAttestationRequest, opts ...grpc.CallOption) (*LatestAttestationResponse, error)
	// EarliestAttestation queries halo for the earliest approved attestation in consensus chain state for the given chain_id.
	EarliestAttestation(ctx context.Context, in *EarliestAttestationRequest, opts ...grpc.CallOption) (*EarliestAttestationResponse, error)
	// ListAllAttestations queries halo for all approved attestations in consensus chain state for the given chain_id.
	ListAllAttestations(ctx context.Context, in *ListAllAttestationsRequest, opts ...grpc.CallOption) (*ListAllAttestationsResponse, error)
	// WindowCompare compares the given chain height to the vote window.
	// It returns whether the request is behind (-1), or in (0), or after (1) the vote window.
	// The vote window is a configured number of blocks around the latest approved attestation.
	WindowCompare(ctx context.Context, in *WindowCompareRequest, opts ...grpc.CallOption) (*WindowCompareResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AttestationsFrom(ctx context.Context, in *AttestationsFromRequest, opts ...grpc.CallOption) (*AttestationsFromResponse, error) {
	out := new(AttestationsFromResponse)
	err := c.cc.Invoke(ctx, "/halo.attest.types.Query/AttestationsFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestAttestation(ctx context.Context, in *LatestAttestationRequest, opts ...grpc.CallOption) (*LatestAttestationResponse, error) {
	out := new(LatestAttestationResponse)
	err := c.cc.Invoke(ctx, "/halo.attest.types.Query/LatestAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EarliestAttestation(ctx context.Context, in *EarliestAttestationRequest, opts ...grpc.CallOption) (*EarliestAttestationResponse, error) {
	out := new(EarliestAttestationResponse)
	err := c.cc.Invoke(ctx, "/halo.attest.types.Query/EarliestAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAllAttestations(ctx context.Context, in *ListAllAttestationsRequest, opts ...grpc.CallOption) (*ListAllAttestationsResponse, error) {
	out := new(ListAllAttestationsResponse)
	err := c.cc.Invoke(ctx, "/halo.attest.types.Query/ListAllAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WindowCompare(ctx context.Context, in *WindowCompareRequest, opts ...grpc.CallOption) (*WindowCompareResponse, error) {
	out := new(WindowCompareResponse)
	err := c.cc.Invoke(ctx, "/halo.attest.types.Query/WindowCompare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// AttestationsFrom queries halo for approved attestations for the given chain_id
	// and from the given height (inclusive). The response will contain at most max attestations sequentially
	// following from_height.
	AttestationsFrom(context.Context, *AttestationsFromRequest) (*AttestationsFromResponse, error)
	// LatestAttestation queries halo for the latest approved attestations for the given chain_id.
	LatestAttestation(context.Context, *LatestAttestationRequest) (*LatestAttestationResponse, error)
	// EarliestAttestation queries halo for the earliest approved attestation in consensus chain state for the given chain_id.
	EarliestAttestation(context.Context, *EarliestAttestationRequest) (*EarliestAttestationResponse, error)
	// ListAllAttestations queries halo for all approved attestations in consensus chain state for the given chain_id.
	ListAllAttestations(context.Context, *ListAllAttestationsRequest) (*ListAllAttestationsResponse, error)
	// WindowCompare compares the given chain height to the vote window.
	// It returns whether the request is behind (-1), or in (0), or after (1) the vote window.
	// The vote window is a configured number of blocks around the latest approved attestation.
	WindowCompare(context.Context, *WindowCompareRequest) (*WindowCompareResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AttestationsFrom(ctx context.Context, req *AttestationsFromRequest) (*AttestationsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationsFrom not implemented")
}
func (*UnimplementedQueryServer) LatestAttestation(ctx context.Context, req *LatestAttestationRequest) (*LatestAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestAttestation not implemented")
}
func (*UnimplementedQueryServer) EarliestAttestation(ctx context.Context, req *EarliestAttestationRequest) (*EarliestAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarliestAttestation not implemented")
}
func (*UnimplementedQueryServer) ListAllAttestations(ctx context.Context, req *ListAllAttestationsRequest) (*ListAllAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAttestations not implemented")
}
func (*UnimplementedQueryServer) WindowCompare(ctx context.Context, req *WindowCompareRequest) (*WindowCompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WindowCompare not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AttestationsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.attest.types.Query/AttestationsFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationsFrom(ctx, req.(*AttestationsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.attest.types.Query/LatestAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestAttestation(ctx, req.(*LatestAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EarliestAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarliestAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EarliestAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.attest.types.Query/EarliestAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EarliestAttestation(ctx, req.(*EarliestAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAllAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllAttestationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAllAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.attest.types.Query/ListAllAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAllAttestations(ctx, req.(*ListAllAttestationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WindowCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WindowCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.attest.types.Query/WindowCompare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WindowCompare(ctx, req.(*WindowCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "halo.attest.types.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttestationsFrom",
			Handler:    _Query_AttestationsFrom_Handler,
		},
		{
			MethodName: "LatestAttestation",
			Handler:    _Query_LatestAttestation_Handler,
		},
		{
			MethodName: "EarliestAttestation",
			Handler:    _Query_EarliestAttestation_Handler,
		},
		{
			MethodName: "ListAllAttestations",
			Handler:    _Query_ListAllAttestations_Handler,
		},
		{
			MethodName: "WindowCompare",
			Handler:    _Query_WindowCompare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "halo/attest/types/query.proto",
}

func (m *AttestationsFromRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationsFromRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationsFromRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromOffset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FromOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfLevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConfLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttestationsFromResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationsFromResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationsFromResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LatestAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfLevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConfLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LatestAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EarliestAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EarliestAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EarliestAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfLevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConfLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EarliestAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EarliestAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EarliestAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAllAttestationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAllAttestationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAllAttestationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromOffset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FromOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfLevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConfLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAllAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAllAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAllAttestationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WindowCompareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowCompareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WindowCompareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttestOffset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AttestOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfLevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConfLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WindowCompareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowCompareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WindowCompareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cmp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Cmp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttestationsFromRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.ConfLevel != 0 {
		n += 1 + sovQuery(uint64(m.ConfLevel))
	}
	if m.FromOffset != 0 {
		n += 1 + sovQuery(uint64(m.FromOffset))
	}
	return n
}

func (m *AttestationsFromResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LatestAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.ConfLevel != 0 {
		n += 1 + sovQuery(uint64(m.ConfLevel))
	}
	return n
}

func (m *LatestAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EarliestAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.ConfLevel != 0 {
		n += 1 + sovQuery(uint64(m.ConfLevel))
	}
	return n
}

func (m *EarliestAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListAllAttestationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.ConfLevel != 0 {
		n += 1 + sovQuery(uint64(m.ConfLevel))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.FromOffset != 0 {
		n += 1 + sovQuery(uint64(m.FromOffset))
	}
	return n
}

func (m *ListAllAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *WindowCompareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.ConfLevel != 0 {
		n += 1 + sovQuery(uint64(m.ConfLevel))
	}
	if m.AttestOffset != 0 {
		n += 1 + sovQuery(uint64(m.AttestOffset))
	}
	return n
}

func (m *WindowCompareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmp != 0 {
		n += 1 + sovQuery(uint64(m.Cmp))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttestationsFromRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationsFromRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationsFromRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfLevel", wireType)
			}
			m.ConfLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromOffset", wireType)
			}
			m.FromOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationsFromResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationsFromResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationsFromResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfLevel", wireType)
			}
			m.ConfLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EarliestAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EarliestAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EarliestAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfLevel", wireType)
			}
			m.ConfLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EarliestAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EarliestAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EarliestAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAllAttestationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAllAttestationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAllAttestationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfLevel", wireType)
			}
			m.ConfLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromOffset", wireType)
			}
			m.FromOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAllAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAllAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAllAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowCompareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowCompareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowCompareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfLevel", wireType)
			}
			m.ConfLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestOffset", wireType)
			}
			m.AttestOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttestOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowCompareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowCompareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowCompareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmp", wireType)
			}
			m.Cmp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
