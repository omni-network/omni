// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package keeper

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type ValidatorSetTable interface {
	Insert(ctx context.Context, validatorSet *ValidatorSet) error
	InsertReturningId(ctx context.Context, validatorSet *ValidatorSet) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, validatorSet *ValidatorSet) error
	Save(ctx context.Context, validatorSet *ValidatorSet) error
	Delete(ctx context.Context, validatorSet *ValidatorSet) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*ValidatorSet, error)
	HasByAttestedCreatedHeight(ctx context.Context, attested bool, created_height uint64) (found bool, err error)
	// GetByAttestedCreatedHeight returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByAttestedCreatedHeight(ctx context.Context, attested bool, created_height uint64) (*ValidatorSet, error)
	List(ctx context.Context, prefixKey ValidatorSetIndexKey, opts ...ormlist.Option) (ValidatorSetIterator, error)
	ListRange(ctx context.Context, from, to ValidatorSetIndexKey, opts ...ormlist.Option) (ValidatorSetIterator, error)
	DeleteBy(ctx context.Context, prefixKey ValidatorSetIndexKey) error
	DeleteRange(ctx context.Context, from, to ValidatorSetIndexKey) error

	doNotImplement()
}

type ValidatorSetIterator struct {
	ormtable.Iterator
}

func (i ValidatorSetIterator) Value() (*ValidatorSet, error) {
	var validatorSet ValidatorSet
	err := i.UnmarshalMessage(&validatorSet)
	return &validatorSet, err
}

type ValidatorSetIndexKey interface {
	id() uint32
	values() []interface{}
	validatorSetIndexKey()
}

// primary key starting index..
type ValidatorSetPrimaryKey = ValidatorSetIdIndexKey

type ValidatorSetIdIndexKey struct {
	vs []interface{}
}

func (x ValidatorSetIdIndexKey) id() uint32            { return 0 }
func (x ValidatorSetIdIndexKey) values() []interface{} { return x.vs }
func (x ValidatorSetIdIndexKey) validatorSetIndexKey() {}

func (this ValidatorSetIdIndexKey) WithId(id uint64) ValidatorSetIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type ValidatorSetAttestedCreatedHeightIndexKey struct {
	vs []interface{}
}

func (x ValidatorSetAttestedCreatedHeightIndexKey) id() uint32            { return 2 }
func (x ValidatorSetAttestedCreatedHeightIndexKey) values() []interface{} { return x.vs }
func (x ValidatorSetAttestedCreatedHeightIndexKey) validatorSetIndexKey() {}

func (this ValidatorSetAttestedCreatedHeightIndexKey) WithAttested(attested bool) ValidatorSetAttestedCreatedHeightIndexKey {
	this.vs = []interface{}{attested}
	return this
}

func (this ValidatorSetAttestedCreatedHeightIndexKey) WithAttestedCreatedHeight(attested bool, created_height uint64) ValidatorSetAttestedCreatedHeightIndexKey {
	this.vs = []interface{}{attested, created_height}
	return this
}

type validatorSetTable struct {
	table ormtable.AutoIncrementTable
}

func (this validatorSetTable) Insert(ctx context.Context, validatorSet *ValidatorSet) error {
	return this.table.Insert(ctx, validatorSet)
}

func (this validatorSetTable) Update(ctx context.Context, validatorSet *ValidatorSet) error {
	return this.table.Update(ctx, validatorSet)
}

func (this validatorSetTable) Save(ctx context.Context, validatorSet *ValidatorSet) error {
	return this.table.Save(ctx, validatorSet)
}

func (this validatorSetTable) Delete(ctx context.Context, validatorSet *ValidatorSet) error {
	return this.table.Delete(ctx, validatorSet)
}

func (this validatorSetTable) InsertReturningId(ctx context.Context, validatorSet *ValidatorSet) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, validatorSet)
}

func (this validatorSetTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this validatorSetTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this validatorSetTable) Get(ctx context.Context, id uint64) (*ValidatorSet, error) {
	var validatorSet ValidatorSet
	found, err := this.table.PrimaryKey().Get(ctx, &validatorSet, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &validatorSet, nil
}

func (this validatorSetTable) HasByAttestedCreatedHeight(ctx context.Context, attested bool, created_height uint64) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		attested,
		created_height,
	)
}

func (this validatorSetTable) GetByAttestedCreatedHeight(ctx context.Context, attested bool, created_height uint64) (*ValidatorSet, error) {
	var validatorSet ValidatorSet
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &validatorSet,
		attested,
		created_height,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &validatorSet, nil
}

func (this validatorSetTable) List(ctx context.Context, prefixKey ValidatorSetIndexKey, opts ...ormlist.Option) (ValidatorSetIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ValidatorSetIterator{it}, err
}

func (this validatorSetTable) ListRange(ctx context.Context, from, to ValidatorSetIndexKey, opts ...ormlist.Option) (ValidatorSetIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ValidatorSetIterator{it}, err
}

func (this validatorSetTable) DeleteBy(ctx context.Context, prefixKey ValidatorSetIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this validatorSetTable) DeleteRange(ctx context.Context, from, to ValidatorSetIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this validatorSetTable) doNotImplement() {}

var _ ValidatorSetTable = validatorSetTable{}

func NewValidatorSetTable(db ormtable.Schema) (ValidatorSetTable, error) {
	table := db.GetTable(&ValidatorSet{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ValidatorSet{}).ProtoReflect().Descriptor().FullName()))
	}
	return validatorSetTable{table.(ormtable.AutoIncrementTable)}, nil
}

type ValidatorTable interface {
	Insert(ctx context.Context, validator *Validator) error
	InsertReturningId(ctx context.Context, validator *Validator) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, validator *Validator) error
	Save(ctx context.Context, validator *Validator) error
	Delete(ctx context.Context, validator *Validator) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Validator, error)
	List(ctx context.Context, prefixKey ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error)
	ListRange(ctx context.Context, from, to ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error)
	DeleteBy(ctx context.Context, prefixKey ValidatorIndexKey) error
	DeleteRange(ctx context.Context, from, to ValidatorIndexKey) error

	doNotImplement()
}

type ValidatorIterator struct {
	ormtable.Iterator
}

func (i ValidatorIterator) Value() (*Validator, error) {
	var validator Validator
	err := i.UnmarshalMessage(&validator)
	return &validator, err
}

type ValidatorIndexKey interface {
	id() uint32
	values() []interface{}
	validatorIndexKey()
}

// primary key starting index..
type ValidatorPrimaryKey = ValidatorIdIndexKey

type ValidatorIdIndexKey struct {
	vs []interface{}
}

func (x ValidatorIdIndexKey) id() uint32            { return 0 }
func (x ValidatorIdIndexKey) values() []interface{} { return x.vs }
func (x ValidatorIdIndexKey) validatorIndexKey()    {}

func (this ValidatorIdIndexKey) WithId(id uint64) ValidatorIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type ValidatorValsetIdIndexKey struct {
	vs []interface{}
}

func (x ValidatorValsetIdIndexKey) id() uint32            { return 2 }
func (x ValidatorValsetIdIndexKey) values() []interface{} { return x.vs }
func (x ValidatorValsetIdIndexKey) validatorIndexKey()    {}

func (this ValidatorValsetIdIndexKey) WithValsetId(valset_id uint64) ValidatorValsetIdIndexKey {
	this.vs = []interface{}{valset_id}
	return this
}

type validatorTable struct {
	table ormtable.AutoIncrementTable
}

func (this validatorTable) Insert(ctx context.Context, validator *Validator) error {
	return this.table.Insert(ctx, validator)
}

func (this validatorTable) Update(ctx context.Context, validator *Validator) error {
	return this.table.Update(ctx, validator)
}

func (this validatorTable) Save(ctx context.Context, validator *Validator) error {
	return this.table.Save(ctx, validator)
}

func (this validatorTable) Delete(ctx context.Context, validator *Validator) error {
	return this.table.Delete(ctx, validator)
}

func (this validatorTable) InsertReturningId(ctx context.Context, validator *Validator) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, validator)
}

func (this validatorTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this validatorTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this validatorTable) Get(ctx context.Context, id uint64) (*Validator, error) {
	var validator Validator
	found, err := this.table.PrimaryKey().Get(ctx, &validator, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &validator, nil
}

func (this validatorTable) List(ctx context.Context, prefixKey ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ValidatorIterator{it}, err
}

func (this validatorTable) ListRange(ctx context.Context, from, to ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ValidatorIterator{it}, err
}

func (this validatorTable) DeleteBy(ctx context.Context, prefixKey ValidatorIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this validatorTable) DeleteRange(ctx context.Context, from, to ValidatorIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this validatorTable) doNotImplement() {}

var _ ValidatorTable = validatorTable{}

func NewValidatorTable(db ormtable.Schema) (ValidatorTable, error) {
	table := db.GetTable(&Validator{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Validator{}).ProtoReflect().Descriptor().FullName()))
	}
	return validatorTable{table.(ormtable.AutoIncrementTable)}, nil
}

type ValsetStore interface {
	ValidatorSetTable() ValidatorSetTable
	ValidatorTable() ValidatorTable

	doNotImplement()
}

type valsetStore struct {
	validatorSet ValidatorSetTable
	validator    ValidatorTable
}

func (x valsetStore) ValidatorSetTable() ValidatorSetTable {
	return x.validatorSet
}

func (x valsetStore) ValidatorTable() ValidatorTable {
	return x.validator
}

func (valsetStore) doNotImplement() {}

var _ ValsetStore = valsetStore{}

func NewValsetStore(db ormtable.Schema) (ValsetStore, error) {
	validatorSetTable, err := NewValidatorSetTable(db)
	if err != nil {
		return nil, err
	}

	validatorTable, err := NewValidatorTable(db)
	if err != nil {
		return nil, err
	}

	return valsetStore{
		validatorSetTable,
		validatorTable,
	}, nil
}
