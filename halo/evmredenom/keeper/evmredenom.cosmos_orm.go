// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package keeper

import (
	context "context"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

// singleton store
type StatusTable interface {
	Get(ctx context.Context) (*Status, error)
	Save(ctx context.Context, status *Status) error
}

type statusTable struct {
	table ormtable.Table
}

var _ StatusTable = statusTable{}

func (x statusTable) Get(ctx context.Context) (*Status, error) {
	status := &Status{}
	_, err := x.table.Get(ctx, status)
	return status, err
}

func (x statusTable) Save(ctx context.Context, status *Status) error {
	return x.table.Save(ctx, status)
}

func NewStatusTable(db ormtable.Schema) (StatusTable, error) {
	table := db.GetTable(&Status{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Status{}).ProtoReflect().Descriptor().FullName()))
	}
	return &statusTable{table}, nil
}

type EvmredenomStore interface {
	StatusTable() StatusTable

	doNotImplement()
}

type evmredenomStore struct {
	status StatusTable
}

func (x evmredenomStore) StatusTable() StatusTable {
	return x.status
}

func (evmredenomStore) doNotImplement() {}

var _ EvmredenomStore = evmredenomStore{}

func NewEvmredenomStore(db ormtable.Schema) (EvmredenomStore, error) {
	statusTable, err := NewStatusTable(db)
	if err != nil {
		return nil, err
	}

	return evmredenomStore{
		statusTable,
	}, nil
}
