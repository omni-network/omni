// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchorinbox

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type EventMarkFilled struct {
	OrderId    ag_solanago.PublicKey
	OrderState ag_solanago.PublicKey
	Status     Status
}

func (obj EventMarkFilled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `OrderState` param:
	err = encoder.Encode(obj.OrderState)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EventMarkFilled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `OrderState`:
	err = decoder.Decode(&obj.OrderState)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

type EventOpened struct {
	OrderId    ag_solanago.PublicKey
	OrderState ag_solanago.PublicKey
	Status     Status
}

func (obj EventOpened) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `OrderState` param:
	err = encoder.Encode(obj.OrderState)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EventOpened) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `OrderState`:
	err = decoder.Decode(&obj.OrderState)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

type InboxState struct {
	Admin      ag_solanago.PublicKey
	DeployedAt uint64
	Bump       uint8
}

func (obj InboxState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `DeployedAt` param:
	err = encoder.Encode(obj.DeployedAt)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InboxState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `DeployedAt`:
	err = decoder.Decode(&obj.DeployedAt)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

type OpenParams struct {
	OrderId ag_solanago.PublicKey
	Nonce   uint64
	Deposit TokenAmount
	Expense TokenAmount
}

func (obj OpenParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Deposit` param:
	err = encoder.Encode(obj.Deposit)
	if err != nil {
		return err
	}
	// Serialize `Expense` param:
	err = encoder.Encode(obj.Expense)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Deposit`:
	err = decoder.Decode(&obj.Deposit)
	if err != nil {
		return err
	}
	// Deserialize `Expense`:
	err = decoder.Decode(&obj.Expense)
	if err != nil {
		return err
	}
	return nil
}

type OrderState struct {
	OrderId ag_solanago.PublicKey
	Status  Status
	Owner   ag_solanago.PublicKey
	Bump    uint8
	Deposit TokenAmount
	Expense TokenAmount
}

func (obj OrderState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Deposit` param:
	err = encoder.Encode(obj.Deposit)
	if err != nil {
		return err
	}
	// Serialize `Expense` param:
	err = encoder.Encode(obj.Expense)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Deposit`:
	err = decoder.Decode(&obj.Deposit)
	if err != nil {
		return err
	}
	// Deserialize `Expense`:
	err = decoder.Decode(&obj.Expense)
	if err != nil {
		return err
	}
	return nil
}

type Status ag_binary.BorshEnum

const (
	StatusInvalid Status = iota
	StatusPending
	StatusRejected
	StatusClosed
	StatusFilled
	StatusClaimed
)

func (value Status) String() string {
	switch value {
	case StatusInvalid:
		return "Invalid"
	case StatusPending:
		return "Pending"
	case StatusRejected:
		return "Rejected"
	case StatusClosed:
		return "Closed"
	case StatusFilled:
		return "Filled"
	case StatusClaimed:
		return "Claimed"
	default:
		return ""
	}
}

type TokenAmount struct {
	Token  ag_solanago.PublicKey
	Amount uint64
}

func (obj TokenAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
