// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchorinbox

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type EVMCall struct {
	Target   [20]uint8
	Selector [4]uint8
	Value    ag_binary.Uint128
	Params   []byte
}

func (obj EVMCall) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Target` param:
	err = encoder.Encode(obj.Target)
	if err != nil {
		return err
	}
	// Serialize `Selector` param:
	err = encoder.Encode(obj.Selector)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EVMCall) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Target`:
	err = decoder.Decode(&obj.Target)
	if err != nil {
		return err
	}
	// Deserialize `Selector`:
	err = decoder.Decode(&obj.Selector)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

type EVMTokenExpense struct {
	// The address that will do token.transferFrom(...) on fill. Required to set allowance
	Spender [20]uint8

	// The address of the token on the destination chain
	Token [20]uint8

	// The amount of the token to spend (max == uint96)
	Amount ag_binary.Uint128
}

func (obj EVMTokenExpense) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Spender` param:
	err = encoder.Encode(obj.Spender)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EVMTokenExpense) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Spender`:
	err = decoder.Decode(&obj.Spender)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type EventUpdated struct {
	OrderId ag_solanago.PublicKey
	Status  Status
}

func (obj EventUpdated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EventUpdated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

type InboxState struct {
	Admin           ag_solanago.PublicKey
	ChainId         uint64
	DeployedAt      uint64
	Bump            uint8
	CloseBufferSecs int64
}

func (obj InboxState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `DeployedAt` param:
	err = encoder.Encode(obj.DeployedAt)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `CloseBufferSecs` param:
	err = encoder.Encode(obj.CloseBufferSecs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InboxState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `DeployedAt`:
	err = decoder.Decode(&obj.DeployedAt)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `CloseBufferSecs`:
	err = decoder.Decode(&obj.CloseBufferSecs)
	if err != nil {
		return err
	}
	return nil
}

type OpenParams struct {
	OrderId       ag_solanago.PublicKey
	Nonce         uint64
	DepositAmount uint64
	DestChainId   uint64
	Call          EVMCall
	Expense       EVMTokenExpense
}

func (obj OpenParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `DepositAmount` param:
	err = encoder.Encode(obj.DepositAmount)
	if err != nil {
		return err
	}
	// Serialize `DestChainId` param:
	err = encoder.Encode(obj.DestChainId)
	if err != nil {
		return err
	}
	// Serialize `Call` param:
	err = encoder.Encode(obj.Call)
	if err != nil {
		return err
	}
	// Serialize `Expense` param:
	err = encoder.Encode(obj.Expense)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `DepositAmount`:
	err = decoder.Decode(&obj.DepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `DestChainId`:
	err = decoder.Decode(&obj.DestChainId)
	if err != nil {
		return err
	}
	// Deserialize `Call`:
	err = decoder.Decode(&obj.Call)
	if err != nil {
		return err
	}
	// Deserialize `Expense`:
	err = decoder.Decode(&obj.Expense)
	if err != nil {
		return err
	}
	return nil
}

type OrderState struct {
	OrderId       ag_solanago.PublicKey
	Status        Status
	Owner         ag_solanago.PublicKey
	CreatedAt     int64
	ClosableAt    int64
	ClaimableBy   ag_solanago.PublicKey
	Bump          uint8
	DepositAmount uint64
	DepositMint   ag_solanago.PublicKey
	DestChainId   uint64
	DestCall      EVMCall
	DestExpense   EVMTokenExpense
	FillHash      ag_solanago.PublicKey
}

func (obj OrderState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `ClosableAt` param:
	err = encoder.Encode(obj.ClosableAt)
	if err != nil {
		return err
	}
	// Serialize `ClaimableBy` param:
	err = encoder.Encode(obj.ClaimableBy)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `DepositAmount` param:
	err = encoder.Encode(obj.DepositAmount)
	if err != nil {
		return err
	}
	// Serialize `DepositMint` param:
	err = encoder.Encode(obj.DepositMint)
	if err != nil {
		return err
	}
	// Serialize `DestChainId` param:
	err = encoder.Encode(obj.DestChainId)
	if err != nil {
		return err
	}
	// Serialize `DestCall` param:
	err = encoder.Encode(obj.DestCall)
	if err != nil {
		return err
	}
	// Serialize `DestExpense` param:
	err = encoder.Encode(obj.DestExpense)
	if err != nil {
		return err
	}
	// Serialize `FillHash` param:
	err = encoder.Encode(obj.FillHash)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `ClosableAt`:
	err = decoder.Decode(&obj.ClosableAt)
	if err != nil {
		return err
	}
	// Deserialize `ClaimableBy`:
	err = decoder.Decode(&obj.ClaimableBy)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `DepositAmount`:
	err = decoder.Decode(&obj.DepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `DepositMint`:
	err = decoder.Decode(&obj.DepositMint)
	if err != nil {
		return err
	}
	// Deserialize `DestChainId`:
	err = decoder.Decode(&obj.DestChainId)
	if err != nil {
		return err
	}
	// Deserialize `DestCall`:
	err = decoder.Decode(&obj.DestCall)
	if err != nil {
		return err
	}
	// Deserialize `DestExpense`:
	err = decoder.Decode(&obj.DestExpense)
	if err != nil {
		return err
	}
	// Deserialize `FillHash`:
	err = decoder.Decode(&obj.FillHash)
	if err != nil {
		return err
	}
	return nil
}

type Status ag_binary.BorshEnum

const (
	StatusInvalid Status = iota
	StatusPending
	StatusRejected
	StatusClosed
	StatusFilled
	StatusClaimed
)

func (value Status) String() string {
	switch value {
	case StatusInvalid:
		return "Invalid"
	case StatusPending:
		return "Pending"
	case StatusRejected:
		return "Rejected"
	case StatusClosed:
		return "Closed"
	case StatusFilled:
		return "Filled"
	case StatusClaimed:
		return "Claimed"
	default:
		return ""
	}
}
