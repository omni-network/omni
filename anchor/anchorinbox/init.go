// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchorinbox

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize the inbox state
// This should be called only once, preferably by the upgrade authority.
type Init struct {
	ChainId     *uint64
	CloseBuffer *int64

	// [0] = [WRITE] inbox_state
	//
	// [1] = [WRITE, SIGNER] admin
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitInstructionBuilder creates a new `Init` instruction builder.
func NewInitInstructionBuilder() *Init {
	nd := &Init{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetChainId sets the "chain_id" parameter.
func (inst *Init) SetChainId(chain_id uint64) *Init {
	inst.ChainId = &chain_id
	return inst
}

// SetCloseBuffer sets the "close_buffer" parameter.
func (inst *Init) SetCloseBuffer(close_buffer int64) *Init {
	inst.CloseBuffer = &close_buffer
	return inst
}

// SetInboxStateAccount sets the "inbox_state" account.
func (inst *Init) SetInboxStateAccount(inboxState ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(inboxState).WRITE()
	return inst
}

func (inst *Init) findFindInboxStateAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: inbox_state
	seeds = append(seeds, []byte{byte(0x69), byte(0x6e), byte(0x62), byte(0x6f), byte(0x78), byte(0x5f), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindInboxStateAddressWithBumpSeed calculates InboxState account address with given seeds and a known bump seed.
func (inst *Init) FindInboxStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindInboxStateAddress(bumpSeed)
	return
}

func (inst *Init) MustFindInboxStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInboxStateAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindInboxStateAddress finds InboxState account address with given seeds.
func (inst *Init) FindInboxStateAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindInboxStateAddress(0)
	return
}

func (inst *Init) MustFindInboxStateAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInboxStateAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetInboxStateAccount gets the "inbox_state" account.
func (inst *Init) GetInboxStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *Init) SetAdminAccount(admin ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *Init) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Init) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Init) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst Init) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Init,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Init) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Init) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ChainId == nil {
			return errors.New("ChainId parameter is not set")
		}
		if inst.CloseBuffer == nil {
			return errors.New("CloseBuffer parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.InboxState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Init) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Init")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     ChainId", *inst.ChainId))
						paramsBranch.Child(ag_format.Param(" CloseBuffer", *inst.CloseBuffer))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   inbox_state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj Init) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `CloseBuffer` param:
	err = encoder.Encode(obj.CloseBuffer)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Init) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `CloseBuffer`:
	err = decoder.Decode(&obj.CloseBuffer)
	if err != nil {
		return err
	}
	return nil
}

// NewInitInstruction declares a new Init instruction with the provided parameters and accounts.
func NewInitInstruction(
	// Parameters:
	chain_id uint64,
	close_buffer int64,
	// Accounts:
	inboxState ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Init {
	return NewInitInstructionBuilder().
		SetChainId(chain_id).
		SetCloseBuffer(close_buffer).
		SetInboxStateAccount(inboxState).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram)
}
