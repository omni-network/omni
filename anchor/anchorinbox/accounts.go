// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchorinbox

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type InboxStateAccount struct {
	Admin      ag_solanago.PublicKey
	DeployedAt uint64
	Bump       uint8
}

var InboxStateAccountDiscriminator = [8]byte{161, 5, 9, 33, 125, 185, 63, 116}

func (obj InboxStateAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(InboxStateAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `DeployedAt` param:
	err = encoder.Encode(obj.DeployedAt)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InboxStateAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(InboxStateAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[161 5 9 33 125 185 63 116]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `DeployedAt`:
	err = decoder.Decode(&obj.DeployedAt)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

type OrderStateAccount struct {
	OrderId ag_solanago.PublicKey
	Status  Status
	Owner   ag_solanago.PublicKey
	Bump    uint8
	Deposit TokenAmount
	Expense TokenAmount
}

var OrderStateAccountDiscriminator = [8]byte{60, 123, 67, 162, 96, 43, 173, 225}

func (obj OrderStateAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderStateAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Deposit` param:
	err = encoder.Encode(obj.Deposit)
	if err != nil {
		return err
	}
	// Serialize `Expense` param:
	err = encoder.Encode(obj.Expense)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderStateAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderStateAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[60 123 67 162 96 43 173 225]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Deposit`:
	err = decoder.Decode(&obj.Deposit)
	if err != nil {
		return err
	}
	// Deserialize `Expense`:
	err = decoder.Decode(&obj.Expense)
	if err != nil {
		return err
	}
	return nil
}
