// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchorinbox

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type InboxStateAccount struct {
	Admin           ag_solanago.PublicKey
	ChainId         uint64
	DeployedAt      uint64
	Bump            uint8
	CloseBufferSecs int64
}

var InboxStateAccountDiscriminator = [8]byte{161, 5, 9, 33, 125, 185, 63, 116}

func (obj InboxStateAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(InboxStateAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `DeployedAt` param:
	err = encoder.Encode(obj.DeployedAt)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `CloseBufferSecs` param:
	err = encoder.Encode(obj.CloseBufferSecs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InboxStateAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(InboxStateAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[161 5 9 33 125 185 63 116]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `DeployedAt`:
	err = decoder.Decode(&obj.DeployedAt)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `CloseBufferSecs`:
	err = decoder.Decode(&obj.CloseBufferSecs)
	if err != nil {
		return err
	}
	return nil
}

type OrderStateAccount struct {
	OrderId       ag_solanago.PublicKey
	Status        Status
	Owner         ag_solanago.PublicKey
	CreatedAt     int64
	ClosableAt    int64
	ClaimableBy   ag_solanago.PublicKey
	Bump          uint8
	DepositAmount uint64
	DepositMint   ag_solanago.PublicKey
	DestChainId   uint64
	DestCall      EVMCall
	DestExpense   EVMTokenExpense
	FillHash      ag_solanago.PublicKey
	RejectReason  uint8
}

var OrderStateAccountDiscriminator = [8]byte{60, 123, 67, 162, 96, 43, 173, 225}

func (obj OrderStateAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderStateAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `ClosableAt` param:
	err = encoder.Encode(obj.ClosableAt)
	if err != nil {
		return err
	}
	// Serialize `ClaimableBy` param:
	err = encoder.Encode(obj.ClaimableBy)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `DepositAmount` param:
	err = encoder.Encode(obj.DepositAmount)
	if err != nil {
		return err
	}
	// Serialize `DepositMint` param:
	err = encoder.Encode(obj.DepositMint)
	if err != nil {
		return err
	}
	// Serialize `DestChainId` param:
	err = encoder.Encode(obj.DestChainId)
	if err != nil {
		return err
	}
	// Serialize `DestCall` param:
	err = encoder.Encode(obj.DestCall)
	if err != nil {
		return err
	}
	// Serialize `DestExpense` param:
	err = encoder.Encode(obj.DestExpense)
	if err != nil {
		return err
	}
	// Serialize `FillHash` param:
	err = encoder.Encode(obj.FillHash)
	if err != nil {
		return err
	}
	// Serialize `RejectReason` param:
	err = encoder.Encode(obj.RejectReason)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderStateAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderStateAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[60 123 67 162 96 43 173 225]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `ClosableAt`:
	err = decoder.Decode(&obj.ClosableAt)
	if err != nil {
		return err
	}
	// Deserialize `ClaimableBy`:
	err = decoder.Decode(&obj.ClaimableBy)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `DepositAmount`:
	err = decoder.Decode(&obj.DepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `DepositMint`:
	err = decoder.Decode(&obj.DepositMint)
	if err != nil {
		return err
	}
	// Deserialize `DestChainId`:
	err = decoder.Decode(&obj.DestChainId)
	if err != nil {
		return err
	}
	// Deserialize `DestCall`:
	err = decoder.Decode(&obj.DestCall)
	if err != nil {
		return err
	}
	// Deserialize `DestExpense`:
	err = decoder.Decode(&obj.DestExpense)
	if err != nil {
		return err
	}
	// Deserialize `FillHash`:
	err = decoder.Decode(&obj.FillHash)
	if err != nil {
		return err
	}
	// Deserialize `RejectReason`:
	err = decoder.Decode(&obj.RejectReason)
	if err != nil {
		return err
	}
	return nil
}
