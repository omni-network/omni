// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchorinbox

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
	ag_v5 "github.com/vmihailenco/msgpack/v5"
)

// Mark an order as filled
// This may only be called by the inbox admin.
type MarkFilled struct {
	OrderId *ag_solanago.PublicKey

	// [0] = [WRITE] order_state
	//
	// [1] = [] inbox_state
	//
	// [2] = [WRITE, SIGNER] admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMarkFilledInstructionBuilder creates a new `MarkFilled` instruction builder.
func NewMarkFilledInstructionBuilder() *MarkFilled {
	nd := &MarkFilled{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetOrderId sets the "_order_id" parameter.
func (inst *MarkFilled) SetOrderId(_order_id ag_solanago.PublicKey) *MarkFilled {
	inst.OrderId = &_order_id
	return inst
}

// SetOrderStateAccount sets the "order_state" account.
func (inst *MarkFilled) SetOrderStateAccount(orderState ag_solanago.PublicKey) *MarkFilled {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(orderState).WRITE()
	return inst
}

func (inst *MarkFilled) findFindOrderStateAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: order-state
	seeds = append(seeds, []byte{byte(0x6f), byte(0x72), byte(0x64), byte(0x65), byte(0x72), byte(0x2d), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})
	// arg: OrderId
	orderIdSeed, err := ag_v5.Marshal(inst.OrderId)
	if err != nil {
		return
	}
	seeds = append(seeds, orderIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindOrderStateAddressWithBumpSeed calculates OrderState account address with given seeds and a known bump seed.
func (inst *MarkFilled) FindOrderStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindOrderStateAddress(bumpSeed)
	return
}

func (inst *MarkFilled) MustFindOrderStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOrderStateAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindOrderStateAddress finds OrderState account address with given seeds.
func (inst *MarkFilled) FindOrderStateAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindOrderStateAddress(0)
	return
}

func (inst *MarkFilled) MustFindOrderStateAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOrderStateAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetOrderStateAccount gets the "order_state" account.
func (inst *MarkFilled) GetOrderStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetInboxStateAccount sets the "inbox_state" account.
func (inst *MarkFilled) SetInboxStateAccount(inboxState ag_solanago.PublicKey) *MarkFilled {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(inboxState)
	return inst
}

func (inst *MarkFilled) findFindInboxStateAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: inbox-state
	seeds = append(seeds, []byte{byte(0x69), byte(0x6e), byte(0x62), byte(0x6f), byte(0x78), byte(0x2d), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindInboxStateAddressWithBumpSeed calculates InboxState account address with given seeds and a known bump seed.
func (inst *MarkFilled) FindInboxStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindInboxStateAddress(bumpSeed)
	return
}

func (inst *MarkFilled) MustFindInboxStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInboxStateAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindInboxStateAddress finds InboxState account address with given seeds.
func (inst *MarkFilled) FindInboxStateAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindInboxStateAddress(0)
	return
}

func (inst *MarkFilled) MustFindInboxStateAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInboxStateAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetInboxStateAccount gets the "inbox_state" account.
func (inst *MarkFilled) GetInboxStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *MarkFilled) SetAdminAccount(admin ag_solanago.PublicKey) *MarkFilled {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *MarkFilled) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst MarkFilled) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MarkFilled,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MarkFilled) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MarkFilled) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OrderId == nil {
			return errors.New("OrderId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OrderState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.InboxState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *MarkFilled) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MarkFilled")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  OrderId", *inst.OrderId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("order_state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("inbox_state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      admin", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj MarkFilled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MarkFilled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}

// NewMarkFilledInstruction declares a new MarkFilled instruction with the provided parameters and accounts.
func NewMarkFilledInstruction(
	// Parameters:
	_order_id ag_solanago.PublicKey,
	// Accounts:
	orderState ag_solanago.PublicKey,
	inboxState ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *MarkFilled {
	return NewMarkFilledInstructionBuilder().
		SetOrderId(_order_id).
		SetOrderStateAccount(orderState).
		SetInboxStateAccount(inboxState).
		SetAdminAccount(admin)
}
