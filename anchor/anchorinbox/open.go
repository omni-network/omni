// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchorinbox

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Open a new order
type OpenInstruction struct {
	Params *OpenParams

	// [0] = [WRITE] order_state
	//
	// [1] = [WRITE, SIGNER] owner
	//
	// [2] = [WRITE] mint_account
	//
	// [3] = [WRITE] owner_token_account
	//
	// [4] = [WRITE] order_token_account
	//
	// [5] = [] token_program
	//
	// [6] = [] inbox_state
	//
	// [7] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOpenInstructionBuilder creates a new `OpenInstruction` instruction builder.
func NewOpenInstructionBuilder() *OpenInstruction {
	nd := &OpenInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	nd.AccountMetaSlice[5] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[7] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetParams sets the "params" parameter.
func (inst *OpenInstruction) SetParams(params OpenParams) *OpenInstruction {
	inst.Params = &params
	return inst
}

// SetOrderStateAccount sets the "order_state" account.
func (inst *OpenInstruction) SetOrderStateAccount(orderState ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(orderState).WRITE()
	return inst
}

func (inst *OpenInstruction) findFindOrderStateAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: order_state
	seeds = append(seeds, []byte{byte(0x6f), byte(0x72), byte(0x64), byte(0x65), byte(0x72), byte(0x5f), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})
	// arg: ParamsOrderId
	paramsOrderIdSeed, err := ag_binary.MarshalBorsh(inst.Params.OrderId)
	if err != nil {
		return
	}
	seeds = append(seeds, paramsOrderIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindOrderStateAddressWithBumpSeed calculates OrderState account address with given seeds and a known bump seed.
func (inst *OpenInstruction) FindOrderStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindOrderStateAddress(bumpSeed)
	return
}

func (inst *OpenInstruction) MustFindOrderStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOrderStateAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindOrderStateAddress finds OrderState account address with given seeds.
func (inst *OpenInstruction) FindOrderStateAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindOrderStateAddress(0)
	return
}

func (inst *OpenInstruction) MustFindOrderStateAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOrderStateAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetOrderStateAccount gets the "order_state" account.
func (inst *OpenInstruction) GetOrderStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *OpenInstruction) SetOwnerAccount(owner ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *OpenInstruction) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint_account" account.
func (inst *OpenInstruction) SetMintAccount(mintAccount ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintAccount).WRITE()
	return inst
}

// GetMintAccount gets the "mint_account" account.
func (inst *OpenInstruction) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerTokenAccount sets the "owner_token_account" account.
func (inst *OpenInstruction) SetOwnerTokenAccount(ownerTokenAccount ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ownerTokenAccount).WRITE()
	return inst
}

// GetOwnerTokenAccount gets the "owner_token_account" account.
func (inst *OpenInstruction) GetOwnerTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOrderTokenAccount sets the "order_token_account" account.
func (inst *OpenInstruction) SetOrderTokenAccount(orderTokenAccount ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(orderTokenAccount).WRITE()
	return inst
}

func (inst *OpenInstruction) findFindOrderTokenAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: order_token
	seeds = append(seeds, []byte{byte(0x6f), byte(0x72), byte(0x64), byte(0x65), byte(0x72), byte(0x5f), byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e)})
	// arg: ParamsOrderId
	paramsOrderIdSeed, err := ag_binary.MarshalBorsh(inst.Params.OrderId)
	if err != nil {
		return
	}
	seeds = append(seeds, paramsOrderIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindOrderTokenAddressWithBumpSeed calculates OrderTokenAccount account address with given seeds and a known bump seed.
func (inst *OpenInstruction) FindOrderTokenAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindOrderTokenAddress(bumpSeed)
	return
}

func (inst *OpenInstruction) MustFindOrderTokenAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOrderTokenAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindOrderTokenAddress finds OrderTokenAccount account address with given seeds.
func (inst *OpenInstruction) FindOrderTokenAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindOrderTokenAddress(0)
	return
}

func (inst *OpenInstruction) MustFindOrderTokenAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOrderTokenAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetOrderTokenAccount gets the "order_token_account" account.
func (inst *OpenInstruction) GetOrderTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *OpenInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *OpenInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInboxStateAccount sets the "inbox_state" account.
func (inst *OpenInstruction) SetInboxStateAccount(inboxState ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(inboxState)
	return inst
}

func (inst *OpenInstruction) findFindInboxStateAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: inbox_state
	seeds = append(seeds, []byte{byte(0x69), byte(0x6e), byte(0x62), byte(0x6f), byte(0x78), byte(0x5f), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindInboxStateAddressWithBumpSeed calculates InboxState account address with given seeds and a known bump seed.
func (inst *OpenInstruction) FindInboxStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindInboxStateAddress(bumpSeed)
	return
}

func (inst *OpenInstruction) MustFindInboxStateAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInboxStateAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindInboxStateAddress finds InboxState account address with given seeds.
func (inst *OpenInstruction) FindInboxStateAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindInboxStateAddress(0)
	return
}

func (inst *OpenInstruction) MustFindInboxStateAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInboxStateAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetInboxStateAccount gets the "inbox_state" account.
func (inst *OpenInstruction) GetInboxStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *OpenInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *OpenInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *OpenInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst OpenInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Open,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OpenInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OpenInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OrderState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OwnerTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OrderTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.InboxState is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *OpenInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Open")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   order_state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         mint_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  owner_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  order_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" token_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   inbox_state", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj OpenInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OpenInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewOpenInstruction declares a new Open instruction with the provided parameters and accounts.
func NewOpenInstruction(
	// Parameters:
	params OpenParams,
	// Accounts:
	orderState ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	mintAccount ag_solanago.PublicKey,
	ownerTokenAccount ag_solanago.PublicKey,
	orderTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	inboxState ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *OpenInstruction {
	return NewOpenInstructionBuilder().
		SetParams(params).
		SetOrderStateAccount(orderState).
		SetOwnerAccount(owner).
		SetMintAccount(mintAccount).
		SetOwnerTokenAccount(ownerTokenAccount).
		SetOrderTokenAccount(orderTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetInboxStateAccount(inboxState).
		SetSystemProgramAccount(systemProgram)
}
