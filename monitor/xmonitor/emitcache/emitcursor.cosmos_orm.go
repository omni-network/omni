// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package emitcache

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type EmitCursorTable interface {
	Insert(ctx context.Context, emitCursor *EmitCursor) error
	InsertReturningId(ctx context.Context, emitCursor *EmitCursor) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, emitCursor *EmitCursor) error
	Save(ctx context.Context, emitCursor *EmitCursor) error
	Delete(ctx context.Context, emitCursor *EmitCursor) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*EmitCursor, error)
	HasBySrcChainIdDstChainIdShardIdHeight(ctx context.Context, src_chain_id uint64, dst_chain_id uint64, shard_id uint64, height uint64) (found bool, err error)
	// GetBySrcChainIdDstChainIdShardIdHeight returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetBySrcChainIdDstChainIdShardIdHeight(ctx context.Context, src_chain_id uint64, dst_chain_id uint64, shard_id uint64, height uint64) (*EmitCursor, error)
	List(ctx context.Context, prefixKey EmitCursorIndexKey, opts ...ormlist.Option) (EmitCursorIterator, error)
	ListRange(ctx context.Context, from, to EmitCursorIndexKey, opts ...ormlist.Option) (EmitCursorIterator, error)
	DeleteBy(ctx context.Context, prefixKey EmitCursorIndexKey) error
	DeleteRange(ctx context.Context, from, to EmitCursorIndexKey) error

	doNotImplement()
}

type EmitCursorIterator struct {
	ormtable.Iterator
}

func (i EmitCursorIterator) Value() (*EmitCursor, error) {
	var emitCursor EmitCursor
	err := i.UnmarshalMessage(&emitCursor)
	return &emitCursor, err
}

type EmitCursorIndexKey interface {
	id() uint32
	values() []interface{}
	emitCursorIndexKey()
}

// primary key starting index..
type EmitCursorPrimaryKey = EmitCursorIdIndexKey

type EmitCursorIdIndexKey struct {
	vs []interface{}
}

func (x EmitCursorIdIndexKey) id() uint32            { return 0 }
func (x EmitCursorIdIndexKey) values() []interface{} { return x.vs }
func (x EmitCursorIdIndexKey) emitCursorIndexKey()   {}

func (this EmitCursorIdIndexKey) WithId(id uint64) EmitCursorIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey struct {
	vs []interface{}
}

func (x EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey) id() uint32            { return 2 }
func (x EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey) values() []interface{} { return x.vs }
func (x EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey) emitCursorIndexKey()   {}

func (this EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey) WithSrcChainId(src_chain_id uint64) EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey {
	this.vs = []interface{}{src_chain_id}
	return this
}

func (this EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey) WithSrcChainIdDstChainId(src_chain_id uint64, dst_chain_id uint64) EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey {
	this.vs = []interface{}{src_chain_id, dst_chain_id}
	return this
}

func (this EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey) WithSrcChainIdDstChainIdShardId(src_chain_id uint64, dst_chain_id uint64, shard_id uint64) EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey {
	this.vs = []interface{}{src_chain_id, dst_chain_id, shard_id}
	return this
}

func (this EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey) WithSrcChainIdDstChainIdShardIdHeight(src_chain_id uint64, dst_chain_id uint64, shard_id uint64, height uint64) EmitCursorSrcChainIdDstChainIdShardIdHeightIndexKey {
	this.vs = []interface{}{src_chain_id, dst_chain_id, shard_id, height}
	return this
}

type emitCursorTable struct {
	table ormtable.AutoIncrementTable
}

func (this emitCursorTable) Insert(ctx context.Context, emitCursor *EmitCursor) error {
	return this.table.Insert(ctx, emitCursor)
}

func (this emitCursorTable) Update(ctx context.Context, emitCursor *EmitCursor) error {
	return this.table.Update(ctx, emitCursor)
}

func (this emitCursorTable) Save(ctx context.Context, emitCursor *EmitCursor) error {
	return this.table.Save(ctx, emitCursor)
}

func (this emitCursorTable) Delete(ctx context.Context, emitCursor *EmitCursor) error {
	return this.table.Delete(ctx, emitCursor)
}

func (this emitCursorTable) InsertReturningId(ctx context.Context, emitCursor *EmitCursor) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, emitCursor)
}

func (this emitCursorTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this emitCursorTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this emitCursorTable) Get(ctx context.Context, id uint64) (*EmitCursor, error) {
	var emitCursor EmitCursor
	found, err := this.table.PrimaryKey().Get(ctx, &emitCursor, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &emitCursor, nil
}

func (this emitCursorTable) HasBySrcChainIdDstChainIdShardIdHeight(ctx context.Context, src_chain_id uint64, dst_chain_id uint64, shard_id uint64, height uint64) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		src_chain_id,
		dst_chain_id,
		shard_id,
		height,
	)
}

func (this emitCursorTable) GetBySrcChainIdDstChainIdShardIdHeight(ctx context.Context, src_chain_id uint64, dst_chain_id uint64, shard_id uint64, height uint64) (*EmitCursor, error) {
	var emitCursor EmitCursor
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &emitCursor,
		src_chain_id,
		dst_chain_id,
		shard_id,
		height,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &emitCursor, nil
}

func (this emitCursorTable) List(ctx context.Context, prefixKey EmitCursorIndexKey, opts ...ormlist.Option) (EmitCursorIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return EmitCursorIterator{it}, err
}

func (this emitCursorTable) ListRange(ctx context.Context, from, to EmitCursorIndexKey, opts ...ormlist.Option) (EmitCursorIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return EmitCursorIterator{it}, err
}

func (this emitCursorTable) DeleteBy(ctx context.Context, prefixKey EmitCursorIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this emitCursorTable) DeleteRange(ctx context.Context, from, to EmitCursorIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this emitCursorTable) doNotImplement() {}

var _ EmitCursorTable = emitCursorTable{}

func NewEmitCursorTable(db ormtable.Schema) (EmitCursorTable, error) {
	table := db.GetTable(&EmitCursor{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&EmitCursor{}).ProtoReflect().Descriptor().FullName()))
	}
	return emitCursorTable{table.(ormtable.AutoIncrementTable)}, nil
}

type EmitcursorStore interface {
	EmitCursorTable() EmitCursorTable

	doNotImplement()
}

type emitcursorStore struct {
	emitCursor EmitCursorTable
}

func (x emitcursorStore) EmitCursorTable() EmitCursorTable {
	return x.emitCursor
}

func (emitcursorStore) doNotImplement() {}

var _ EmitcursorStore = emitcursorStore{}

func NewEmitcursorStore(db ormtable.Schema) (EmitcursorStore, error) {
	emitCursorTable, err := NewEmitCursorTable(db)
	if err != nil {
		return nil, err
	}

	return emitcursorStore{
		emitCursorTable,
	}, nil
}
