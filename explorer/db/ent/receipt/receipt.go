// Code generated by ent, DO NOT EDIT.

package receipt

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the receipt type in the database.
	Label = "receipt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlockHash holds the string denoting the block_hash field in the database.
	FieldBlockHash = "block_hash"
	// FieldGasUsed holds the string denoting the gas_used field in the database.
	FieldGasUsed = "gas_used"
	// FieldSuccess holds the string denoting the success field in the database.
	FieldSuccess = "success"
	// FieldRelayerAddress holds the string denoting the relayer_address field in the database.
	FieldRelayerAddress = "relayer_address"
	// FieldSourceChainID holds the string denoting the source_chain_id field in the database.
	FieldSourceChainID = "source_chain_id"
	// FieldDestChainID holds the string denoting the dest_chain_id field in the database.
	FieldDestChainID = "dest_chain_id"
	// FieldOffset holds the string denoting the offset field in the database.
	FieldOffset = "offset"
	// FieldTxHash holds the string denoting the tx_hash field in the database.
	FieldTxHash = "tx_hash"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldRevertReason holds the string denoting the revert_reason field in the database.
	FieldRevertReason = "revert_reason"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// EdgeMsgs holds the string denoting the msgs edge name in mutations.
	EdgeMsgs = "msgs"
	// Table holds the table name of the receipt in the database.
	Table = "receipts"
	// BlockTable is the table that holds the block relation/edge. The primary key declared below.
	BlockTable = "block_receipts"
	// BlockInverseTable is the table name for the Block entity.
	// It exists in this package in order to avoid circular dependency with the "block" package.
	BlockInverseTable = "blocks"
	// MsgsTable is the table that holds the msgs relation/edge. The primary key declared below.
	MsgsTable = "msg_receipts"
	// MsgsInverseTable is the table name for the Msg entity.
	// It exists in this package in order to avoid circular dependency with the "msg" package.
	MsgsInverseTable = "msgs"
)

// Columns holds all SQL columns for receipt fields.
var Columns = []string{
	FieldID,
	FieldBlockHash,
	FieldGasUsed,
	FieldSuccess,
	FieldRelayerAddress,
	FieldSourceChainID,
	FieldDestChainID,
	FieldOffset,
	FieldTxHash,
	FieldCreatedAt,
	FieldRevertReason,
}

var (
	// BlockPrimaryKey and BlockColumn2 are the table columns denoting the
	// primary key for the block relation (M2M).
	BlockPrimaryKey = []string{"block_id", "receipt_id"}
	// MsgsPrimaryKey and MsgsColumn2 are the table columns denoting the
	// primary key for the msgs relation (M2M).
	MsgsPrimaryKey = []string{"msg_id", "receipt_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/omni-network/omni/explorer/db/ent/runtime"
var (
	Hooks [1]ent.Hook
	// BlockHashValidator is a validator for the "block_hash" field. It is called by the builders before save.
	BlockHashValidator func([]byte) error
	// RelayerAddressValidator is a validator for the "relayer_address" field. It is called by the builders before save.
	RelayerAddressValidator func([]byte) error
	// TxHashValidator is a validator for the "tx_hash" field. It is called by the builders before save.
	TxHashValidator func([]byte) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// RevertReasonValidator is a validator for the "revert_reason" field. It is called by the builders before save.
	RevertReasonValidator func(string) error
)

// OrderOption defines the ordering options for the Receipt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGasUsed orders the results by the gas_used field.
func ByGasUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasUsed, opts...).ToFunc()
}

// BySuccess orders the results by the success field.
func BySuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccess, opts...).ToFunc()
}

// BySourceChainID orders the results by the source_chain_id field.
func BySourceChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceChainID, opts...).ToFunc()
}

// ByDestChainID orders the results by the dest_chain_id field.
func ByDestChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestChainID, opts...).ToFunc()
}

// ByOffset orders the results by the offset field.
func ByOffset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOffset, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRevertReason orders the results by the revert_reason field.
func ByRevertReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevertReason, opts...).ToFunc()
}

// ByBlockCount orders the results by block count.
func ByBlockCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlockStep(), opts...)
	}
}

// ByBlock orders the results by block terms.
func ByBlock(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMsgsCount orders the results by msgs count.
func ByMsgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMsgsStep(), opts...)
	}
}

// ByMsgs orders the results by msgs terms.
func ByMsgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMsgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BlockTable, BlockPrimaryKey...),
	)
}
func newMsgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MsgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MsgsTable, MsgsPrimaryKey...),
	)
}
