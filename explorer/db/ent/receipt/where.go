// Code generated by ent, DO NOT EDIT.

package receipt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldID, id))
}

// BlockHash applies equality check predicate on the "block_hash" field. It's identical to BlockHashEQ.
func BlockHash(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldBlockHash, v))
}

// GasUsed applies equality check predicate on the "gas_used" field. It's identical to GasUsedEQ.
func GasUsed(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldGasUsed, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldSuccess, v))
}

// RelayerAddress applies equality check predicate on the "relayer_address" field. It's identical to RelayerAddressEQ.
func RelayerAddress(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldRelayerAddress, v))
}

// SourceChainID applies equality check predicate on the "source_chain_id" field. It's identical to SourceChainIDEQ.
func SourceChainID(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldSourceChainID, v))
}

// DestChainID applies equality check predicate on the "dest_chain_id" field. It's identical to DestChainIDEQ.
func DestChainID(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldDestChainID, v))
}

// Offset applies equality check predicate on the "offset" field. It's identical to OffsetEQ.
func Offset(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldOffset, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTxHash, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCreatedAt, v))
}

// RevertReason applies equality check predicate on the "revert_reason" field. It's identical to RevertReasonEQ.
func RevertReason(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldRevertReason, v))
}

// BlockHashEQ applies the EQ predicate on the "block_hash" field.
func BlockHashEQ(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldBlockHash, v))
}

// BlockHashNEQ applies the NEQ predicate on the "block_hash" field.
func BlockHashNEQ(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldBlockHash, v))
}

// BlockHashIn applies the In predicate on the "block_hash" field.
func BlockHashIn(vs ...[]byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldBlockHash, vs...))
}

// BlockHashNotIn applies the NotIn predicate on the "block_hash" field.
func BlockHashNotIn(vs ...[]byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldBlockHash, vs...))
}

// BlockHashGT applies the GT predicate on the "block_hash" field.
func BlockHashGT(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldBlockHash, v))
}

// BlockHashGTE applies the GTE predicate on the "block_hash" field.
func BlockHashGTE(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldBlockHash, v))
}

// BlockHashLT applies the LT predicate on the "block_hash" field.
func BlockHashLT(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldBlockHash, v))
}

// BlockHashLTE applies the LTE predicate on the "block_hash" field.
func BlockHashLTE(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldBlockHash, v))
}

// GasUsedEQ applies the EQ predicate on the "gas_used" field.
func GasUsedEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldGasUsed, v))
}

// GasUsedNEQ applies the NEQ predicate on the "gas_used" field.
func GasUsedNEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldGasUsed, v))
}

// GasUsedIn applies the In predicate on the "gas_used" field.
func GasUsedIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldGasUsed, vs...))
}

// GasUsedNotIn applies the NotIn predicate on the "gas_used" field.
func GasUsedNotIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldGasUsed, vs...))
}

// GasUsedGT applies the GT predicate on the "gas_used" field.
func GasUsedGT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldGasUsed, v))
}

// GasUsedGTE applies the GTE predicate on the "gas_used" field.
func GasUsedGTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldGasUsed, v))
}

// GasUsedLT applies the LT predicate on the "gas_used" field.
func GasUsedLT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldGasUsed, v))
}

// GasUsedLTE applies the LTE predicate on the "gas_used" field.
func GasUsedLTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldGasUsed, v))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldSuccess, v))
}

// RelayerAddressEQ applies the EQ predicate on the "relayer_address" field.
func RelayerAddressEQ(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldRelayerAddress, v))
}

// RelayerAddressNEQ applies the NEQ predicate on the "relayer_address" field.
func RelayerAddressNEQ(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldRelayerAddress, v))
}

// RelayerAddressIn applies the In predicate on the "relayer_address" field.
func RelayerAddressIn(vs ...[]byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldRelayerAddress, vs...))
}

// RelayerAddressNotIn applies the NotIn predicate on the "relayer_address" field.
func RelayerAddressNotIn(vs ...[]byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldRelayerAddress, vs...))
}

// RelayerAddressGT applies the GT predicate on the "relayer_address" field.
func RelayerAddressGT(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldRelayerAddress, v))
}

// RelayerAddressGTE applies the GTE predicate on the "relayer_address" field.
func RelayerAddressGTE(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldRelayerAddress, v))
}

// RelayerAddressLT applies the LT predicate on the "relayer_address" field.
func RelayerAddressLT(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldRelayerAddress, v))
}

// RelayerAddressLTE applies the LTE predicate on the "relayer_address" field.
func RelayerAddressLTE(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldRelayerAddress, v))
}

// SourceChainIDEQ applies the EQ predicate on the "source_chain_id" field.
func SourceChainIDEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldSourceChainID, v))
}

// SourceChainIDNEQ applies the NEQ predicate on the "source_chain_id" field.
func SourceChainIDNEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldSourceChainID, v))
}

// SourceChainIDIn applies the In predicate on the "source_chain_id" field.
func SourceChainIDIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldSourceChainID, vs...))
}

// SourceChainIDNotIn applies the NotIn predicate on the "source_chain_id" field.
func SourceChainIDNotIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldSourceChainID, vs...))
}

// SourceChainIDGT applies the GT predicate on the "source_chain_id" field.
func SourceChainIDGT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldSourceChainID, v))
}

// SourceChainIDGTE applies the GTE predicate on the "source_chain_id" field.
func SourceChainIDGTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldSourceChainID, v))
}

// SourceChainIDLT applies the LT predicate on the "source_chain_id" field.
func SourceChainIDLT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldSourceChainID, v))
}

// SourceChainIDLTE applies the LTE predicate on the "source_chain_id" field.
func SourceChainIDLTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldSourceChainID, v))
}

// DestChainIDEQ applies the EQ predicate on the "dest_chain_id" field.
func DestChainIDEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldDestChainID, v))
}

// DestChainIDNEQ applies the NEQ predicate on the "dest_chain_id" field.
func DestChainIDNEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldDestChainID, v))
}

// DestChainIDIn applies the In predicate on the "dest_chain_id" field.
func DestChainIDIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldDestChainID, vs...))
}

// DestChainIDNotIn applies the NotIn predicate on the "dest_chain_id" field.
func DestChainIDNotIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldDestChainID, vs...))
}

// DestChainIDGT applies the GT predicate on the "dest_chain_id" field.
func DestChainIDGT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldDestChainID, v))
}

// DestChainIDGTE applies the GTE predicate on the "dest_chain_id" field.
func DestChainIDGTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldDestChainID, v))
}

// DestChainIDLT applies the LT predicate on the "dest_chain_id" field.
func DestChainIDLT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldDestChainID, v))
}

// DestChainIDLTE applies the LTE predicate on the "dest_chain_id" field.
func DestChainIDLTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldDestChainID, v))
}

// OffsetEQ applies the EQ predicate on the "offset" field.
func OffsetEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldOffset, v))
}

// OffsetNEQ applies the NEQ predicate on the "offset" field.
func OffsetNEQ(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldOffset, v))
}

// OffsetIn applies the In predicate on the "offset" field.
func OffsetIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldOffset, vs...))
}

// OffsetNotIn applies the NotIn predicate on the "offset" field.
func OffsetNotIn(vs ...uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldOffset, vs...))
}

// OffsetGT applies the GT predicate on the "offset" field.
func OffsetGT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldOffset, v))
}

// OffsetGTE applies the GTE predicate on the "offset" field.
func OffsetGTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldOffset, v))
}

// OffsetLT applies the LT predicate on the "offset" field.
func OffsetLT(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldOffset, v))
}

// OffsetLTE applies the LTE predicate on the "offset" field.
func OffsetLTE(v uint64) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldOffset, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...[]byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...[]byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v []byte) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldTxHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldCreatedAt, v))
}

// RevertReasonEQ applies the EQ predicate on the "revert_reason" field.
func RevertReasonEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEQ(FieldRevertReason, v))
}

// RevertReasonNEQ applies the NEQ predicate on the "revert_reason" field.
func RevertReasonNEQ(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNEQ(FieldRevertReason, v))
}

// RevertReasonIn applies the In predicate on the "revert_reason" field.
func RevertReasonIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldIn(FieldRevertReason, vs...))
}

// RevertReasonNotIn applies the NotIn predicate on the "revert_reason" field.
func RevertReasonNotIn(vs ...string) predicate.Receipt {
	return predicate.Receipt(sql.FieldNotIn(FieldRevertReason, vs...))
}

// RevertReasonGT applies the GT predicate on the "revert_reason" field.
func RevertReasonGT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGT(FieldRevertReason, v))
}

// RevertReasonGTE applies the GTE predicate on the "revert_reason" field.
func RevertReasonGTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldGTE(FieldRevertReason, v))
}

// RevertReasonLT applies the LT predicate on the "revert_reason" field.
func RevertReasonLT(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLT(FieldRevertReason, v))
}

// RevertReasonLTE applies the LTE predicate on the "revert_reason" field.
func RevertReasonLTE(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldLTE(FieldRevertReason, v))
}

// RevertReasonContains applies the Contains predicate on the "revert_reason" field.
func RevertReasonContains(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContains(FieldRevertReason, v))
}

// RevertReasonHasPrefix applies the HasPrefix predicate on the "revert_reason" field.
func RevertReasonHasPrefix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasPrefix(FieldRevertReason, v))
}

// RevertReasonHasSuffix applies the HasSuffix predicate on the "revert_reason" field.
func RevertReasonHasSuffix(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldHasSuffix(FieldRevertReason, v))
}

// RevertReasonIsNil applies the IsNil predicate on the "revert_reason" field.
func RevertReasonIsNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldIsNull(FieldRevertReason))
}

// RevertReasonNotNil applies the NotNil predicate on the "revert_reason" field.
func RevertReasonNotNil() predicate.Receipt {
	return predicate.Receipt(sql.FieldNotNull(FieldRevertReason))
}

// RevertReasonEqualFold applies the EqualFold predicate on the "revert_reason" field.
func RevertReasonEqualFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldEqualFold(FieldRevertReason, v))
}

// RevertReasonContainsFold applies the ContainsFold predicate on the "revert_reason" field.
func RevertReasonContainsFold(v string) predicate.Receipt {
	return predicate.Receipt(sql.FieldContainsFold(FieldRevertReason, v))
}

// HasBlock applies the HasEdge predicate on the "block" edge.
func HasBlock() predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BlockTable, BlockPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockWith applies the HasEdge predicate on the "block" edge with a given conditions (other predicates).
func HasBlockWith(preds ...predicate.Block) predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := newBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMsgs applies the HasEdge predicate on the "msgs" edge.
func HasMsgs() predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MsgsTable, MsgsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMsgsWith applies the HasEdge predicate on the "msgs" edge with a given conditions (other predicates).
func HasMsgsWith(preds ...predicate.Msg) predicate.Receipt {
	return predicate.Receipt(func(s *sql.Selector) {
		step := newMsgsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Receipt) predicate.Receipt {
	return predicate.Receipt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Receipt) predicate.Receipt {
	return predicate.Receipt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Receipt) predicate.Receipt {
	return predicate.Receipt(sql.NotPredicates(p))
}
