// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omni-network/omni/explorer/db/ent/block"
	"github.com/omni-network/omni/explorer/db/ent/msg"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
	"github.com/omni-network/omni/explorer/db/ent/receipt"
)

// MsgUpdate is the builder for updating Msg entities.
type MsgUpdate struct {
	config
	hooks    []Hook
	mutation *MsgMutation
}

// Where appends a list predicates to the MsgUpdate builder.
func (mu *MsgUpdate) Where(ps ...predicate.Msg) *MsgUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetSender sets the "sender" field.
func (mu *MsgUpdate) SetSender(b []byte) *MsgUpdate {
	mu.mutation.SetSender(b)
	return mu
}

// SetTo sets the "to" field.
func (mu *MsgUpdate) SetTo(b []byte) *MsgUpdate {
	mu.mutation.SetTo(b)
	return mu
}

// SetData sets the "data" field.
func (mu *MsgUpdate) SetData(b []byte) *MsgUpdate {
	mu.mutation.SetData(b)
	return mu
}

// SetGasLimit sets the "gas_limit" field.
func (mu *MsgUpdate) SetGasLimit(u uint64) *MsgUpdate {
	mu.mutation.ResetGasLimit()
	mu.mutation.SetGasLimit(u)
	return mu
}

// SetNillableGasLimit sets the "gas_limit" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableGasLimit(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetGasLimit(*u)
	}
	return mu
}

// AddGasLimit adds u to the "gas_limit" field.
func (mu *MsgUpdate) AddGasLimit(u int64) *MsgUpdate {
	mu.mutation.AddGasLimit(u)
	return mu
}

// SetSourceChainID sets the "source_chain_id" field.
func (mu *MsgUpdate) SetSourceChainID(u uint64) *MsgUpdate {
	mu.mutation.ResetSourceChainID()
	mu.mutation.SetSourceChainID(u)
	return mu
}

// SetNillableSourceChainID sets the "source_chain_id" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableSourceChainID(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetSourceChainID(*u)
	}
	return mu
}

// AddSourceChainID adds u to the "source_chain_id" field.
func (mu *MsgUpdate) AddSourceChainID(u int64) *MsgUpdate {
	mu.mutation.AddSourceChainID(u)
	return mu
}

// SetDestChainID sets the "dest_chain_id" field.
func (mu *MsgUpdate) SetDestChainID(u uint64) *MsgUpdate {
	mu.mutation.ResetDestChainID()
	mu.mutation.SetDestChainID(u)
	return mu
}

// SetNillableDestChainID sets the "dest_chain_id" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableDestChainID(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetDestChainID(*u)
	}
	return mu
}

// AddDestChainID adds u to the "dest_chain_id" field.
func (mu *MsgUpdate) AddDestChainID(u int64) *MsgUpdate {
	mu.mutation.AddDestChainID(u)
	return mu
}

// SetOffset sets the "offset" field.
func (mu *MsgUpdate) SetOffset(u uint64) *MsgUpdate {
	mu.mutation.ResetOffset()
	mu.mutation.SetOffset(u)
	return mu
}

// SetNillableOffset sets the "offset" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableOffset(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetOffset(*u)
	}
	return mu
}

// AddOffset adds u to the "offset" field.
func (mu *MsgUpdate) AddOffset(u int64) *MsgUpdate {
	mu.mutation.AddOffset(u)
	return mu
}

// SetTxHash sets the "tx_hash" field.
func (mu *MsgUpdate) SetTxHash(b []byte) *MsgUpdate {
	mu.mutation.SetTxHash(b)
	return mu
}

// SetReceiptHash sets the "receipt_hash" field.
func (mu *MsgUpdate) SetReceiptHash(b []byte) *MsgUpdate {
	mu.mutation.SetReceiptHash(b)
	return mu
}

// ClearReceiptHash clears the value of the "receipt_hash" field.
func (mu *MsgUpdate) ClearReceiptHash() *MsgUpdate {
	mu.mutation.ClearReceiptHash()
	return mu
}

// SetStatus sets the "status" field.
func (mu *MsgUpdate) SetStatus(s string) *MsgUpdate {
	mu.mutation.SetStatus(s)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableStatus(s *string) *MsgUpdate {
	if s != nil {
		mu.SetStatus(*s)
	}
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MsgUpdate) ClearStatus() *MsgUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MsgUpdate) SetCreatedAt(t time.Time) *MsgUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableCreatedAt(t *time.Time) *MsgUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// AddBlockIDs adds the "block" edge to the Block entity by IDs.
func (mu *MsgUpdate) AddBlockIDs(ids ...int) *MsgUpdate {
	mu.mutation.AddBlockIDs(ids...)
	return mu
}

// AddBlock adds the "block" edges to the Block entity.
func (mu *MsgUpdate) AddBlock(b ...*Block) *MsgUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mu.AddBlockIDs(ids...)
}

// AddReceiptIDs adds the "receipts" edge to the Receipt entity by IDs.
func (mu *MsgUpdate) AddReceiptIDs(ids ...int) *MsgUpdate {
	mu.mutation.AddReceiptIDs(ids...)
	return mu
}

// AddReceipts adds the "receipts" edges to the Receipt entity.
func (mu *MsgUpdate) AddReceipts(r ...*Receipt) *MsgUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddReceiptIDs(ids...)
}

// Mutation returns the MsgMutation object of the builder.
func (mu *MsgUpdate) Mutation() *MsgMutation {
	return mu.mutation
}

// ClearBlock clears all "block" edges to the Block entity.
func (mu *MsgUpdate) ClearBlock() *MsgUpdate {
	mu.mutation.ClearBlock()
	return mu
}

// RemoveBlockIDs removes the "block" edge to Block entities by IDs.
func (mu *MsgUpdate) RemoveBlockIDs(ids ...int) *MsgUpdate {
	mu.mutation.RemoveBlockIDs(ids...)
	return mu
}

// RemoveBlock removes "block" edges to Block entities.
func (mu *MsgUpdate) RemoveBlock(b ...*Block) *MsgUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mu.RemoveBlockIDs(ids...)
}

// ClearReceipts clears all "receipts" edges to the Receipt entity.
func (mu *MsgUpdate) ClearReceipts() *MsgUpdate {
	mu.mutation.ClearReceipts()
	return mu
}

// RemoveReceiptIDs removes the "receipts" edge to Receipt entities by IDs.
func (mu *MsgUpdate) RemoveReceiptIDs(ids ...int) *MsgUpdate {
	mu.mutation.RemoveReceiptIDs(ids...)
	return mu
}

// RemoveReceipts removes "receipts" edges to Receipt entities.
func (mu *MsgUpdate) RemoveReceipts(r ...*Receipt) *MsgUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveReceiptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MsgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MsgUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MsgUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MsgUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MsgUpdate) check() error {
	if v, ok := mu.mutation.Sender(); ok {
		if err := msg.SenderValidator(v); err != nil {
			return &ValidationError{Name: "sender", err: fmt.Errorf(`ent: validator failed for field "Msg.sender": %w`, err)}
		}
	}
	if v, ok := mu.mutation.To(); ok {
		if err := msg.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Msg.to": %w`, err)}
		}
	}
	if v, ok := mu.mutation.TxHash(); ok {
		if err := msg.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "Msg.tx_hash": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ReceiptHash(); ok {
		if err := msg.ReceiptHashValidator(v); err != nil {
			return &ValidationError{Name: "receipt_hash", err: fmt.Errorf(`ent: validator failed for field "Msg.receipt_hash": %w`, err)}
		}
	}
	return nil
}

func (mu *MsgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msg.Table, msg.Columns, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Sender(); ok {
		_spec.SetField(msg.FieldSender, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.To(); ok {
		_spec.SetField(msg.FieldTo, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.Data(); ok {
		_spec.SetField(msg.FieldData, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.GasLimit(); ok {
		_spec.SetField(msg.FieldGasLimit, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedGasLimit(); ok {
		_spec.AddField(msg.FieldGasLimit, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.SourceChainID(); ok {
		_spec.SetField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedSourceChainID(); ok {
		_spec.AddField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.DestChainID(); ok {
		_spec.SetField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedDestChainID(); ok {
		_spec.AddField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.Offset(); ok {
		_spec.SetField(msg.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedOffset(); ok {
		_spec.AddField(msg.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.TxHash(); ok {
		_spec.SetField(msg.FieldTxHash, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.ReceiptHash(); ok {
		_spec.SetField(msg.FieldReceiptHash, field.TypeBytes, value)
	}
	if mu.mutation.ReceiptHashCleared() {
		_spec.ClearField(msg.FieldReceiptHash, field.TypeBytes)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(msg.FieldStatus, field.TypeString, value)
	}
	if mu.mutation.StatusCleared() {
		_spec.ClearField(msg.FieldStatus, field.TypeString)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(msg.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: msg.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedBlockIDs(); len(nodes) > 0 && !mu.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: msg.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: msg.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !mu.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MsgUpdateOne is the builder for updating a single Msg entity.
type MsgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgMutation
}

// SetSender sets the "sender" field.
func (muo *MsgUpdateOne) SetSender(b []byte) *MsgUpdateOne {
	muo.mutation.SetSender(b)
	return muo
}

// SetTo sets the "to" field.
func (muo *MsgUpdateOne) SetTo(b []byte) *MsgUpdateOne {
	muo.mutation.SetTo(b)
	return muo
}

// SetData sets the "data" field.
func (muo *MsgUpdateOne) SetData(b []byte) *MsgUpdateOne {
	muo.mutation.SetData(b)
	return muo
}

// SetGasLimit sets the "gas_limit" field.
func (muo *MsgUpdateOne) SetGasLimit(u uint64) *MsgUpdateOne {
	muo.mutation.ResetGasLimit()
	muo.mutation.SetGasLimit(u)
	return muo
}

// SetNillableGasLimit sets the "gas_limit" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableGasLimit(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetGasLimit(*u)
	}
	return muo
}

// AddGasLimit adds u to the "gas_limit" field.
func (muo *MsgUpdateOne) AddGasLimit(u int64) *MsgUpdateOne {
	muo.mutation.AddGasLimit(u)
	return muo
}

// SetSourceChainID sets the "source_chain_id" field.
func (muo *MsgUpdateOne) SetSourceChainID(u uint64) *MsgUpdateOne {
	muo.mutation.ResetSourceChainID()
	muo.mutation.SetSourceChainID(u)
	return muo
}

// SetNillableSourceChainID sets the "source_chain_id" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableSourceChainID(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetSourceChainID(*u)
	}
	return muo
}

// AddSourceChainID adds u to the "source_chain_id" field.
func (muo *MsgUpdateOne) AddSourceChainID(u int64) *MsgUpdateOne {
	muo.mutation.AddSourceChainID(u)
	return muo
}

// SetDestChainID sets the "dest_chain_id" field.
func (muo *MsgUpdateOne) SetDestChainID(u uint64) *MsgUpdateOne {
	muo.mutation.ResetDestChainID()
	muo.mutation.SetDestChainID(u)
	return muo
}

// SetNillableDestChainID sets the "dest_chain_id" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableDestChainID(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetDestChainID(*u)
	}
	return muo
}

// AddDestChainID adds u to the "dest_chain_id" field.
func (muo *MsgUpdateOne) AddDestChainID(u int64) *MsgUpdateOne {
	muo.mutation.AddDestChainID(u)
	return muo
}

// SetOffset sets the "offset" field.
func (muo *MsgUpdateOne) SetOffset(u uint64) *MsgUpdateOne {
	muo.mutation.ResetOffset()
	muo.mutation.SetOffset(u)
	return muo
}

// SetNillableOffset sets the "offset" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableOffset(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetOffset(*u)
	}
	return muo
}

// AddOffset adds u to the "offset" field.
func (muo *MsgUpdateOne) AddOffset(u int64) *MsgUpdateOne {
	muo.mutation.AddOffset(u)
	return muo
}

// SetTxHash sets the "tx_hash" field.
func (muo *MsgUpdateOne) SetTxHash(b []byte) *MsgUpdateOne {
	muo.mutation.SetTxHash(b)
	return muo
}

// SetReceiptHash sets the "receipt_hash" field.
func (muo *MsgUpdateOne) SetReceiptHash(b []byte) *MsgUpdateOne {
	muo.mutation.SetReceiptHash(b)
	return muo
}

// ClearReceiptHash clears the value of the "receipt_hash" field.
func (muo *MsgUpdateOne) ClearReceiptHash() *MsgUpdateOne {
	muo.mutation.ClearReceiptHash()
	return muo
}

// SetStatus sets the "status" field.
func (muo *MsgUpdateOne) SetStatus(s string) *MsgUpdateOne {
	muo.mutation.SetStatus(s)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableStatus(s *string) *MsgUpdateOne {
	if s != nil {
		muo.SetStatus(*s)
	}
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MsgUpdateOne) ClearStatus() *MsgUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MsgUpdateOne) SetCreatedAt(t time.Time) *MsgUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableCreatedAt(t *time.Time) *MsgUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// AddBlockIDs adds the "block" edge to the Block entity by IDs.
func (muo *MsgUpdateOne) AddBlockIDs(ids ...int) *MsgUpdateOne {
	muo.mutation.AddBlockIDs(ids...)
	return muo
}

// AddBlock adds the "block" edges to the Block entity.
func (muo *MsgUpdateOne) AddBlock(b ...*Block) *MsgUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return muo.AddBlockIDs(ids...)
}

// AddReceiptIDs adds the "receipts" edge to the Receipt entity by IDs.
func (muo *MsgUpdateOne) AddReceiptIDs(ids ...int) *MsgUpdateOne {
	muo.mutation.AddReceiptIDs(ids...)
	return muo
}

// AddReceipts adds the "receipts" edges to the Receipt entity.
func (muo *MsgUpdateOne) AddReceipts(r ...*Receipt) *MsgUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddReceiptIDs(ids...)
}

// Mutation returns the MsgMutation object of the builder.
func (muo *MsgUpdateOne) Mutation() *MsgMutation {
	return muo.mutation
}

// ClearBlock clears all "block" edges to the Block entity.
func (muo *MsgUpdateOne) ClearBlock() *MsgUpdateOne {
	muo.mutation.ClearBlock()
	return muo
}

// RemoveBlockIDs removes the "block" edge to Block entities by IDs.
func (muo *MsgUpdateOne) RemoveBlockIDs(ids ...int) *MsgUpdateOne {
	muo.mutation.RemoveBlockIDs(ids...)
	return muo
}

// RemoveBlock removes "block" edges to Block entities.
func (muo *MsgUpdateOne) RemoveBlock(b ...*Block) *MsgUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return muo.RemoveBlockIDs(ids...)
}

// ClearReceipts clears all "receipts" edges to the Receipt entity.
func (muo *MsgUpdateOne) ClearReceipts() *MsgUpdateOne {
	muo.mutation.ClearReceipts()
	return muo
}

// RemoveReceiptIDs removes the "receipts" edge to Receipt entities by IDs.
func (muo *MsgUpdateOne) RemoveReceiptIDs(ids ...int) *MsgUpdateOne {
	muo.mutation.RemoveReceiptIDs(ids...)
	return muo
}

// RemoveReceipts removes "receipts" edges to Receipt entities.
func (muo *MsgUpdateOne) RemoveReceipts(r ...*Receipt) *MsgUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveReceiptIDs(ids...)
}

// Where appends a list predicates to the MsgUpdate builder.
func (muo *MsgUpdateOne) Where(ps ...predicate.Msg) *MsgUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MsgUpdateOne) Select(field string, fields ...string) *MsgUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Msg entity.
func (muo *MsgUpdateOne) Save(ctx context.Context) (*Msg, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MsgUpdateOne) SaveX(ctx context.Context) *Msg {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MsgUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MsgUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MsgUpdateOne) check() error {
	if v, ok := muo.mutation.Sender(); ok {
		if err := msg.SenderValidator(v); err != nil {
			return &ValidationError{Name: "sender", err: fmt.Errorf(`ent: validator failed for field "Msg.sender": %w`, err)}
		}
	}
	if v, ok := muo.mutation.To(); ok {
		if err := msg.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Msg.to": %w`, err)}
		}
	}
	if v, ok := muo.mutation.TxHash(); ok {
		if err := msg.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "Msg.tx_hash": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ReceiptHash(); ok {
		if err := msg.ReceiptHashValidator(v); err != nil {
			return &ValidationError{Name: "receipt_hash", err: fmt.Errorf(`ent: validator failed for field "Msg.receipt_hash": %w`, err)}
		}
	}
	return nil
}

func (muo *MsgUpdateOne) sqlSave(ctx context.Context) (_node *Msg, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msg.Table, msg.Columns, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Msg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msg.FieldID)
		for _, f := range fields {
			if !msg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Sender(); ok {
		_spec.SetField(msg.FieldSender, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.To(); ok {
		_spec.SetField(msg.FieldTo, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.Data(); ok {
		_spec.SetField(msg.FieldData, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.GasLimit(); ok {
		_spec.SetField(msg.FieldGasLimit, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedGasLimit(); ok {
		_spec.AddField(msg.FieldGasLimit, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.SourceChainID(); ok {
		_spec.SetField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedSourceChainID(); ok {
		_spec.AddField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.DestChainID(); ok {
		_spec.SetField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedDestChainID(); ok {
		_spec.AddField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.Offset(); ok {
		_spec.SetField(msg.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedOffset(); ok {
		_spec.AddField(msg.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.TxHash(); ok {
		_spec.SetField(msg.FieldTxHash, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.ReceiptHash(); ok {
		_spec.SetField(msg.FieldReceiptHash, field.TypeBytes, value)
	}
	if muo.mutation.ReceiptHashCleared() {
		_spec.ClearField(msg.FieldReceiptHash, field.TypeBytes)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(msg.FieldStatus, field.TypeString, value)
	}
	if muo.mutation.StatusCleared() {
		_spec.ClearField(msg.FieldStatus, field.TypeString)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(msg.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: msg.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedBlockIDs(); len(nodes) > 0 && !muo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: msg.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: msg.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !muo.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Msg{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
