// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/omni-network/omni/explorer/db/ent/block"
	"github.com/omni-network/omni/explorer/db/ent/msg"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
	"github.com/omni-network/omni/explorer/db/ent/receipt"
)

// MsgUpdate is the builder for updating Msg entities.
type MsgUpdate struct {
	config
	hooks    []Hook
	mutation *MsgMutation
}

// Where appends a list predicates to the MsgUpdate builder.
func (mu *MsgUpdate) Where(ps ...predicate.Msg) *MsgUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUUID sets the "UUID" field.
func (mu *MsgUpdate) SetUUID(u uuid.UUID) *MsgUpdate {
	mu.mutation.SetUUID(u)
	return mu
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableUUID(u *uuid.UUID) *MsgUpdate {
	if u != nil {
		mu.SetUUID(*u)
	}
	return mu
}

// SetSourceMsgSender sets the "SourceMsgSender" field.
func (mu *MsgUpdate) SetSourceMsgSender(b []byte) *MsgUpdate {
	mu.mutation.SetSourceMsgSender(b)
	return mu
}

// SetDestAddress sets the "DestAddress" field.
func (mu *MsgUpdate) SetDestAddress(b []byte) *MsgUpdate {
	mu.mutation.SetDestAddress(b)
	return mu
}

// SetData sets the "Data" field.
func (mu *MsgUpdate) SetData(b []byte) *MsgUpdate {
	mu.mutation.SetData(b)
	return mu
}

// SetDestGasLimit sets the "DestGasLimit" field.
func (mu *MsgUpdate) SetDestGasLimit(u uint64) *MsgUpdate {
	mu.mutation.ResetDestGasLimit()
	mu.mutation.SetDestGasLimit(u)
	return mu
}

// SetNillableDestGasLimit sets the "DestGasLimit" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableDestGasLimit(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetDestGasLimit(*u)
	}
	return mu
}

// AddDestGasLimit adds u to the "DestGasLimit" field.
func (mu *MsgUpdate) AddDestGasLimit(u int64) *MsgUpdate {
	mu.mutation.AddDestGasLimit(u)
	return mu
}

// SetSourceChainID sets the "SourceChainID" field.
func (mu *MsgUpdate) SetSourceChainID(u uint64) *MsgUpdate {
	mu.mutation.ResetSourceChainID()
	mu.mutation.SetSourceChainID(u)
	return mu
}

// SetNillableSourceChainID sets the "SourceChainID" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableSourceChainID(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetSourceChainID(*u)
	}
	return mu
}

// AddSourceChainID adds u to the "SourceChainID" field.
func (mu *MsgUpdate) AddSourceChainID(u int64) *MsgUpdate {
	mu.mutation.AddSourceChainID(u)
	return mu
}

// SetDestChainID sets the "DestChainID" field.
func (mu *MsgUpdate) SetDestChainID(u uint64) *MsgUpdate {
	mu.mutation.ResetDestChainID()
	mu.mutation.SetDestChainID(u)
	return mu
}

// SetNillableDestChainID sets the "DestChainID" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableDestChainID(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetDestChainID(*u)
	}
	return mu
}

// AddDestChainID adds u to the "DestChainID" field.
func (mu *MsgUpdate) AddDestChainID(u int64) *MsgUpdate {
	mu.mutation.AddDestChainID(u)
	return mu
}

// SetStreamOffset sets the "StreamOffset" field.
func (mu *MsgUpdate) SetStreamOffset(u uint64) *MsgUpdate {
	mu.mutation.ResetStreamOffset()
	mu.mutation.SetStreamOffset(u)
	return mu
}

// SetNillableStreamOffset sets the "StreamOffset" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableStreamOffset(u *uint64) *MsgUpdate {
	if u != nil {
		mu.SetStreamOffset(*u)
	}
	return mu
}

// AddStreamOffset adds u to the "StreamOffset" field.
func (mu *MsgUpdate) AddStreamOffset(u int64) *MsgUpdate {
	mu.mutation.AddStreamOffset(u)
	return mu
}

// SetTxHash sets the "TxHash" field.
func (mu *MsgUpdate) SetTxHash(b []byte) *MsgUpdate {
	mu.mutation.SetTxHash(b)
	return mu
}

// SetCreatedAt sets the "CreatedAt" field.
func (mu *MsgUpdate) SetCreatedAt(t time.Time) *MsgUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableCreatedAt(t *time.Time) *MsgUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetBlockID sets the "Block" edge to the Block entity by ID.
func (mu *MsgUpdate) SetBlockID(id int) *MsgUpdate {
	mu.mutation.SetBlockID(id)
	return mu
}

// SetNillableBlockID sets the "Block" edge to the Block entity by ID if the given value is not nil.
func (mu *MsgUpdate) SetNillableBlockID(id *int) *MsgUpdate {
	if id != nil {
		mu = mu.SetBlockID(*id)
	}
	return mu
}

// SetBlock sets the "Block" edge to the Block entity.
func (mu *MsgUpdate) SetBlock(b *Block) *MsgUpdate {
	return mu.SetBlockID(b.ID)
}

// AddReceiptIDs adds the "Receipts" edge to the Receipt entity by IDs.
func (mu *MsgUpdate) AddReceiptIDs(ids ...int) *MsgUpdate {
	mu.mutation.AddReceiptIDs(ids...)
	return mu
}

// AddReceipts adds the "Receipts" edges to the Receipt entity.
func (mu *MsgUpdate) AddReceipts(r ...*Receipt) *MsgUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddReceiptIDs(ids...)
}

// Mutation returns the MsgMutation object of the builder.
func (mu *MsgUpdate) Mutation() *MsgMutation {
	return mu.mutation
}

// ClearBlock clears the "Block" edge to the Block entity.
func (mu *MsgUpdate) ClearBlock() *MsgUpdate {
	mu.mutation.ClearBlock()
	return mu
}

// ClearReceipts clears all "Receipts" edges to the Receipt entity.
func (mu *MsgUpdate) ClearReceipts() *MsgUpdate {
	mu.mutation.ClearReceipts()
	return mu
}

// RemoveReceiptIDs removes the "Receipts" edge to Receipt entities by IDs.
func (mu *MsgUpdate) RemoveReceiptIDs(ids ...int) *MsgUpdate {
	mu.mutation.RemoveReceiptIDs(ids...)
	return mu
}

// RemoveReceipts removes "Receipts" edges to Receipt entities.
func (mu *MsgUpdate) RemoveReceipts(r ...*Receipt) *MsgUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveReceiptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MsgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MsgUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MsgUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MsgUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MsgUpdate) check() error {
	if v, ok := mu.mutation.SourceMsgSender(); ok {
		if err := msg.SourceMsgSenderValidator(v); err != nil {
			return &ValidationError{Name: "SourceMsgSender", err: fmt.Errorf(`ent: validator failed for field "Msg.SourceMsgSender": %w`, err)}
		}
	}
	if v, ok := mu.mutation.DestAddress(); ok {
		if err := msg.DestAddressValidator(v); err != nil {
			return &ValidationError{Name: "DestAddress", err: fmt.Errorf(`ent: validator failed for field "Msg.DestAddress": %w`, err)}
		}
	}
	if v, ok := mu.mutation.TxHash(); ok {
		if err := msg.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "TxHash", err: fmt.Errorf(`ent: validator failed for field "Msg.TxHash": %w`, err)}
		}
	}
	return nil
}

func (mu *MsgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msg.Table, msg.Columns, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UUID(); ok {
		_spec.SetField(msg.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := mu.mutation.SourceMsgSender(); ok {
		_spec.SetField(msg.FieldSourceMsgSender, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.DestAddress(); ok {
		_spec.SetField(msg.FieldDestAddress, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.Data(); ok {
		_spec.SetField(msg.FieldData, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.DestGasLimit(); ok {
		_spec.SetField(msg.FieldDestGasLimit, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedDestGasLimit(); ok {
		_spec.AddField(msg.FieldDestGasLimit, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.SourceChainID(); ok {
		_spec.SetField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedSourceChainID(); ok {
		_spec.AddField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.DestChainID(); ok {
		_spec.SetField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedDestChainID(); ok {
		_spec.AddField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.StreamOffset(); ok {
		_spec.SetField(msg.FieldStreamOffset, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.AddedStreamOffset(); ok {
		_spec.AddField(msg.FieldStreamOffset, field.TypeUint64, value)
	}
	if value, ok := mu.mutation.TxHash(); ok {
		_spec.SetField(msg.FieldTxHash, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(msg.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: []string{msg.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: []string{msg.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !mu.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MsgUpdateOne is the builder for updating a single Msg entity.
type MsgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgMutation
}

// SetUUID sets the "UUID" field.
func (muo *MsgUpdateOne) SetUUID(u uuid.UUID) *MsgUpdateOne {
	muo.mutation.SetUUID(u)
	return muo
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableUUID(u *uuid.UUID) *MsgUpdateOne {
	if u != nil {
		muo.SetUUID(*u)
	}
	return muo
}

// SetSourceMsgSender sets the "SourceMsgSender" field.
func (muo *MsgUpdateOne) SetSourceMsgSender(b []byte) *MsgUpdateOne {
	muo.mutation.SetSourceMsgSender(b)
	return muo
}

// SetDestAddress sets the "DestAddress" field.
func (muo *MsgUpdateOne) SetDestAddress(b []byte) *MsgUpdateOne {
	muo.mutation.SetDestAddress(b)
	return muo
}

// SetData sets the "Data" field.
func (muo *MsgUpdateOne) SetData(b []byte) *MsgUpdateOne {
	muo.mutation.SetData(b)
	return muo
}

// SetDestGasLimit sets the "DestGasLimit" field.
func (muo *MsgUpdateOne) SetDestGasLimit(u uint64) *MsgUpdateOne {
	muo.mutation.ResetDestGasLimit()
	muo.mutation.SetDestGasLimit(u)
	return muo
}

// SetNillableDestGasLimit sets the "DestGasLimit" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableDestGasLimit(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetDestGasLimit(*u)
	}
	return muo
}

// AddDestGasLimit adds u to the "DestGasLimit" field.
func (muo *MsgUpdateOne) AddDestGasLimit(u int64) *MsgUpdateOne {
	muo.mutation.AddDestGasLimit(u)
	return muo
}

// SetSourceChainID sets the "SourceChainID" field.
func (muo *MsgUpdateOne) SetSourceChainID(u uint64) *MsgUpdateOne {
	muo.mutation.ResetSourceChainID()
	muo.mutation.SetSourceChainID(u)
	return muo
}

// SetNillableSourceChainID sets the "SourceChainID" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableSourceChainID(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetSourceChainID(*u)
	}
	return muo
}

// AddSourceChainID adds u to the "SourceChainID" field.
func (muo *MsgUpdateOne) AddSourceChainID(u int64) *MsgUpdateOne {
	muo.mutation.AddSourceChainID(u)
	return muo
}

// SetDestChainID sets the "DestChainID" field.
func (muo *MsgUpdateOne) SetDestChainID(u uint64) *MsgUpdateOne {
	muo.mutation.ResetDestChainID()
	muo.mutation.SetDestChainID(u)
	return muo
}

// SetNillableDestChainID sets the "DestChainID" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableDestChainID(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetDestChainID(*u)
	}
	return muo
}

// AddDestChainID adds u to the "DestChainID" field.
func (muo *MsgUpdateOne) AddDestChainID(u int64) *MsgUpdateOne {
	muo.mutation.AddDestChainID(u)
	return muo
}

// SetStreamOffset sets the "StreamOffset" field.
func (muo *MsgUpdateOne) SetStreamOffset(u uint64) *MsgUpdateOne {
	muo.mutation.ResetStreamOffset()
	muo.mutation.SetStreamOffset(u)
	return muo
}

// SetNillableStreamOffset sets the "StreamOffset" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableStreamOffset(u *uint64) *MsgUpdateOne {
	if u != nil {
		muo.SetStreamOffset(*u)
	}
	return muo
}

// AddStreamOffset adds u to the "StreamOffset" field.
func (muo *MsgUpdateOne) AddStreamOffset(u int64) *MsgUpdateOne {
	muo.mutation.AddStreamOffset(u)
	return muo
}

// SetTxHash sets the "TxHash" field.
func (muo *MsgUpdateOne) SetTxHash(b []byte) *MsgUpdateOne {
	muo.mutation.SetTxHash(b)
	return muo
}

// SetCreatedAt sets the "CreatedAt" field.
func (muo *MsgUpdateOne) SetCreatedAt(t time.Time) *MsgUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableCreatedAt(t *time.Time) *MsgUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetBlockID sets the "Block" edge to the Block entity by ID.
func (muo *MsgUpdateOne) SetBlockID(id int) *MsgUpdateOne {
	muo.mutation.SetBlockID(id)
	return muo
}

// SetNillableBlockID sets the "Block" edge to the Block entity by ID if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableBlockID(id *int) *MsgUpdateOne {
	if id != nil {
		muo = muo.SetBlockID(*id)
	}
	return muo
}

// SetBlock sets the "Block" edge to the Block entity.
func (muo *MsgUpdateOne) SetBlock(b *Block) *MsgUpdateOne {
	return muo.SetBlockID(b.ID)
}

// AddReceiptIDs adds the "Receipts" edge to the Receipt entity by IDs.
func (muo *MsgUpdateOne) AddReceiptIDs(ids ...int) *MsgUpdateOne {
	muo.mutation.AddReceiptIDs(ids...)
	return muo
}

// AddReceipts adds the "Receipts" edges to the Receipt entity.
func (muo *MsgUpdateOne) AddReceipts(r ...*Receipt) *MsgUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddReceiptIDs(ids...)
}

// Mutation returns the MsgMutation object of the builder.
func (muo *MsgUpdateOne) Mutation() *MsgMutation {
	return muo.mutation
}

// ClearBlock clears the "Block" edge to the Block entity.
func (muo *MsgUpdateOne) ClearBlock() *MsgUpdateOne {
	muo.mutation.ClearBlock()
	return muo
}

// ClearReceipts clears all "Receipts" edges to the Receipt entity.
func (muo *MsgUpdateOne) ClearReceipts() *MsgUpdateOne {
	muo.mutation.ClearReceipts()
	return muo
}

// RemoveReceiptIDs removes the "Receipts" edge to Receipt entities by IDs.
func (muo *MsgUpdateOne) RemoveReceiptIDs(ids ...int) *MsgUpdateOne {
	muo.mutation.RemoveReceiptIDs(ids...)
	return muo
}

// RemoveReceipts removes "Receipts" edges to Receipt entities.
func (muo *MsgUpdateOne) RemoveReceipts(r ...*Receipt) *MsgUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveReceiptIDs(ids...)
}

// Where appends a list predicates to the MsgUpdate builder.
func (muo *MsgUpdateOne) Where(ps ...predicate.Msg) *MsgUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MsgUpdateOne) Select(field string, fields ...string) *MsgUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Msg entity.
func (muo *MsgUpdateOne) Save(ctx context.Context) (*Msg, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MsgUpdateOne) SaveX(ctx context.Context) *Msg {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MsgUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MsgUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MsgUpdateOne) check() error {
	if v, ok := muo.mutation.SourceMsgSender(); ok {
		if err := msg.SourceMsgSenderValidator(v); err != nil {
			return &ValidationError{Name: "SourceMsgSender", err: fmt.Errorf(`ent: validator failed for field "Msg.SourceMsgSender": %w`, err)}
		}
	}
	if v, ok := muo.mutation.DestAddress(); ok {
		if err := msg.DestAddressValidator(v); err != nil {
			return &ValidationError{Name: "DestAddress", err: fmt.Errorf(`ent: validator failed for field "Msg.DestAddress": %w`, err)}
		}
	}
	if v, ok := muo.mutation.TxHash(); ok {
		if err := msg.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "TxHash", err: fmt.Errorf(`ent: validator failed for field "Msg.TxHash": %w`, err)}
		}
	}
	return nil
}

func (muo *MsgUpdateOne) sqlSave(ctx context.Context) (_node *Msg, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msg.Table, msg.Columns, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Msg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msg.FieldID)
		for _, f := range fields {
			if !msg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UUID(); ok {
		_spec.SetField(msg.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := muo.mutation.SourceMsgSender(); ok {
		_spec.SetField(msg.FieldSourceMsgSender, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.DestAddress(); ok {
		_spec.SetField(msg.FieldDestAddress, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.Data(); ok {
		_spec.SetField(msg.FieldData, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.DestGasLimit(); ok {
		_spec.SetField(msg.FieldDestGasLimit, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedDestGasLimit(); ok {
		_spec.AddField(msg.FieldDestGasLimit, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.SourceChainID(); ok {
		_spec.SetField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedSourceChainID(); ok {
		_spec.AddField(msg.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.DestChainID(); ok {
		_spec.SetField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedDestChainID(); ok {
		_spec.AddField(msg.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.StreamOffset(); ok {
		_spec.SetField(msg.FieldStreamOffset, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.AddedStreamOffset(); ok {
		_spec.AddField(msg.FieldStreamOffset, field.TypeUint64, value)
	}
	if value, ok := muo.mutation.TxHash(); ok {
		_spec.SetField(msg.FieldTxHash, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(msg.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: []string{msg.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: []string{msg.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !muo.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Msg{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
