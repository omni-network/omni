// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/omni-network/omni/explorer/db/ent/chain"
)

// ChainCreate is the builder for creating a Chain entity.
type ChainCreate struct {
	config
	mutation *ChainMutation
	hooks    []Hook
}

// SetUUID sets the "UUID" field.
func (cc *ChainCreate) SetUUID(u uuid.UUID) *ChainCreate {
	cc.mutation.SetUUID(u)
	return cc
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (cc *ChainCreate) SetNillableUUID(u *uuid.UUID) *ChainCreate {
	if u != nil {
		cc.SetUUID(*u)
	}
	return cc
}

// SetCreatedAt sets the "CreatedAt" field.
func (cc *ChainCreate) SetCreatedAt(t time.Time) *ChainCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (cc *ChainCreate) SetNillableCreatedAt(t *time.Time) *ChainCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetChainID sets the "ChainID" field.
func (cc *ChainCreate) SetChainID(u uint64) *ChainCreate {
	cc.mutation.SetChainID(u)
	return cc
}

// SetName sets the "Name" field.
func (cc *ChainCreate) SetName(s string) *ChainCreate {
	cc.mutation.SetName(s)
	return cc
}

// Mutation returns the ChainMutation object of the builder.
func (cc *ChainCreate) Mutation() *ChainMutation {
	return cc.mutation
}

// Save creates the Chain in the database.
func (cc *ChainCreate) Save(ctx context.Context) (*Chain, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChainCreate) SaveX(ctx context.Context) *Chain {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChainCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChainCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChainCreate) defaults() {
	if _, ok := cc.mutation.UUID(); !ok {
		v := chain.DefaultUUID()
		cc.mutation.SetUUID(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := chain.DefaultCreatedAt
		cc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChainCreate) check() error {
	if _, ok := cc.mutation.UUID(); !ok {
		return &ValidationError{Name: "UUID", err: errors.New(`ent: missing required field "Chain.UUID"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "Chain.CreatedAt"`)}
	}
	if _, ok := cc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "ChainID", err: errors.New(`ent: missing required field "Chain.ChainID"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Chain.Name"`)}
	}
	return nil
}

func (cc *ChainCreate) sqlSave(ctx context.Context) (*Chain, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChainCreate) createSpec() (*Chain, *sqlgraph.CreateSpec) {
	var (
		_node = &Chain{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(chain.Table, sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.UUID(); ok {
		_spec.SetField(chain.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(chain.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.ChainID(); ok {
		_spec.SetField(chain.FieldChainID, field.TypeUint64, value)
		_node.ChainID = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(chain.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// ChainCreateBulk is the builder for creating many Chain entities in bulk.
type ChainCreateBulk struct {
	config
	err      error
	builders []*ChainCreate
}

// Save creates the Chain entities in the database.
func (ccb *ChainCreateBulk) Save(ctx context.Context) ([]*Chain, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chain, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChainCreateBulk) SaveX(ctx context.Context) []*Chain {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChainCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChainCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
