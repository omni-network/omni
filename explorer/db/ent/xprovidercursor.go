// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/omni-network/omni/explorer/db/ent/xprovidercursor"
)

// XProviderCursor is the model entity for the XProviderCursor schema.
type XProviderCursor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID uint64 `json:"chain_id,omitempty"`
	// Height holds the value of the "height" field.
	Height uint64 `json:"height,omitempty"`
	// Offset holds the value of the "offset" field.
	Offset uint64 `json:"offset,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*XProviderCursor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case xprovidercursor.FieldChainID, xprovidercursor.FieldHeight, xprovidercursor.FieldOffset:
			values[i] = new(sql.NullInt64)
		case xprovidercursor.FieldCreatedAt, xprovidercursor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case xprovidercursor.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the XProviderCursor fields.
func (xc *XProviderCursor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case xprovidercursor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				xc.ID = *value
			}
		case xprovidercursor.FieldChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				xc.ChainID = uint64(value.Int64)
			}
		case xprovidercursor.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				xc.Height = uint64(value.Int64)
			}
		case xprovidercursor.FieldOffset:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field offset", values[i])
			} else if value.Valid {
				xc.Offset = uint64(value.Int64)
			}
		case xprovidercursor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				xc.CreatedAt = value.Time
			}
		case xprovidercursor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				xc.UpdatedAt = value.Time
			}
		default:
			xc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the XProviderCursor.
// This includes values selected through modifiers, order, etc.
func (xc *XProviderCursor) Value(name string) (ent.Value, error) {
	return xc.selectValues.Get(name)
}

// Update returns a builder for updating this XProviderCursor.
// Note that you need to call XProviderCursor.Unwrap() before calling this method if this XProviderCursor
// was returned from a transaction, and the transaction was committed or rolled back.
func (xc *XProviderCursor) Update() *XProviderCursorUpdateOne {
	return NewXProviderCursorClient(xc.config).UpdateOne(xc)
}

// Unwrap unwraps the XProviderCursor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (xc *XProviderCursor) Unwrap() *XProviderCursor {
	_tx, ok := xc.config.driver.(*txDriver)
	if !ok {
		panic("ent: XProviderCursor is not a transactional entity")
	}
	xc.config.driver = _tx.drv
	return xc
}

// String implements the fmt.Stringer.
func (xc *XProviderCursor) String() string {
	var builder strings.Builder
	builder.WriteString("XProviderCursor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", xc.ID))
	builder.WriteString("chain_id=")
	builder.WriteString(fmt.Sprintf("%v", xc.ChainID))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", xc.Height))
	builder.WriteString(", ")
	builder.WriteString("offset=")
	builder.WriteString(fmt.Sprintf("%v", xc.Offset))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(xc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(xc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// XProviderCursors is a parsable slice of XProviderCursor.
type XProviderCursors []*XProviderCursor
