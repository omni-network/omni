// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/omni-network/omni/explorer/db/ent/block"
	"github.com/omni-network/omni/explorer/db/ent/msg"
	"github.com/omni-network/omni/explorer/db/ent/receipt"
)

// MsgCreate is the builder for creating a Msg entity.
type MsgCreate struct {
	config
	mutation *MsgMutation
	hooks    []Hook
}

// SetUUID sets the "UUID" field.
func (mc *MsgCreate) SetUUID(u uuid.UUID) *MsgCreate {
	mc.mutation.SetUUID(u)
	return mc
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (mc *MsgCreate) SetNillableUUID(u *uuid.UUID) *MsgCreate {
	if u != nil {
		mc.SetUUID(*u)
	}
	return mc
}

// SetBlockID sets the "Block_ID" field.
func (mc *MsgCreate) SetBlockID(i int) *MsgCreate {
	mc.mutation.SetBlockID(i)
	return mc
}

// SetNillableBlockID sets the "Block_ID" field if the given value is not nil.
func (mc *MsgCreate) SetNillableBlockID(i *int) *MsgCreate {
	if i != nil {
		mc.SetBlockID(*i)
	}
	return mc
}

// SetSourceMsgSender sets the "SourceMsgSender" field.
func (mc *MsgCreate) SetSourceMsgSender(b []byte) *MsgCreate {
	mc.mutation.SetSourceMsgSender(b)
	return mc
}

// SetDestAddress sets the "DestAddress" field.
func (mc *MsgCreate) SetDestAddress(b []byte) *MsgCreate {
	mc.mutation.SetDestAddress(b)
	return mc
}

// SetData sets the "Data" field.
func (mc *MsgCreate) SetData(b []byte) *MsgCreate {
	mc.mutation.SetData(b)
	return mc
}

// SetDestGasLimit sets the "DestGasLimit" field.
func (mc *MsgCreate) SetDestGasLimit(u uint64) *MsgCreate {
	mc.mutation.SetDestGasLimit(u)
	return mc
}

// SetSourceChainID sets the "SourceChainID" field.
func (mc *MsgCreate) SetSourceChainID(u uint64) *MsgCreate {
	mc.mutation.SetSourceChainID(u)
	return mc
}

// SetDestChainID sets the "DestChainID" field.
func (mc *MsgCreate) SetDestChainID(u uint64) *MsgCreate {
	mc.mutation.SetDestChainID(u)
	return mc
}

// SetStreamOffset sets the "StreamOffset" field.
func (mc *MsgCreate) SetStreamOffset(u uint64) *MsgCreate {
	mc.mutation.SetStreamOffset(u)
	return mc
}

// SetTxHash sets the "TxHash" field.
func (mc *MsgCreate) SetTxHash(b []byte) *MsgCreate {
	mc.mutation.SetTxHash(b)
	return mc
}

// SetBlockHash sets the "BlockHash" field.
func (mc *MsgCreate) SetBlockHash(b []byte) *MsgCreate {
	mc.mutation.SetBlockHash(b)
	return mc
}

// SetBlockHeight sets the "BlockHeight" field.
func (mc *MsgCreate) SetBlockHeight(u uint64) *MsgCreate {
	mc.mutation.SetBlockHeight(u)
	return mc
}

// SetReceiptHash sets the "ReceiptHash" field.
func (mc *MsgCreate) SetReceiptHash(b []byte) *MsgCreate {
	mc.mutation.SetReceiptHash(b)
	return mc
}

// SetStatus sets the "Status" field.
func (mc *MsgCreate) SetStatus(s string) *MsgCreate {
	mc.mutation.SetStatus(s)
	return mc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (mc *MsgCreate) SetNillableStatus(s *string) *MsgCreate {
	if s != nil {
		mc.SetStatus(*s)
	}
	return mc
}

// SetBlockTime sets the "BlockTime" field.
func (mc *MsgCreate) SetBlockTime(t time.Time) *MsgCreate {
	mc.mutation.SetBlockTime(t)
	return mc
}

// SetNillableBlockTime sets the "BlockTime" field if the given value is not nil.
func (mc *MsgCreate) SetNillableBlockTime(t *time.Time) *MsgCreate {
	if t != nil {
		mc.SetBlockTime(*t)
	}
	return mc
}

// SetCreatedAt sets the "CreatedAt" field.
func (mc *MsgCreate) SetCreatedAt(t time.Time) *MsgCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (mc *MsgCreate) SetNillableCreatedAt(t *time.Time) *MsgCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetBlock sets the "Block" edge to the Block entity.
func (mc *MsgCreate) SetBlock(b *Block) *MsgCreate {
	return mc.SetBlockID(b.ID)
}

// AddReceiptIDs adds the "Receipts" edge to the Receipt entity by IDs.
func (mc *MsgCreate) AddReceiptIDs(ids ...int) *MsgCreate {
	mc.mutation.AddReceiptIDs(ids...)
	return mc
}

// AddReceipts adds the "Receipts" edges to the Receipt entity.
func (mc *MsgCreate) AddReceipts(r ...*Receipt) *MsgCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mc.AddReceiptIDs(ids...)
}

// Mutation returns the MsgMutation object of the builder.
func (mc *MsgCreate) Mutation() *MsgMutation {
	return mc.mutation
}

// Save creates the Msg in the database.
func (mc *MsgCreate) Save(ctx context.Context) (*Msg, error) {
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MsgCreate) SaveX(ctx context.Context) *Msg {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MsgCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MsgCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MsgCreate) defaults() error {
	if _, ok := mc.mutation.UUID(); !ok {
		if msg.DefaultUUID == nil {
			return fmt.Errorf("ent: uninitialized msg.DefaultUUID (forgotten import ent/runtime?)")
		}
		v := msg.DefaultUUID()
		mc.mutation.SetUUID(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := msg.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := msg.DefaultCreatedAt
		mc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MsgCreate) check() error {
	if _, ok := mc.mutation.UUID(); !ok {
		return &ValidationError{Name: "UUID", err: errors.New(`ent: missing required field "Msg.UUID"`)}
	}
	if _, ok := mc.mutation.SourceMsgSender(); !ok {
		return &ValidationError{Name: "SourceMsgSender", err: errors.New(`ent: missing required field "Msg.SourceMsgSender"`)}
	}
	if v, ok := mc.mutation.SourceMsgSender(); ok {
		if err := msg.SourceMsgSenderValidator(v); err != nil {
			return &ValidationError{Name: "SourceMsgSender", err: fmt.Errorf(`ent: validator failed for field "Msg.SourceMsgSender": %w`, err)}
		}
	}
	if _, ok := mc.mutation.DestAddress(); !ok {
		return &ValidationError{Name: "DestAddress", err: errors.New(`ent: missing required field "Msg.DestAddress"`)}
	}
	if v, ok := mc.mutation.DestAddress(); ok {
		if err := msg.DestAddressValidator(v); err != nil {
			return &ValidationError{Name: "DestAddress", err: fmt.Errorf(`ent: validator failed for field "Msg.DestAddress": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Data(); !ok {
		return &ValidationError{Name: "Data", err: errors.New(`ent: missing required field "Msg.Data"`)}
	}
	if _, ok := mc.mutation.DestGasLimit(); !ok {
		return &ValidationError{Name: "DestGasLimit", err: errors.New(`ent: missing required field "Msg.DestGasLimit"`)}
	}
	if _, ok := mc.mutation.SourceChainID(); !ok {
		return &ValidationError{Name: "SourceChainID", err: errors.New(`ent: missing required field "Msg.SourceChainID"`)}
	}
	if _, ok := mc.mutation.DestChainID(); !ok {
		return &ValidationError{Name: "DestChainID", err: errors.New(`ent: missing required field "Msg.DestChainID"`)}
	}
	if _, ok := mc.mutation.StreamOffset(); !ok {
		return &ValidationError{Name: "StreamOffset", err: errors.New(`ent: missing required field "Msg.StreamOffset"`)}
	}
	if _, ok := mc.mutation.TxHash(); !ok {
		return &ValidationError{Name: "TxHash", err: errors.New(`ent: missing required field "Msg.TxHash"`)}
	}
	if v, ok := mc.mutation.TxHash(); ok {
		if err := msg.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "TxHash", err: fmt.Errorf(`ent: validator failed for field "Msg.TxHash": %w`, err)}
		}
	}
	if v, ok := mc.mutation.BlockHash(); ok {
		if err := msg.BlockHashValidator(v); err != nil {
			return &ValidationError{Name: "BlockHash", err: fmt.Errorf(`ent: validator failed for field "Msg.BlockHash": %w`, err)}
		}
	}
	if _, ok := mc.mutation.BlockHeight(); !ok {
		return &ValidationError{Name: "BlockHeight", err: errors.New(`ent: missing required field "Msg.BlockHeight"`)}
	}
	if v, ok := mc.mutation.ReceiptHash(); ok {
		if err := msg.ReceiptHashValidator(v); err != nil {
			return &ValidationError{Name: "ReceiptHash", err: fmt.Errorf(`ent: validator failed for field "Msg.ReceiptHash": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "Msg.CreatedAt"`)}
	}
	return nil
}

func (mc *MsgCreate) sqlSave(ctx context.Context) (*Msg, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MsgCreate) createSpec() (*Msg, *sqlgraph.CreateSpec) {
	var (
		_node = &Msg{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(msg.Table, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.UUID(); ok {
		_spec.SetField(msg.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := mc.mutation.SourceMsgSender(); ok {
		_spec.SetField(msg.FieldSourceMsgSender, field.TypeBytes, value)
		_node.SourceMsgSender = value
	}
	if value, ok := mc.mutation.DestAddress(); ok {
		_spec.SetField(msg.FieldDestAddress, field.TypeBytes, value)
		_node.DestAddress = value
	}
	if value, ok := mc.mutation.Data(); ok {
		_spec.SetField(msg.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	if value, ok := mc.mutation.DestGasLimit(); ok {
		_spec.SetField(msg.FieldDestGasLimit, field.TypeUint64, value)
		_node.DestGasLimit = value
	}
	if value, ok := mc.mutation.SourceChainID(); ok {
		_spec.SetField(msg.FieldSourceChainID, field.TypeUint64, value)
		_node.SourceChainID = value
	}
	if value, ok := mc.mutation.DestChainID(); ok {
		_spec.SetField(msg.FieldDestChainID, field.TypeUint64, value)
		_node.DestChainID = value
	}
	if value, ok := mc.mutation.StreamOffset(); ok {
		_spec.SetField(msg.FieldStreamOffset, field.TypeUint64, value)
		_node.StreamOffset = value
	}
	if value, ok := mc.mutation.TxHash(); ok {
		_spec.SetField(msg.FieldTxHash, field.TypeBytes, value)
		_node.TxHash = value
	}
	if value, ok := mc.mutation.BlockHash(); ok {
		_spec.SetField(msg.FieldBlockHash, field.TypeBytes, value)
		_node.BlockHash = value
	}
	if value, ok := mc.mutation.BlockHeight(); ok {
		_spec.SetField(msg.FieldBlockHeight, field.TypeUint64, value)
		_node.BlockHeight = value
	}
	if value, ok := mc.mutation.ReceiptHash(); ok {
		_spec.SetField(msg.FieldReceiptHash, field.TypeBytes, value)
		_node.ReceiptHash = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(msg.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.BlockTime(); ok {
		_spec.SetField(msg.FieldBlockTime, field.TypeTime, value)
		_node.BlockTime = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(msg.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mc.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.BlockTable,
			Columns: []string{msg.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlockID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   msg.ReceiptsTable,
			Columns: msg.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MsgCreateBulk is the builder for creating many Msg entities in bulk.
type MsgCreateBulk struct {
	config
	err      error
	builders []*MsgCreate
}

// Save creates the Msg entities in the database.
func (mcb *MsgCreateBulk) Save(ctx context.Context) ([]*Msg, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Msg, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MsgCreateBulk) SaveX(ctx context.Context) []*Msg {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MsgCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MsgCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
