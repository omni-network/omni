// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/omni-network/omni/explorer/db/ent/receipt"
)

// Receipt is the model entity for the Receipt schema.
type Receipt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BlockHash holds the value of the "block_hash" field.
	BlockHash []byte `json:"block_hash,omitempty"`
	// GasUsed holds the value of the "gas_used" field.
	GasUsed uint64 `json:"gas_used,omitempty"`
	// Success holds the value of the "success" field.
	Success bool `json:"success,omitempty"`
	// RelayerAddress holds the value of the "relayer_address" field.
	RelayerAddress []byte `json:"relayer_address,omitempty"`
	// SourceChainID holds the value of the "source_chain_id" field.
	SourceChainID uint64 `json:"source_chain_id,omitempty"`
	// DestChainID holds the value of the "dest_chain_id" field.
	DestChainID uint64 `json:"dest_chain_id,omitempty"`
	// Offset holds the value of the "offset" field.
	Offset uint64 `json:"offset,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash []byte `json:"tx_hash,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// RevertReason holds the value of the "revert_reason" field.
	RevertReason string `json:"revert_reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceiptQuery when eager-loading is set.
	Edges        ReceiptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReceiptEdges holds the relations/edges for other nodes in the graph.
type ReceiptEdges struct {
	// Block holds the value of the block edge.
	Block []*Block `json:"block,omitempty"`
	// Msgs holds the value of the msgs edge.
	Msgs []*Msg `json:"msgs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading.
func (e ReceiptEdges) BlockOrErr() ([]*Block, error) {
	if e.loadedTypes[0] {
		return e.Block, nil
	}
	return nil, &NotLoadedError{edge: "block"}
}

// MsgsOrErr returns the Msgs value or an error if the edge
// was not loaded in eager-loading.
func (e ReceiptEdges) MsgsOrErr() ([]*Msg, error) {
	if e.loadedTypes[1] {
		return e.Msgs, nil
	}
	return nil, &NotLoadedError{edge: "msgs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Receipt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case receipt.FieldBlockHash, receipt.FieldRelayerAddress, receipt.FieldTxHash:
			values[i] = new([]byte)
		case receipt.FieldSuccess:
			values[i] = new(sql.NullBool)
		case receipt.FieldID, receipt.FieldGasUsed, receipt.FieldSourceChainID, receipt.FieldDestChainID, receipt.FieldOffset:
			values[i] = new(sql.NullInt64)
		case receipt.FieldRevertReason:
			values[i] = new(sql.NullString)
		case receipt.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Receipt fields.
func (r *Receipt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case receipt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case receipt.FieldBlockHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field block_hash", values[i])
			} else if value != nil {
				r.BlockHash = *value
			}
		case receipt.FieldGasUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gas_used", values[i])
			} else if value.Valid {
				r.GasUsed = uint64(value.Int64)
			}
		case receipt.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				r.Success = value.Bool
			}
		case receipt.FieldRelayerAddress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field relayer_address", values[i])
			} else if value != nil {
				r.RelayerAddress = *value
			}
		case receipt.FieldSourceChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_chain_id", values[i])
			} else if value.Valid {
				r.SourceChainID = uint64(value.Int64)
			}
		case receipt.FieldDestChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dest_chain_id", values[i])
			} else if value.Valid {
				r.DestChainID = uint64(value.Int64)
			}
		case receipt.FieldOffset:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field offset", values[i])
			} else if value.Valid {
				r.Offset = uint64(value.Int64)
			}
		case receipt.FieldTxHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value != nil {
				r.TxHash = *value
			}
		case receipt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case receipt.FieldRevertReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revert_reason", values[i])
			} else if value.Valid {
				r.RevertReason = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Receipt.
// This includes values selected through modifiers, order, etc.
func (r *Receipt) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the Receipt entity.
func (r *Receipt) QueryBlock() *BlockQuery {
	return NewReceiptClient(r.config).QueryBlock(r)
}

// QueryMsgs queries the "msgs" edge of the Receipt entity.
func (r *Receipt) QueryMsgs() *MsgQuery {
	return NewReceiptClient(r.config).QueryMsgs(r)
}

// Update returns a builder for updating this Receipt.
// Note that you need to call Receipt.Unwrap() before calling this method if this Receipt
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Receipt) Update() *ReceiptUpdateOne {
	return NewReceiptClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Receipt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Receipt) Unwrap() *Receipt {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Receipt is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Receipt) String() string {
	var builder strings.Builder
	builder.WriteString("Receipt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("block_hash=")
	builder.WriteString(fmt.Sprintf("%v", r.BlockHash))
	builder.WriteString(", ")
	builder.WriteString("gas_used=")
	builder.WriteString(fmt.Sprintf("%v", r.GasUsed))
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", r.Success))
	builder.WriteString(", ")
	builder.WriteString("relayer_address=")
	builder.WriteString(fmt.Sprintf("%v", r.RelayerAddress))
	builder.WriteString(", ")
	builder.WriteString("source_chain_id=")
	builder.WriteString(fmt.Sprintf("%v", r.SourceChainID))
	builder.WriteString(", ")
	builder.WriteString("dest_chain_id=")
	builder.WriteString(fmt.Sprintf("%v", r.DestChainID))
	builder.WriteString(", ")
	builder.WriteString("offset=")
	builder.WriteString(fmt.Sprintf("%v", r.Offset))
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(fmt.Sprintf("%v", r.TxHash))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("revert_reason=")
	builder.WriteString(r.RevertReason)
	builder.WriteByte(')')
	return builder.String()
}

// Receipts is a parsable slice of Receipt.
type Receipts []*Receipt
