// Code generated by ent, DO NOT EDIT.

package msg

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the msg type in the database.
	Label = "msg"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldSourceMsgSender holds the string denoting the sourcemsgsender field in the database.
	FieldSourceMsgSender = "source_msg_sender"
	// FieldDestAddress holds the string denoting the destaddress field in the database.
	FieldDestAddress = "dest_address"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldDestGasLimit holds the string denoting the destgaslimit field in the database.
	FieldDestGasLimit = "dest_gas_limit"
	// FieldSourceChainID holds the string denoting the sourcechainid field in the database.
	FieldSourceChainID = "source_chain_id"
	// FieldDestChainID holds the string denoting the destchainid field in the database.
	FieldDestChainID = "dest_chain_id"
	// FieldStreamOffset holds the string denoting the streamoffset field in the database.
	FieldStreamOffset = "stream_offset"
	// FieldTxHash holds the string denoting the txhash field in the database.
	FieldTxHash = "tx_hash"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "Block"
	// Table holds the table name of the msg in the database.
	Table = "msgs"
	// BlockTable is the table that holds the Block relation/edge.
	BlockTable = "msgs"
	// BlockInverseTable is the table name for the Block entity.
	// It exists in this package in order to avoid circular dependency with the "block" package.
	BlockInverseTable = "blocks"
	// BlockColumn is the table column denoting the Block relation/edge.
	BlockColumn = "block_msgs"
)

// Columns holds all SQL columns for msg fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldSourceMsgSender,
	FieldDestAddress,
	FieldData,
	FieldDestGasLimit,
	FieldSourceChainID,
	FieldDestChainID,
	FieldStreamOffset,
	FieldTxHash,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "msgs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"block_msgs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "UUID" field.
	DefaultUUID func() uuid.UUID
	// SourceMsgSenderValidator is a validator for the "SourceMsgSender" field. It is called by the builders before save.
	SourceMsgSenderValidator func([]byte) error
	// DestAddressValidator is a validator for the "DestAddress" field. It is called by the builders before save.
	DestAddressValidator func([]byte) error
	// TxHashValidator is a validator for the "TxHash" field. It is called by the builders before save.
	TxHashValidator func([]byte) error
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Msg queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the UUID field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByDestGasLimit orders the results by the DestGasLimit field.
func ByDestGasLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestGasLimit, opts...).ToFunc()
}

// BySourceChainID orders the results by the SourceChainID field.
func BySourceChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceChainID, opts...).ToFunc()
}

// ByDestChainID orders the results by the DestChainID field.
func ByDestChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestChainID, opts...).ToFunc()
}

// ByStreamOffset orders the results by the StreamOffset field.
func ByStreamOffset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreamOffset, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBlockField orders the results by Block field.
func ByBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
	)
}
