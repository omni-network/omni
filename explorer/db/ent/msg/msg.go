// Code generated by ent, DO NOT EDIT.

package msg

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the msg type in the database.
	Label = "msg"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSender holds the string denoting the sender field in the database.
	FieldSender = "sender"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldGasLimit holds the string denoting the gas_limit field in the database.
	FieldGasLimit = "gas_limit"
	// FieldSourceChainID holds the string denoting the source_chain_id field in the database.
	FieldSourceChainID = "source_chain_id"
	// FieldDestChainID holds the string denoting the dest_chain_id field in the database.
	FieldDestChainID = "dest_chain_id"
	// FieldOffset holds the string denoting the offset field in the database.
	FieldOffset = "offset"
	// FieldTxHash holds the string denoting the tx_hash field in the database.
	FieldTxHash = "tx_hash"
	// FieldReceiptHash holds the string denoting the receipt_hash field in the database.
	FieldReceiptHash = "receipt_hash"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// EdgeReceipts holds the string denoting the receipts edge name in mutations.
	EdgeReceipts = "receipts"
	// Table holds the table name of the msg in the database.
	Table = "msgs"
	// BlockTable is the table that holds the block relation/edge. The primary key declared below.
	BlockTable = "block_msgs"
	// BlockInverseTable is the table name for the Block entity.
	// It exists in this package in order to avoid circular dependency with the "block" package.
	BlockInverseTable = "blocks"
	// ReceiptsTable is the table that holds the receipts relation/edge. The primary key declared below.
	ReceiptsTable = "msg_receipts"
	// ReceiptsInverseTable is the table name for the Receipt entity.
	// It exists in this package in order to avoid circular dependency with the "receipt" package.
	ReceiptsInverseTable = "receipts"
)

// Columns holds all SQL columns for msg fields.
var Columns = []string{
	FieldID,
	FieldSender,
	FieldTo,
	FieldData,
	FieldGasLimit,
	FieldSourceChainID,
	FieldDestChainID,
	FieldOffset,
	FieldTxHash,
	FieldReceiptHash,
	FieldStatus,
	FieldCreatedAt,
}

var (
	// BlockPrimaryKey and BlockColumn2 are the table columns denoting the
	// primary key for the block relation (M2M).
	BlockPrimaryKey = []string{"block_id", "msg_id"}
	// ReceiptsPrimaryKey and ReceiptsColumn2 are the table columns denoting the
	// primary key for the receipts relation (M2M).
	ReceiptsPrimaryKey = []string{"msg_id", "receipt_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/omni-network/omni/explorer/db/ent/runtime"
var (
	Hooks [1]ent.Hook
	// SenderValidator is a validator for the "sender" field. It is called by the builders before save.
	SenderValidator func([]byte) error
	// ToValidator is a validator for the "to" field. It is called by the builders before save.
	ToValidator func([]byte) error
	// TxHashValidator is a validator for the "tx_hash" field. It is called by the builders before save.
	TxHashValidator func([]byte) error
	// ReceiptHashValidator is a validator for the "receipt_hash" field. It is called by the builders before save.
	ReceiptHashValidator func([]byte) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Msg queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGasLimit orders the results by the gas_limit field.
func ByGasLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasLimit, opts...).ToFunc()
}

// BySourceChainID orders the results by the source_chain_id field.
func BySourceChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceChainID, opts...).ToFunc()
}

// ByDestChainID orders the results by the dest_chain_id field.
func ByDestChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestChainID, opts...).ToFunc()
}

// ByOffset orders the results by the offset field.
func ByOffset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOffset, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBlockCount orders the results by block count.
func ByBlockCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlockStep(), opts...)
	}
}

// ByBlock orders the results by block terms.
func ByBlock(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceiptsCount orders the results by receipts count.
func ByReceiptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiptsStep(), opts...)
	}
}

// ByReceipts orders the results by receipts terms.
func ByReceipts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BlockTable, BlockPrimaryKey...),
	)
}
func newReceiptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReceiptsTable, ReceiptsPrimaryKey...),
	)
}
