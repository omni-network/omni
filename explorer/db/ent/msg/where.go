// Code generated by ent, DO NOT EDIT.

package msg

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldID, id))
}

// Sender applies equality check predicate on the "sender" field. It's identical to SenderEQ.
func Sender(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSender, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldTo, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldData, v))
}

// GasLimit applies equality check predicate on the "gas_limit" field. It's identical to GasLimitEQ.
func GasLimit(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldGasLimit, v))
}

// SourceChainID applies equality check predicate on the "source_chain_id" field. It's identical to SourceChainIDEQ.
func SourceChainID(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSourceChainID, v))
}

// DestChainID applies equality check predicate on the "dest_chain_id" field. It's identical to DestChainIDEQ.
func DestChainID(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldDestChainID, v))
}

// Offset applies equality check predicate on the "offset" field. It's identical to OffsetEQ.
func Offset(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldOffset, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldTxHash, v))
}

// ReceiptHash applies equality check predicate on the "receipt_hash" field. It's identical to ReceiptHashEQ.
func ReceiptHash(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldReceiptHash, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldCreatedAt, v))
}

// SenderEQ applies the EQ predicate on the "sender" field.
func SenderEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSender, v))
}

// SenderNEQ applies the NEQ predicate on the "sender" field.
func SenderNEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldSender, v))
}

// SenderIn applies the In predicate on the "sender" field.
func SenderIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldSender, vs...))
}

// SenderNotIn applies the NotIn predicate on the "sender" field.
func SenderNotIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldSender, vs...))
}

// SenderGT applies the GT predicate on the "sender" field.
func SenderGT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldSender, v))
}

// SenderGTE applies the GTE predicate on the "sender" field.
func SenderGTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldSender, v))
}

// SenderLT applies the LT predicate on the "sender" field.
func SenderLT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldSender, v))
}

// SenderLTE applies the LTE predicate on the "sender" field.
func SenderLTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldSender, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldTo, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldData, v))
}

// GasLimitEQ applies the EQ predicate on the "gas_limit" field.
func GasLimitEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldGasLimit, v))
}

// GasLimitNEQ applies the NEQ predicate on the "gas_limit" field.
func GasLimitNEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldGasLimit, v))
}

// GasLimitIn applies the In predicate on the "gas_limit" field.
func GasLimitIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldGasLimit, vs...))
}

// GasLimitNotIn applies the NotIn predicate on the "gas_limit" field.
func GasLimitNotIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldGasLimit, vs...))
}

// GasLimitGT applies the GT predicate on the "gas_limit" field.
func GasLimitGT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldGasLimit, v))
}

// GasLimitGTE applies the GTE predicate on the "gas_limit" field.
func GasLimitGTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldGasLimit, v))
}

// GasLimitLT applies the LT predicate on the "gas_limit" field.
func GasLimitLT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldGasLimit, v))
}

// GasLimitLTE applies the LTE predicate on the "gas_limit" field.
func GasLimitLTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldGasLimit, v))
}

// SourceChainIDEQ applies the EQ predicate on the "source_chain_id" field.
func SourceChainIDEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSourceChainID, v))
}

// SourceChainIDNEQ applies the NEQ predicate on the "source_chain_id" field.
func SourceChainIDNEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldSourceChainID, v))
}

// SourceChainIDIn applies the In predicate on the "source_chain_id" field.
func SourceChainIDIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldSourceChainID, vs...))
}

// SourceChainIDNotIn applies the NotIn predicate on the "source_chain_id" field.
func SourceChainIDNotIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldSourceChainID, vs...))
}

// SourceChainIDGT applies the GT predicate on the "source_chain_id" field.
func SourceChainIDGT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldSourceChainID, v))
}

// SourceChainIDGTE applies the GTE predicate on the "source_chain_id" field.
func SourceChainIDGTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldSourceChainID, v))
}

// SourceChainIDLT applies the LT predicate on the "source_chain_id" field.
func SourceChainIDLT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldSourceChainID, v))
}

// SourceChainIDLTE applies the LTE predicate on the "source_chain_id" field.
func SourceChainIDLTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldSourceChainID, v))
}

// DestChainIDEQ applies the EQ predicate on the "dest_chain_id" field.
func DestChainIDEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldDestChainID, v))
}

// DestChainIDNEQ applies the NEQ predicate on the "dest_chain_id" field.
func DestChainIDNEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldDestChainID, v))
}

// DestChainIDIn applies the In predicate on the "dest_chain_id" field.
func DestChainIDIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldDestChainID, vs...))
}

// DestChainIDNotIn applies the NotIn predicate on the "dest_chain_id" field.
func DestChainIDNotIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldDestChainID, vs...))
}

// DestChainIDGT applies the GT predicate on the "dest_chain_id" field.
func DestChainIDGT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldDestChainID, v))
}

// DestChainIDGTE applies the GTE predicate on the "dest_chain_id" field.
func DestChainIDGTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldDestChainID, v))
}

// DestChainIDLT applies the LT predicate on the "dest_chain_id" field.
func DestChainIDLT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldDestChainID, v))
}

// DestChainIDLTE applies the LTE predicate on the "dest_chain_id" field.
func DestChainIDLTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldDestChainID, v))
}

// OffsetEQ applies the EQ predicate on the "offset" field.
func OffsetEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldOffset, v))
}

// OffsetNEQ applies the NEQ predicate on the "offset" field.
func OffsetNEQ(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldOffset, v))
}

// OffsetIn applies the In predicate on the "offset" field.
func OffsetIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldOffset, vs...))
}

// OffsetNotIn applies the NotIn predicate on the "offset" field.
func OffsetNotIn(vs ...uint64) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldOffset, vs...))
}

// OffsetGT applies the GT predicate on the "offset" field.
func OffsetGT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldOffset, v))
}

// OffsetGTE applies the GTE predicate on the "offset" field.
func OffsetGTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldOffset, v))
}

// OffsetLT applies the LT predicate on the "offset" field.
func OffsetLT(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldOffset, v))
}

// OffsetLTE applies the LTE predicate on the "offset" field.
func OffsetLTE(v uint64) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldOffset, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldTxHash, v))
}

// ReceiptHashEQ applies the EQ predicate on the "receipt_hash" field.
func ReceiptHashEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldReceiptHash, v))
}

// ReceiptHashNEQ applies the NEQ predicate on the "receipt_hash" field.
func ReceiptHashNEQ(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldReceiptHash, v))
}

// ReceiptHashIn applies the In predicate on the "receipt_hash" field.
func ReceiptHashIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldReceiptHash, vs...))
}

// ReceiptHashNotIn applies the NotIn predicate on the "receipt_hash" field.
func ReceiptHashNotIn(vs ...[]byte) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldReceiptHash, vs...))
}

// ReceiptHashGT applies the GT predicate on the "receipt_hash" field.
func ReceiptHashGT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldReceiptHash, v))
}

// ReceiptHashGTE applies the GTE predicate on the "receipt_hash" field.
func ReceiptHashGTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldReceiptHash, v))
}

// ReceiptHashLT applies the LT predicate on the "receipt_hash" field.
func ReceiptHashLT(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldReceiptHash, v))
}

// ReceiptHashLTE applies the LTE predicate on the "receipt_hash" field.
func ReceiptHashLTE(v []byte) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldReceiptHash, v))
}

// ReceiptHashIsNil applies the IsNil predicate on the "receipt_hash" field.
func ReceiptHashIsNil() predicate.Msg {
	return predicate.Msg(sql.FieldIsNull(FieldReceiptHash))
}

// ReceiptHashNotNil applies the NotNil predicate on the "receipt_hash" field.
func ReceiptHashNotNil() predicate.Msg {
	return predicate.Msg(sql.FieldNotNull(FieldReceiptHash))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Msg {
	return predicate.Msg(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Msg {
	return predicate.Msg(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Msg {
	return predicate.Msg(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Msg {
	return predicate.Msg(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Msg {
	return predicate.Msg(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Msg {
	return predicate.Msg(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Msg {
	return predicate.Msg(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldCreatedAt, v))
}

// HasBlock applies the HasEdge predicate on the "block" edge.
func HasBlock() predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BlockTable, BlockPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockWith applies the HasEdge predicate on the "block" edge with a given conditions (other predicates).
func HasBlockWith(preds ...predicate.Block) predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := newBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceipts applies the HasEdge predicate on the "receipts" edge.
func HasReceipts() predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReceiptsTable, ReceiptsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiptsWith applies the HasEdge predicate on the "receipts" edge with a given conditions (other predicates).
func HasReceiptsWith(preds ...predicate.Receipt) predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := newReceiptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Msg) predicate.Msg {
	return predicate.Msg(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Msg) predicate.Msg {
	return predicate.Msg(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Msg) predicate.Msg {
	return predicate.Msg(sql.NotPredicates(p))
}
