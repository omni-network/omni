// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omni-network/omni/explorer/db/ent/block"
	"github.com/omni-network/omni/explorer/db/ent/msg"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
	"github.com/omni-network/omni/explorer/db/ent/receipt"
)

// BlockUpdate is the builder for updating Block entities.
type BlockUpdate struct {
	config
	hooks    []Hook
	mutation *BlockMutation
}

// Where appends a list predicates to the BlockUpdate builder.
func (bu *BlockUpdate) Where(ps ...predicate.Block) *BlockUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetHash sets the "hash" field.
func (bu *BlockUpdate) SetHash(b []byte) *BlockUpdate {
	bu.mutation.SetHash(b)
	return bu
}

// SetChainID sets the "chain_id" field.
func (bu *BlockUpdate) SetChainID(u uint64) *BlockUpdate {
	bu.mutation.ResetChainID()
	bu.mutation.SetChainID(u)
	return bu
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableChainID(u *uint64) *BlockUpdate {
	if u != nil {
		bu.SetChainID(*u)
	}
	return bu
}

// AddChainID adds u to the "chain_id" field.
func (bu *BlockUpdate) AddChainID(u int64) *BlockUpdate {
	bu.mutation.AddChainID(u)
	return bu
}

// SetHeight sets the "height" field.
func (bu *BlockUpdate) SetHeight(u uint64) *BlockUpdate {
	bu.mutation.ResetHeight()
	bu.mutation.SetHeight(u)
	return bu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableHeight(u *uint64) *BlockUpdate {
	if u != nil {
		bu.SetHeight(*u)
	}
	return bu
}

// AddHeight adds u to the "height" field.
func (bu *BlockUpdate) AddHeight(u int64) *BlockUpdate {
	bu.mutation.AddHeight(u)
	return bu
}

// SetOffset sets the "offset" field.
func (bu *BlockUpdate) SetOffset(u uint64) *BlockUpdate {
	bu.mutation.ResetOffset()
	bu.mutation.SetOffset(u)
	return bu
}

// SetNillableOffset sets the "offset" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableOffset(u *uint64) *BlockUpdate {
	if u != nil {
		bu.SetOffset(*u)
	}
	return bu
}

// AddOffset adds u to the "offset" field.
func (bu *BlockUpdate) AddOffset(u int64) *BlockUpdate {
	bu.mutation.AddOffset(u)
	return bu
}

// SetTimestamp sets the "timestamp" field.
func (bu *BlockUpdate) SetTimestamp(t time.Time) *BlockUpdate {
	bu.mutation.SetTimestamp(t)
	return bu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableTimestamp(t *time.Time) *BlockUpdate {
	if t != nil {
		bu.SetTimestamp(*t)
	}
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BlockUpdate) SetCreatedAt(t time.Time) *BlockUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableCreatedAt(t *time.Time) *BlockUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// AddMsgIDs adds the "msgs" edge to the Msg entity by IDs.
func (bu *BlockUpdate) AddMsgIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddMsgIDs(ids...)
	return bu
}

// AddMsgs adds the "msgs" edges to the Msg entity.
func (bu *BlockUpdate) AddMsgs(m ...*Msg) *BlockUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bu.AddMsgIDs(ids...)
}

// AddReceiptIDs adds the "receipts" edge to the Receipt entity by IDs.
func (bu *BlockUpdate) AddReceiptIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddReceiptIDs(ids...)
	return bu
}

// AddReceipts adds the "receipts" edges to the Receipt entity.
func (bu *BlockUpdate) AddReceipts(r ...*Receipt) *BlockUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bu.AddReceiptIDs(ids...)
}

// Mutation returns the BlockMutation object of the builder.
func (bu *BlockUpdate) Mutation() *BlockMutation {
	return bu.mutation
}

// ClearMsgs clears all "msgs" edges to the Msg entity.
func (bu *BlockUpdate) ClearMsgs() *BlockUpdate {
	bu.mutation.ClearMsgs()
	return bu
}

// RemoveMsgIDs removes the "msgs" edge to Msg entities by IDs.
func (bu *BlockUpdate) RemoveMsgIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemoveMsgIDs(ids...)
	return bu
}

// RemoveMsgs removes "msgs" edges to Msg entities.
func (bu *BlockUpdate) RemoveMsgs(m ...*Msg) *BlockUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bu.RemoveMsgIDs(ids...)
}

// ClearReceipts clears all "receipts" edges to the Receipt entity.
func (bu *BlockUpdate) ClearReceipts() *BlockUpdate {
	bu.mutation.ClearReceipts()
	return bu
}

// RemoveReceiptIDs removes the "receipts" edge to Receipt entities by IDs.
func (bu *BlockUpdate) RemoveReceiptIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemoveReceiptIDs(ids...)
	return bu
}

// RemoveReceipts removes "receipts" edges to Receipt entities.
func (bu *BlockUpdate) RemoveReceipts(r ...*Receipt) *BlockUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bu.RemoveReceiptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlockUpdate) check() error {
	if v, ok := bu.mutation.Hash(); ok {
		if err := block.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Block.hash": %w`, err)}
		}
	}
	return nil
}

func (bu *BlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(block.Table, block.Columns, sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Hash(); ok {
		_spec.SetField(block.FieldHash, field.TypeBytes, value)
	}
	if value, ok := bu.mutation.ChainID(); ok {
		_spec.SetField(block.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.AddedChainID(); ok {
		_spec.AddField(block.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.Height(); ok {
		_spec.SetField(block.FieldHeight, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.AddedHeight(); ok {
		_spec.AddField(block.FieldHeight, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.Offset(); ok {
		_spec.SetField(block.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.AddedOffset(); ok {
		_spec.AddField(block.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.Timestamp(); ok {
		_spec.SetField(block.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(block.FieldCreatedAt, field.TypeTime, value)
	}
	if bu.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.MsgsTable,
			Columns: block.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedMsgsIDs(); len(nodes) > 0 && !bu.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.MsgsTable,
			Columns: block.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MsgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.MsgsTable,
			Columns: block.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.ReceiptsTable,
			Columns: block.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !bu.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.ReceiptsTable,
			Columns: block.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.ReceiptsTable,
			Columns: block.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlockUpdateOne is the builder for updating a single Block entity.
type BlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockMutation
}

// SetHash sets the "hash" field.
func (buo *BlockUpdateOne) SetHash(b []byte) *BlockUpdateOne {
	buo.mutation.SetHash(b)
	return buo
}

// SetChainID sets the "chain_id" field.
func (buo *BlockUpdateOne) SetChainID(u uint64) *BlockUpdateOne {
	buo.mutation.ResetChainID()
	buo.mutation.SetChainID(u)
	return buo
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableChainID(u *uint64) *BlockUpdateOne {
	if u != nil {
		buo.SetChainID(*u)
	}
	return buo
}

// AddChainID adds u to the "chain_id" field.
func (buo *BlockUpdateOne) AddChainID(u int64) *BlockUpdateOne {
	buo.mutation.AddChainID(u)
	return buo
}

// SetHeight sets the "height" field.
func (buo *BlockUpdateOne) SetHeight(u uint64) *BlockUpdateOne {
	buo.mutation.ResetHeight()
	buo.mutation.SetHeight(u)
	return buo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableHeight(u *uint64) *BlockUpdateOne {
	if u != nil {
		buo.SetHeight(*u)
	}
	return buo
}

// AddHeight adds u to the "height" field.
func (buo *BlockUpdateOne) AddHeight(u int64) *BlockUpdateOne {
	buo.mutation.AddHeight(u)
	return buo
}

// SetOffset sets the "offset" field.
func (buo *BlockUpdateOne) SetOffset(u uint64) *BlockUpdateOne {
	buo.mutation.ResetOffset()
	buo.mutation.SetOffset(u)
	return buo
}

// SetNillableOffset sets the "offset" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableOffset(u *uint64) *BlockUpdateOne {
	if u != nil {
		buo.SetOffset(*u)
	}
	return buo
}

// AddOffset adds u to the "offset" field.
func (buo *BlockUpdateOne) AddOffset(u int64) *BlockUpdateOne {
	buo.mutation.AddOffset(u)
	return buo
}

// SetTimestamp sets the "timestamp" field.
func (buo *BlockUpdateOne) SetTimestamp(t time.Time) *BlockUpdateOne {
	buo.mutation.SetTimestamp(t)
	return buo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableTimestamp(t *time.Time) *BlockUpdateOne {
	if t != nil {
		buo.SetTimestamp(*t)
	}
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BlockUpdateOne) SetCreatedAt(t time.Time) *BlockUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableCreatedAt(t *time.Time) *BlockUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// AddMsgIDs adds the "msgs" edge to the Msg entity by IDs.
func (buo *BlockUpdateOne) AddMsgIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddMsgIDs(ids...)
	return buo
}

// AddMsgs adds the "msgs" edges to the Msg entity.
func (buo *BlockUpdateOne) AddMsgs(m ...*Msg) *BlockUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return buo.AddMsgIDs(ids...)
}

// AddReceiptIDs adds the "receipts" edge to the Receipt entity by IDs.
func (buo *BlockUpdateOne) AddReceiptIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddReceiptIDs(ids...)
	return buo
}

// AddReceipts adds the "receipts" edges to the Receipt entity.
func (buo *BlockUpdateOne) AddReceipts(r ...*Receipt) *BlockUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return buo.AddReceiptIDs(ids...)
}

// Mutation returns the BlockMutation object of the builder.
func (buo *BlockUpdateOne) Mutation() *BlockMutation {
	return buo.mutation
}

// ClearMsgs clears all "msgs" edges to the Msg entity.
func (buo *BlockUpdateOne) ClearMsgs() *BlockUpdateOne {
	buo.mutation.ClearMsgs()
	return buo
}

// RemoveMsgIDs removes the "msgs" edge to Msg entities by IDs.
func (buo *BlockUpdateOne) RemoveMsgIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemoveMsgIDs(ids...)
	return buo
}

// RemoveMsgs removes "msgs" edges to Msg entities.
func (buo *BlockUpdateOne) RemoveMsgs(m ...*Msg) *BlockUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return buo.RemoveMsgIDs(ids...)
}

// ClearReceipts clears all "receipts" edges to the Receipt entity.
func (buo *BlockUpdateOne) ClearReceipts() *BlockUpdateOne {
	buo.mutation.ClearReceipts()
	return buo
}

// RemoveReceiptIDs removes the "receipts" edge to Receipt entities by IDs.
func (buo *BlockUpdateOne) RemoveReceiptIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemoveReceiptIDs(ids...)
	return buo
}

// RemoveReceipts removes "receipts" edges to Receipt entities.
func (buo *BlockUpdateOne) RemoveReceipts(r ...*Receipt) *BlockUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return buo.RemoveReceiptIDs(ids...)
}

// Where appends a list predicates to the BlockUpdate builder.
func (buo *BlockUpdateOne) Where(ps ...predicate.Block) *BlockUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlockUpdateOne) Select(field string, fields ...string) *BlockUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Block entity.
func (buo *BlockUpdateOne) Save(ctx context.Context) (*Block, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockUpdateOne) SaveX(ctx context.Context) *Block {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlockUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlockUpdateOne) check() error {
	if v, ok := buo.mutation.Hash(); ok {
		if err := block.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Block.hash": %w`, err)}
		}
	}
	return nil
}

func (buo *BlockUpdateOne) sqlSave(ctx context.Context) (_node *Block, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(block.Table, block.Columns, sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Block.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, block.FieldID)
		for _, f := range fields {
			if !block.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != block.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Hash(); ok {
		_spec.SetField(block.FieldHash, field.TypeBytes, value)
	}
	if value, ok := buo.mutation.ChainID(); ok {
		_spec.SetField(block.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.AddedChainID(); ok {
		_spec.AddField(block.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.Height(); ok {
		_spec.SetField(block.FieldHeight, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.AddedHeight(); ok {
		_spec.AddField(block.FieldHeight, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.Offset(); ok {
		_spec.SetField(block.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.AddedOffset(); ok {
		_spec.AddField(block.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.Timestamp(); ok {
		_spec.SetField(block.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(block.FieldCreatedAt, field.TypeTime, value)
	}
	if buo.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.MsgsTable,
			Columns: block.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedMsgsIDs(); len(nodes) > 0 && !buo.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.MsgsTable,
			Columns: block.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MsgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.MsgsTable,
			Columns: block.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.ReceiptsTable,
			Columns: block.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedReceiptsIDs(); len(nodes) > 0 && !buo.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.ReceiptsTable,
			Columns: block.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.ReceiptsTable,
			Columns: block.ReceiptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Block{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
