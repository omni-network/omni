// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
	"github.com/omni-network/omni/explorer/db/ent/xblock"
)

// XBlockUpdate is the builder for updating XBlock entities.
type XBlockUpdate struct {
	config
	hooks    []Hook
	mutation *XBlockMutation
}

// Where appends a list predicates to the XBlockUpdate builder.
func (xu *XBlockUpdate) Where(ps ...predicate.XBlock) *XBlockUpdate {
	xu.mutation.Where(ps...)
	return xu
}

// SetUUID sets the "uuid" field.
func (xu *XBlockUpdate) SetUUID(u uuid.UUID) *XBlockUpdate {
	xu.mutation.SetUUID(u)
	return xu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (xu *XBlockUpdate) SetNillableUUID(u *uuid.UUID) *XBlockUpdate {
	if u != nil {
		xu.SetUUID(*u)
	}
	return xu
}

// Mutation returns the XBlockMutation object of the builder.
func (xu *XBlockUpdate) Mutation() *XBlockMutation {
	return xu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (xu *XBlockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, xu.sqlSave, xu.mutation, xu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xu *XBlockUpdate) SaveX(ctx context.Context) int {
	affected, err := xu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (xu *XBlockUpdate) Exec(ctx context.Context) error {
	_, err := xu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xu *XBlockUpdate) ExecX(ctx context.Context) {
	if err := xu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (xu *XBlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(xblock.Table, xblock.Columns, sqlgraph.NewFieldSpec(xblock.FieldID, field.TypeInt))
	if ps := xu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xu.mutation.UUID(); ok {
		_spec.SetField(xblock.FieldUUID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, xu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	xu.mutation.done = true
	return n, nil
}

// XBlockUpdateOne is the builder for updating a single XBlock entity.
type XBlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *XBlockMutation
}

// SetUUID sets the "uuid" field.
func (xuo *XBlockUpdateOne) SetUUID(u uuid.UUID) *XBlockUpdateOne {
	xuo.mutation.SetUUID(u)
	return xuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (xuo *XBlockUpdateOne) SetNillableUUID(u *uuid.UUID) *XBlockUpdateOne {
	if u != nil {
		xuo.SetUUID(*u)
	}
	return xuo
}

// Mutation returns the XBlockMutation object of the builder.
func (xuo *XBlockUpdateOne) Mutation() *XBlockMutation {
	return xuo.mutation
}

// Where appends a list predicates to the XBlockUpdate builder.
func (xuo *XBlockUpdateOne) Where(ps ...predicate.XBlock) *XBlockUpdateOne {
	xuo.mutation.Where(ps...)
	return xuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (xuo *XBlockUpdateOne) Select(field string, fields ...string) *XBlockUpdateOne {
	xuo.fields = append([]string{field}, fields...)
	return xuo
}

// Save executes the query and returns the updated XBlock entity.
func (xuo *XBlockUpdateOne) Save(ctx context.Context) (*XBlock, error) {
	return withHooks(ctx, xuo.sqlSave, xuo.mutation, xuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xuo *XBlockUpdateOne) SaveX(ctx context.Context) *XBlock {
	node, err := xuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (xuo *XBlockUpdateOne) Exec(ctx context.Context) error {
	_, err := xuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xuo *XBlockUpdateOne) ExecX(ctx context.Context) {
	if err := xuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (xuo *XBlockUpdateOne) sqlSave(ctx context.Context) (_node *XBlock, err error) {
	_spec := sqlgraph.NewUpdateSpec(xblock.Table, xblock.Columns, sqlgraph.NewFieldSpec(xblock.FieldID, field.TypeInt))
	id, ok := xuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "XBlock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := xuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, xblock.FieldID)
		for _, f := range fields {
			if !xblock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != xblock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := xuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xuo.mutation.UUID(); ok {
		_spec.SetField(xblock.FieldUUID, field.TypeUUID, value)
	}
	_node = &XBlock{config: xuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, xuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	xuo.mutation.done = true
	return _node, nil
}
