// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/omni-network/omni/explorer/db/ent/block"
	"github.com/omni-network/omni/explorer/db/ent/msg"
)

// Msg is the model entity for the Msg schema.
type Msg struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "UUID" field.
	UUID uuid.UUID `json:"UUID,omitempty"`
	// BlockID holds the value of the "Block_ID" field.
	BlockID int `json:"Block_ID,omitempty"`
	// SourceMsgSender holds the value of the "SourceMsgSender" field.
	SourceMsgSender []byte `json:"SourceMsgSender,omitempty"`
	// DestAddress holds the value of the "DestAddress" field.
	DestAddress []byte `json:"DestAddress,omitempty"`
	// Data holds the value of the "Data" field.
	Data []byte `json:"Data,omitempty"`
	// DestGasLimit holds the value of the "DestGasLimit" field.
	DestGasLimit uint64 `json:"DestGasLimit,omitempty"`
	// SourceChainID holds the value of the "SourceChainID" field.
	SourceChainID uint64 `json:"SourceChainID,omitempty"`
	// DestChainID holds the value of the "DestChainID" field.
	DestChainID uint64 `json:"DestChainID,omitempty"`
	// StreamOffset holds the value of the "StreamOffset" field.
	StreamOffset uint64 `json:"StreamOffset,omitempty"`
	// TxHash holds the value of the "TxHash" field.
	TxHash []byte `json:"TxHash,omitempty"`
	// BlockHash holds the value of the "BlockHash" field.
	BlockHash []byte `json:"BlockHash,omitempty"`
	// BlockHeight holds the value of the "BlockHeight" field.
	BlockHeight uint64 `json:"BlockHeight,omitempty"`
	// ReceiptHash holds the value of the "ReceiptHash" field.
	ReceiptHash []byte `json:"ReceiptHash,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// BlockTime holds the value of the "BlockTime" field.
	BlockTime time.Time `json:"BlockTime,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MsgQuery when eager-loading is set.
	Edges        MsgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MsgEdges holds the relations/edges for other nodes in the graph.
type MsgEdges struct {
	// Block holds the value of the Block edge.
	Block *Block `json:"Block,omitempty"`
	// Receipts holds the value of the Receipts edge.
	Receipts []*Receipt `json:"Receipts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MsgEdges) BlockOrErr() (*Block, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: block.Label}
	}
	return nil, &NotLoadedError{edge: "Block"}
}

// ReceiptsOrErr returns the Receipts value or an error if the edge
// was not loaded in eager-loading.
func (e MsgEdges) ReceiptsOrErr() ([]*Receipt, error) {
	if e.loadedTypes[1] {
		return e.Receipts, nil
	}
	return nil, &NotLoadedError{edge: "Receipts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Msg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msg.FieldSourceMsgSender, msg.FieldDestAddress, msg.FieldData, msg.FieldTxHash, msg.FieldBlockHash, msg.FieldReceiptHash:
			values[i] = new([]byte)
		case msg.FieldID, msg.FieldBlockID, msg.FieldDestGasLimit, msg.FieldSourceChainID, msg.FieldDestChainID, msg.FieldStreamOffset, msg.FieldBlockHeight:
			values[i] = new(sql.NullInt64)
		case msg.FieldStatus:
			values[i] = new(sql.NullString)
		case msg.FieldBlockTime, msg.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case msg.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Msg fields.
func (m *Msg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case msg.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field UUID", values[i])
			} else if value != nil {
				m.UUID = *value
			}
		case msg.FieldBlockID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Block_ID", values[i])
			} else if value.Valid {
				m.BlockID = int(value.Int64)
			}
		case msg.FieldSourceMsgSender:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field SourceMsgSender", values[i])
			} else if value != nil {
				m.SourceMsgSender = *value
			}
		case msg.FieldDestAddress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field DestAddress", values[i])
			} else if value != nil {
				m.DestAddress = *value
			}
		case msg.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Data", values[i])
			} else if value != nil {
				m.Data = *value
			}
		case msg.FieldDestGasLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DestGasLimit", values[i])
			} else if value.Valid {
				m.DestGasLimit = uint64(value.Int64)
			}
		case msg.FieldSourceChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SourceChainID", values[i])
			} else if value.Valid {
				m.SourceChainID = uint64(value.Int64)
			}
		case msg.FieldDestChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DestChainID", values[i])
			} else if value.Valid {
				m.DestChainID = uint64(value.Int64)
			}
		case msg.FieldStreamOffset:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field StreamOffset", values[i])
			} else if value.Valid {
				m.StreamOffset = uint64(value.Int64)
			}
		case msg.FieldTxHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field TxHash", values[i])
			} else if value != nil {
				m.TxHash = *value
			}
		case msg.FieldBlockHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field BlockHash", values[i])
			} else if value != nil {
				m.BlockHash = *value
			}
		case msg.FieldBlockHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field BlockHeight", values[i])
			} else if value.Valid {
				m.BlockHeight = uint64(value.Int64)
			}
		case msg.FieldReceiptHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ReceiptHash", values[i])
			} else if value != nil {
				m.ReceiptHash = *value
			}
		case msg.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				m.Status = value.String
			}
		case msg.FieldBlockTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field BlockTime", values[i])
			} else if value.Valid {
				m.BlockTime = value.Time
			}
		case msg.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Msg.
// This includes values selected through modifiers, order, etc.
func (m *Msg) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryBlock queries the "Block" edge of the Msg entity.
func (m *Msg) QueryBlock() *BlockQuery {
	return NewMsgClient(m.config).QueryBlock(m)
}

// QueryReceipts queries the "Receipts" edge of the Msg entity.
func (m *Msg) QueryReceipts() *ReceiptQuery {
	return NewMsgClient(m.config).QueryReceipts(m)
}

// Update returns a builder for updating this Msg.
// Note that you need to call Msg.Unwrap() before calling this method if this Msg
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Msg) Update() *MsgUpdateOne {
	return NewMsgClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Msg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Msg) Unwrap() *Msg {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Msg is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Msg) String() string {
	var builder strings.Builder
	builder.WriteString("Msg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("UUID=")
	builder.WriteString(fmt.Sprintf("%v", m.UUID))
	builder.WriteString(", ")
	builder.WriteString("Block_ID=")
	builder.WriteString(fmt.Sprintf("%v", m.BlockID))
	builder.WriteString(", ")
	builder.WriteString("SourceMsgSender=")
	builder.WriteString(fmt.Sprintf("%v", m.SourceMsgSender))
	builder.WriteString(", ")
	builder.WriteString("DestAddress=")
	builder.WriteString(fmt.Sprintf("%v", m.DestAddress))
	builder.WriteString(", ")
	builder.WriteString("Data=")
	builder.WriteString(fmt.Sprintf("%v", m.Data))
	builder.WriteString(", ")
	builder.WriteString("DestGasLimit=")
	builder.WriteString(fmt.Sprintf("%v", m.DestGasLimit))
	builder.WriteString(", ")
	builder.WriteString("SourceChainID=")
	builder.WriteString(fmt.Sprintf("%v", m.SourceChainID))
	builder.WriteString(", ")
	builder.WriteString("DestChainID=")
	builder.WriteString(fmt.Sprintf("%v", m.DestChainID))
	builder.WriteString(", ")
	builder.WriteString("StreamOffset=")
	builder.WriteString(fmt.Sprintf("%v", m.StreamOffset))
	builder.WriteString(", ")
	builder.WriteString("TxHash=")
	builder.WriteString(fmt.Sprintf("%v", m.TxHash))
	builder.WriteString(", ")
	builder.WriteString("BlockHash=")
	builder.WriteString(fmt.Sprintf("%v", m.BlockHash))
	builder.WriteString(", ")
	builder.WriteString("BlockHeight=")
	builder.WriteString(fmt.Sprintf("%v", m.BlockHeight))
	builder.WriteString(", ")
	builder.WriteString("ReceiptHash=")
	builder.WriteString(fmt.Sprintf("%v", m.ReceiptHash))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(m.Status)
	builder.WriteString(", ")
	builder.WriteString("BlockTime=")
	builder.WriteString(m.BlockTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Msgs is a parsable slice of Msg.
type Msgs []*Msg
