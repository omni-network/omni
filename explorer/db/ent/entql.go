// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/omni-network/omni/explorer/db/ent/xblock"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   xblock.Table,
			Columns: xblock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: xblock.FieldID,
			},
		},
		Type: "XBlock",
		Fields: map[string]*sqlgraph.FieldSpec{
			xblock.FieldUUID: {Type: field.TypeUUID, Column: xblock.FieldUUID},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (xq *XBlockQuery) addPredicate(pred func(s *sql.Selector)) {
	xq.predicates = append(xq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the XBlockQuery builder.
func (xq *XBlockQuery) Filter() *XBlockFilter {
	return &XBlockFilter{config: xq.config, predicateAdder: xq}
}

// addPredicate implements the predicateAdder interface.
func (m *XBlockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the XBlockMutation builder.
func (m *XBlockMutation) Filter() *XBlockFilter {
	return &XBlockFilter{config: m.config, predicateAdder: m}
}

// XBlockFilter provides a generic filtering capability at runtime for XBlockQuery.
type XBlockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *XBlockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *XBlockFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(xblock.FieldID))
}

// WhereUUID applies the entql [16]byte predicate on the uuid field.
func (f *XBlockFilter) WhereUUID(p entql.ValueP) {
	f.Where(p.Field(xblock.FieldUUID))
}
