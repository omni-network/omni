// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
	"github.com/omni-network/omni/explorer/db/ent/xprovidercursor"
)

// XProviderCursorDelete is the builder for deleting a XProviderCursor entity.
type XProviderCursorDelete struct {
	config
	hooks    []Hook
	mutation *XProviderCursorMutation
}

// Where appends a list predicates to the XProviderCursorDelete builder.
func (xcd *XProviderCursorDelete) Where(ps ...predicate.XProviderCursor) *XProviderCursorDelete {
	xcd.mutation.Where(ps...)
	return xcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (xcd *XProviderCursorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, xcd.sqlExec, xcd.mutation, xcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (xcd *XProviderCursorDelete) ExecX(ctx context.Context) int {
	n, err := xcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (xcd *XProviderCursorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(xprovidercursor.Table, sqlgraph.NewFieldSpec(xprovidercursor.FieldID, field.TypeInt))
	if ps := xcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, xcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	xcd.mutation.done = true
	return affected, err
}

// XProviderCursorDeleteOne is the builder for deleting a single XProviderCursor entity.
type XProviderCursorDeleteOne struct {
	xcd *XProviderCursorDelete
}

// Where appends a list predicates to the XProviderCursorDelete builder.
func (xcdo *XProviderCursorDeleteOne) Where(ps ...predicate.XProviderCursor) *XProviderCursorDeleteOne {
	xcdo.xcd.mutation.Where(ps...)
	return xcdo
}

// Exec executes the deletion query.
func (xcdo *XProviderCursorDeleteOne) Exec(ctx context.Context) error {
	n, err := xcdo.xcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{xprovidercursor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (xcdo *XProviderCursorDeleteOne) ExecX(ctx context.Context) {
	if err := xcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
