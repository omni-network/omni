// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
	"github.com/omni-network/omni/explorer/db/ent/xblock"
)

// XBlockDelete is the builder for deleting a XBlock entity.
type XBlockDelete struct {
	config
	hooks    []Hook
	mutation *XBlockMutation
}

// Where appends a list predicates to the XBlockDelete builder.
func (xd *XBlockDelete) Where(ps ...predicate.XBlock) *XBlockDelete {
	xd.mutation.Where(ps...)
	return xd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (xd *XBlockDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, xd.sqlExec, xd.mutation, xd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (xd *XBlockDelete) ExecX(ctx context.Context) int {
	n, err := xd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (xd *XBlockDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(xblock.Table, sqlgraph.NewFieldSpec(xblock.FieldID, field.TypeInt))
	if ps := xd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, xd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	xd.mutation.done = true
	return affected, err
}

// XBlockDeleteOne is the builder for deleting a single XBlock entity.
type XBlockDeleteOne struct {
	xd *XBlockDelete
}

// Where appends a list predicates to the XBlockDelete builder.
func (xdo *XBlockDeleteOne) Where(ps ...predicate.XBlock) *XBlockDeleteOne {
	xdo.xd.mutation.Where(ps...)
	return xdo
}

// Exec executes the deletion query.
func (xdo *XBlockDeleteOne) Exec(ctx context.Context) error {
	n, err := xdo.xd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{xblock.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (xdo *XBlockDeleteOne) ExecX(ctx context.Context) {
	if err := xdo.Exec(ctx); err != nil {
		panic(err)
	}
}
