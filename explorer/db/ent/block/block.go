// Code generated by ent, DO NOT EDIT.

package block

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the block type in the database.
	Label = "block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceChainID holds the string denoting the sourcechainid field in the database.
	FieldSourceChainID = "source_chain_id"
	// FieldBlockHeight holds the string denoting the blockheight field in the database.
	FieldBlockHeight = "block_height"
	// FieldBlockHash holds the string denoting the blockhash field in the database.
	FieldBlockHash = "block_hash"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMsgs holds the string denoting the msgs edge name in mutations.
	EdgeMsgs = "Msgs"
	// EdgeReceipts holds the string denoting the receipts edge name in mutations.
	EdgeReceipts = "Receipts"
	// Table holds the table name of the block in the database.
	Table = "blocks"
	// MsgsTable is the table that holds the Msgs relation/edge.
	MsgsTable = "msgs"
	// MsgsInverseTable is the table name for the Msg entity.
	// It exists in this package in order to avoid circular dependency with the "msg" package.
	MsgsInverseTable = "msgs"
	// MsgsColumn is the table column denoting the Msgs relation/edge.
	MsgsColumn = "block_id"
	// ReceiptsTable is the table that holds the Receipts relation/edge.
	ReceiptsTable = "receipts"
	// ReceiptsInverseTable is the table name for the Receipt entity.
	// It exists in this package in order to avoid circular dependency with the "receipt" package.
	ReceiptsInverseTable = "receipts"
	// ReceiptsColumn is the table column denoting the Receipts relation/edge.
	ReceiptsColumn = "block_id"
)

// Columns holds all SQL columns for block fields.
var Columns = []string{
	FieldID,
	FieldSourceChainID,
	FieldBlockHeight,
	FieldBlockHash,
	FieldTimestamp,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BlockHashValidator is a validator for the "BlockHash" field. It is called by the builders before save.
	BlockHashValidator func([]byte) error
	// DefaultTimestamp holds the default value on creation for the "Timestamp" field.
	DefaultTimestamp time.Time
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Block queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceChainID orders the results by the SourceChainID field.
func BySourceChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceChainID, opts...).ToFunc()
}

// ByBlockHeight orders the results by the BlockHeight field.
func ByBlockHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHeight, opts...).ToFunc()
}

// ByTimestamp orders the results by the Timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMsgsCount orders the results by Msgs count.
func ByMsgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMsgsStep(), opts...)
	}
}

// ByMsgs orders the results by Msgs terms.
func ByMsgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMsgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceiptsCount orders the results by Receipts count.
func ByReceiptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiptsStep(), opts...)
	}
}

// ByReceipts orders the results by Receipts terms.
func ByReceipts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMsgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MsgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MsgsTable, MsgsColumn),
	)
}
func newReceiptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReceiptsTable, ReceiptsColumn),
	)
}
