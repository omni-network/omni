// Code generated by ent, DO NOT EDIT.

package block

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the block type in the database.
	Label = "block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldOffset holds the string denoting the offset field in the database.
	FieldOffset = "offset"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMsgs holds the string denoting the msgs edge name in mutations.
	EdgeMsgs = "msgs"
	// EdgeReceipts holds the string denoting the receipts edge name in mutations.
	EdgeReceipts = "receipts"
	// Table holds the table name of the block in the database.
	Table = "blocks"
	// MsgsTable is the table that holds the msgs relation/edge. The primary key declared below.
	MsgsTable = "block_msgs"
	// MsgsInverseTable is the table name for the Msg entity.
	// It exists in this package in order to avoid circular dependency with the "msg" package.
	MsgsInverseTable = "msgs"
	// ReceiptsTable is the table that holds the receipts relation/edge. The primary key declared below.
	ReceiptsTable = "block_receipts"
	// ReceiptsInverseTable is the table name for the Receipt entity.
	// It exists in this package in order to avoid circular dependency with the "receipt" package.
	ReceiptsInverseTable = "receipts"
)

// Columns holds all SQL columns for block fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldChainID,
	FieldHeight,
	FieldOffset,
	FieldTimestamp,
	FieldCreatedAt,
}

var (
	// MsgsPrimaryKey and MsgsColumn2 are the table columns denoting the
	// primary key for the msgs relation (M2M).
	MsgsPrimaryKey = []string{"block_id", "msg_id"}
	// ReceiptsPrimaryKey and ReceiptsColumn2 are the table columns denoting the
	// primary key for the receipts relation (M2M).
	ReceiptsPrimaryKey = []string{"block_id", "receipt_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func([]byte) error
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Block queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByOffset orders the results by the offset field.
func ByOffset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOffset, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMsgsCount orders the results by msgs count.
func ByMsgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMsgsStep(), opts...)
	}
}

// ByMsgs orders the results by msgs terms.
func ByMsgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMsgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceiptsCount orders the results by receipts count.
func ByReceiptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiptsStep(), opts...)
	}
}

// ByReceipts orders the results by receipts terms.
func ByReceipts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMsgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MsgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MsgsTable, MsgsPrimaryKey...),
	)
}
func newReceiptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReceiptsTable, ReceiptsPrimaryKey...),
	)
}
