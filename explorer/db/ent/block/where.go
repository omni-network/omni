// Code generated by ent, DO NOT EDIT.

package block

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldID, id))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v []byte) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHash, v))
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldChainID, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHeight, v))
}

// Offset applies equality check predicate on the "offset" field. It's identical to OffsetEQ.
func Offset(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldOffset, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTimestamp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreatedAt, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v []byte) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v []byte) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...[]byte) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...[]byte) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v []byte) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v []byte) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v []byte) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v []byte) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldHash, v))
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldChainID, v))
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldChainID, v))
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldChainID, vs...))
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldChainID, vs...))
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldChainID, v))
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldChainID, v))
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldChainID, v))
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldChainID, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldHeight, v))
}

// OffsetEQ applies the EQ predicate on the "offset" field.
func OffsetEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldOffset, v))
}

// OffsetNEQ applies the NEQ predicate on the "offset" field.
func OffsetNEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldOffset, v))
}

// OffsetIn applies the In predicate on the "offset" field.
func OffsetIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldOffset, vs...))
}

// OffsetNotIn applies the NotIn predicate on the "offset" field.
func OffsetNotIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldOffset, vs...))
}

// OffsetGT applies the GT predicate on the "offset" field.
func OffsetGT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldOffset, v))
}

// OffsetGTE applies the GTE predicate on the "offset" field.
func OffsetGTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldOffset, v))
}

// OffsetLT applies the LT predicate on the "offset" field.
func OffsetLT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldOffset, v))
}

// OffsetLTE applies the LTE predicate on the "offset" field.
func OffsetLTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldOffset, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTimestamp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldCreatedAt, v))
}

// HasMsgs applies the HasEdge predicate on the "msgs" edge.
func HasMsgs() predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MsgsTable, MsgsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMsgsWith applies the HasEdge predicate on the "msgs" edge with a given conditions (other predicates).
func HasMsgsWith(preds ...predicate.Msg) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := newMsgsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceipts applies the HasEdge predicate on the "receipts" edge.
func HasReceipts() predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReceiptsTable, ReceiptsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiptsWith applies the HasEdge predicate on the "receipts" edge with a given conditions (other predicates).
func HasReceiptsWith(preds ...predicate.Receipt) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := newReceiptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Block) predicate.Block {
	return predicate.Block(sql.NotPredicates(p))
}
