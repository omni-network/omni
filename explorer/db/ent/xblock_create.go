// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/omni-network/omni/explorer/db/ent/xblock"
)

// XBlockCreate is the builder for creating a XBlock entity.
type XBlockCreate struct {
	config
	mutation *XBlockMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (xc *XBlockCreate) SetUUID(u uuid.UUID) *XBlockCreate {
	xc.mutation.SetUUID(u)
	return xc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (xc *XBlockCreate) SetNillableUUID(u *uuid.UUID) *XBlockCreate {
	if u != nil {
		xc.SetUUID(*u)
	}
	return xc
}

// Mutation returns the XBlockMutation object of the builder.
func (xc *XBlockCreate) Mutation() *XBlockMutation {
	return xc.mutation
}

// Save creates the XBlock in the database.
func (xc *XBlockCreate) Save(ctx context.Context) (*XBlock, error) {
	xc.defaults()
	return withHooks(ctx, xc.sqlSave, xc.mutation, xc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (xc *XBlockCreate) SaveX(ctx context.Context) *XBlock {
	v, err := xc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xc *XBlockCreate) Exec(ctx context.Context) error {
	_, err := xc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xc *XBlockCreate) ExecX(ctx context.Context) {
	if err := xc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xc *XBlockCreate) defaults() {
	if _, ok := xc.mutation.UUID(); !ok {
		v := xblock.DefaultUUID()
		xc.mutation.SetUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xc *XBlockCreate) check() error {
	if _, ok := xc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "XBlock.uuid"`)}
	}
	return nil
}

func (xc *XBlockCreate) sqlSave(ctx context.Context) (*XBlock, error) {
	if err := xc.check(); err != nil {
		return nil, err
	}
	_node, _spec := xc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	xc.mutation.id = &_node.ID
	xc.mutation.done = true
	return _node, nil
}

func (xc *XBlockCreate) createSpec() (*XBlock, *sqlgraph.CreateSpec) {
	var (
		_node = &XBlock{config: xc.config}
		_spec = sqlgraph.NewCreateSpec(xblock.Table, sqlgraph.NewFieldSpec(xblock.FieldID, field.TypeInt))
	)
	if value, ok := xc.mutation.UUID(); ok {
		_spec.SetField(xblock.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	return _node, _spec
}

// XBlockCreateBulk is the builder for creating many XBlock entities in bulk.
type XBlockCreateBulk struct {
	config
	err      error
	builders []*XBlockCreate
}

// Save creates the XBlock entities in the database.
func (xcb *XBlockCreateBulk) Save(ctx context.Context) ([]*XBlock, error) {
	if xcb.err != nil {
		return nil, xcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(xcb.builders))
	nodes := make([]*XBlock, len(xcb.builders))
	mutators := make([]Mutator, len(xcb.builders))
	for i := range xcb.builders {
		func(i int, root context.Context) {
			builder := xcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XBlockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xcb *XBlockCreateBulk) SaveX(ctx context.Context) []*XBlock {
	v, err := xcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xcb *XBlockCreateBulk) Exec(ctx context.Context) error {
	_, err := xcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xcb *XBlockCreateBulk) ExecX(ctx context.Context) {
	if err := xcb.Exec(ctx); err != nil {
		panic(err)
	}
}
