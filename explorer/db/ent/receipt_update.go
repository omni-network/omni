// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omni-network/omni/explorer/db/ent/block"
	"github.com/omni-network/omni/explorer/db/ent/msg"
	"github.com/omni-network/omni/explorer/db/ent/predicate"
	"github.com/omni-network/omni/explorer/db/ent/receipt"
)

// ReceiptUpdate is the builder for updating Receipt entities.
type ReceiptUpdate struct {
	config
	hooks    []Hook
	mutation *ReceiptMutation
}

// Where appends a list predicates to the ReceiptUpdate builder.
func (ru *ReceiptUpdate) Where(ps ...predicate.Receipt) *ReceiptUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetBlockHash sets the "block_hash" field.
func (ru *ReceiptUpdate) SetBlockHash(b []byte) *ReceiptUpdate {
	ru.mutation.SetBlockHash(b)
	return ru
}

// SetGasUsed sets the "gas_used" field.
func (ru *ReceiptUpdate) SetGasUsed(u uint64) *ReceiptUpdate {
	ru.mutation.ResetGasUsed()
	ru.mutation.SetGasUsed(u)
	return ru
}

// SetNillableGasUsed sets the "gas_used" field if the given value is not nil.
func (ru *ReceiptUpdate) SetNillableGasUsed(u *uint64) *ReceiptUpdate {
	if u != nil {
		ru.SetGasUsed(*u)
	}
	return ru
}

// AddGasUsed adds u to the "gas_used" field.
func (ru *ReceiptUpdate) AddGasUsed(u int64) *ReceiptUpdate {
	ru.mutation.AddGasUsed(u)
	return ru
}

// SetSuccess sets the "success" field.
func (ru *ReceiptUpdate) SetSuccess(b bool) *ReceiptUpdate {
	ru.mutation.SetSuccess(b)
	return ru
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (ru *ReceiptUpdate) SetNillableSuccess(b *bool) *ReceiptUpdate {
	if b != nil {
		ru.SetSuccess(*b)
	}
	return ru
}

// SetRelayerAddress sets the "relayer_address" field.
func (ru *ReceiptUpdate) SetRelayerAddress(b []byte) *ReceiptUpdate {
	ru.mutation.SetRelayerAddress(b)
	return ru
}

// SetSourceChainID sets the "source_chain_id" field.
func (ru *ReceiptUpdate) SetSourceChainID(u uint64) *ReceiptUpdate {
	ru.mutation.ResetSourceChainID()
	ru.mutation.SetSourceChainID(u)
	return ru
}

// SetNillableSourceChainID sets the "source_chain_id" field if the given value is not nil.
func (ru *ReceiptUpdate) SetNillableSourceChainID(u *uint64) *ReceiptUpdate {
	if u != nil {
		ru.SetSourceChainID(*u)
	}
	return ru
}

// AddSourceChainID adds u to the "source_chain_id" field.
func (ru *ReceiptUpdate) AddSourceChainID(u int64) *ReceiptUpdate {
	ru.mutation.AddSourceChainID(u)
	return ru
}

// SetDestChainID sets the "dest_chain_id" field.
func (ru *ReceiptUpdate) SetDestChainID(u uint64) *ReceiptUpdate {
	ru.mutation.ResetDestChainID()
	ru.mutation.SetDestChainID(u)
	return ru
}

// SetNillableDestChainID sets the "dest_chain_id" field if the given value is not nil.
func (ru *ReceiptUpdate) SetNillableDestChainID(u *uint64) *ReceiptUpdate {
	if u != nil {
		ru.SetDestChainID(*u)
	}
	return ru
}

// AddDestChainID adds u to the "dest_chain_id" field.
func (ru *ReceiptUpdate) AddDestChainID(u int64) *ReceiptUpdate {
	ru.mutation.AddDestChainID(u)
	return ru
}

// SetOffset sets the "offset" field.
func (ru *ReceiptUpdate) SetOffset(u uint64) *ReceiptUpdate {
	ru.mutation.ResetOffset()
	ru.mutation.SetOffset(u)
	return ru
}

// SetNillableOffset sets the "offset" field if the given value is not nil.
func (ru *ReceiptUpdate) SetNillableOffset(u *uint64) *ReceiptUpdate {
	if u != nil {
		ru.SetOffset(*u)
	}
	return ru
}

// AddOffset adds u to the "offset" field.
func (ru *ReceiptUpdate) AddOffset(u int64) *ReceiptUpdate {
	ru.mutation.AddOffset(u)
	return ru
}

// SetTxHash sets the "tx_hash" field.
func (ru *ReceiptUpdate) SetTxHash(b []byte) *ReceiptUpdate {
	ru.mutation.SetTxHash(b)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReceiptUpdate) SetCreatedAt(t time.Time) *ReceiptUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReceiptUpdate) SetNillableCreatedAt(t *time.Time) *ReceiptUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetRevertReason sets the "revert_reason" field.
func (ru *ReceiptUpdate) SetRevertReason(s string) *ReceiptUpdate {
	ru.mutation.SetRevertReason(s)
	return ru
}

// SetNillableRevertReason sets the "revert_reason" field if the given value is not nil.
func (ru *ReceiptUpdate) SetNillableRevertReason(s *string) *ReceiptUpdate {
	if s != nil {
		ru.SetRevertReason(*s)
	}
	return ru
}

// ClearRevertReason clears the value of the "revert_reason" field.
func (ru *ReceiptUpdate) ClearRevertReason() *ReceiptUpdate {
	ru.mutation.ClearRevertReason()
	return ru
}

// AddBlockIDs adds the "block" edge to the Block entity by IDs.
func (ru *ReceiptUpdate) AddBlockIDs(ids ...int) *ReceiptUpdate {
	ru.mutation.AddBlockIDs(ids...)
	return ru
}

// AddBlock adds the "block" edges to the Block entity.
func (ru *ReceiptUpdate) AddBlock(b ...*Block) *ReceiptUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.AddBlockIDs(ids...)
}

// AddMsgIDs adds the "msgs" edge to the Msg entity by IDs.
func (ru *ReceiptUpdate) AddMsgIDs(ids ...int) *ReceiptUpdate {
	ru.mutation.AddMsgIDs(ids...)
	return ru
}

// AddMsgs adds the "msgs" edges to the Msg entity.
func (ru *ReceiptUpdate) AddMsgs(m ...*Msg) *ReceiptUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMsgIDs(ids...)
}

// Mutation returns the ReceiptMutation object of the builder.
func (ru *ReceiptUpdate) Mutation() *ReceiptMutation {
	return ru.mutation
}

// ClearBlock clears all "block" edges to the Block entity.
func (ru *ReceiptUpdate) ClearBlock() *ReceiptUpdate {
	ru.mutation.ClearBlock()
	return ru
}

// RemoveBlockIDs removes the "block" edge to Block entities by IDs.
func (ru *ReceiptUpdate) RemoveBlockIDs(ids ...int) *ReceiptUpdate {
	ru.mutation.RemoveBlockIDs(ids...)
	return ru
}

// RemoveBlock removes "block" edges to Block entities.
func (ru *ReceiptUpdate) RemoveBlock(b ...*Block) *ReceiptUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.RemoveBlockIDs(ids...)
}

// ClearMsgs clears all "msgs" edges to the Msg entity.
func (ru *ReceiptUpdate) ClearMsgs() *ReceiptUpdate {
	ru.mutation.ClearMsgs()
	return ru
}

// RemoveMsgIDs removes the "msgs" edge to Msg entities by IDs.
func (ru *ReceiptUpdate) RemoveMsgIDs(ids ...int) *ReceiptUpdate {
	ru.mutation.RemoveMsgIDs(ids...)
	return ru
}

// RemoveMsgs removes "msgs" edges to Msg entities.
func (ru *ReceiptUpdate) RemoveMsgs(m ...*Msg) *ReceiptUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMsgIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReceiptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReceiptUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReceiptUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReceiptUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReceiptUpdate) check() error {
	if v, ok := ru.mutation.BlockHash(); ok {
		if err := receipt.BlockHashValidator(v); err != nil {
			return &ValidationError{Name: "block_hash", err: fmt.Errorf(`ent: validator failed for field "Receipt.block_hash": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RelayerAddress(); ok {
		if err := receipt.RelayerAddressValidator(v); err != nil {
			return &ValidationError{Name: "relayer_address", err: fmt.Errorf(`ent: validator failed for field "Receipt.relayer_address": %w`, err)}
		}
	}
	if v, ok := ru.mutation.TxHash(); ok {
		if err := receipt.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "Receipt.tx_hash": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RevertReason(); ok {
		if err := receipt.RevertReasonValidator(v); err != nil {
			return &ValidationError{Name: "revert_reason", err: fmt.Errorf(`ent: validator failed for field "Receipt.revert_reason": %w`, err)}
		}
	}
	return nil
}

func (ru *ReceiptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(receipt.Table, receipt.Columns, sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.BlockHash(); ok {
		_spec.SetField(receipt.FieldBlockHash, field.TypeBytes, value)
	}
	if value, ok := ru.mutation.GasUsed(); ok {
		_spec.SetField(receipt.FieldGasUsed, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedGasUsed(); ok {
		_spec.AddField(receipt.FieldGasUsed, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.Success(); ok {
		_spec.SetField(receipt.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := ru.mutation.RelayerAddress(); ok {
		_spec.SetField(receipt.FieldRelayerAddress, field.TypeBytes, value)
	}
	if value, ok := ru.mutation.SourceChainID(); ok {
		_spec.SetField(receipt.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedSourceChainID(); ok {
		_spec.AddField(receipt.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.DestChainID(); ok {
		_spec.SetField(receipt.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedDestChainID(); ok {
		_spec.AddField(receipt.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.Offset(); ok {
		_spec.SetField(receipt.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedOffset(); ok {
		_spec.AddField(receipt.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.TxHash(); ok {
		_spec.SetField(receipt.FieldTxHash, field.TypeBytes, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(receipt.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.RevertReason(); ok {
		_spec.SetField(receipt.FieldRevertReason, field.TypeString, value)
	}
	if ru.mutation.RevertReasonCleared() {
		_spec.ClearField(receipt.FieldRevertReason, field.TypeString)
	}
	if ru.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.BlockTable,
			Columns: receipt.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedBlockIDs(); len(nodes) > 0 && !ru.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.BlockTable,
			Columns: receipt.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.BlockTable,
			Columns: receipt.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.MsgsTable,
			Columns: receipt.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMsgsIDs(); len(nodes) > 0 && !ru.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.MsgsTable,
			Columns: receipt.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MsgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.MsgsTable,
			Columns: receipt.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReceiptUpdateOne is the builder for updating a single Receipt entity.
type ReceiptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReceiptMutation
}

// SetBlockHash sets the "block_hash" field.
func (ruo *ReceiptUpdateOne) SetBlockHash(b []byte) *ReceiptUpdateOne {
	ruo.mutation.SetBlockHash(b)
	return ruo
}

// SetGasUsed sets the "gas_used" field.
func (ruo *ReceiptUpdateOne) SetGasUsed(u uint64) *ReceiptUpdateOne {
	ruo.mutation.ResetGasUsed()
	ruo.mutation.SetGasUsed(u)
	return ruo
}

// SetNillableGasUsed sets the "gas_used" field if the given value is not nil.
func (ruo *ReceiptUpdateOne) SetNillableGasUsed(u *uint64) *ReceiptUpdateOne {
	if u != nil {
		ruo.SetGasUsed(*u)
	}
	return ruo
}

// AddGasUsed adds u to the "gas_used" field.
func (ruo *ReceiptUpdateOne) AddGasUsed(u int64) *ReceiptUpdateOne {
	ruo.mutation.AddGasUsed(u)
	return ruo
}

// SetSuccess sets the "success" field.
func (ruo *ReceiptUpdateOne) SetSuccess(b bool) *ReceiptUpdateOne {
	ruo.mutation.SetSuccess(b)
	return ruo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (ruo *ReceiptUpdateOne) SetNillableSuccess(b *bool) *ReceiptUpdateOne {
	if b != nil {
		ruo.SetSuccess(*b)
	}
	return ruo
}

// SetRelayerAddress sets the "relayer_address" field.
func (ruo *ReceiptUpdateOne) SetRelayerAddress(b []byte) *ReceiptUpdateOne {
	ruo.mutation.SetRelayerAddress(b)
	return ruo
}

// SetSourceChainID sets the "source_chain_id" field.
func (ruo *ReceiptUpdateOne) SetSourceChainID(u uint64) *ReceiptUpdateOne {
	ruo.mutation.ResetSourceChainID()
	ruo.mutation.SetSourceChainID(u)
	return ruo
}

// SetNillableSourceChainID sets the "source_chain_id" field if the given value is not nil.
func (ruo *ReceiptUpdateOne) SetNillableSourceChainID(u *uint64) *ReceiptUpdateOne {
	if u != nil {
		ruo.SetSourceChainID(*u)
	}
	return ruo
}

// AddSourceChainID adds u to the "source_chain_id" field.
func (ruo *ReceiptUpdateOne) AddSourceChainID(u int64) *ReceiptUpdateOne {
	ruo.mutation.AddSourceChainID(u)
	return ruo
}

// SetDestChainID sets the "dest_chain_id" field.
func (ruo *ReceiptUpdateOne) SetDestChainID(u uint64) *ReceiptUpdateOne {
	ruo.mutation.ResetDestChainID()
	ruo.mutation.SetDestChainID(u)
	return ruo
}

// SetNillableDestChainID sets the "dest_chain_id" field if the given value is not nil.
func (ruo *ReceiptUpdateOne) SetNillableDestChainID(u *uint64) *ReceiptUpdateOne {
	if u != nil {
		ruo.SetDestChainID(*u)
	}
	return ruo
}

// AddDestChainID adds u to the "dest_chain_id" field.
func (ruo *ReceiptUpdateOne) AddDestChainID(u int64) *ReceiptUpdateOne {
	ruo.mutation.AddDestChainID(u)
	return ruo
}

// SetOffset sets the "offset" field.
func (ruo *ReceiptUpdateOne) SetOffset(u uint64) *ReceiptUpdateOne {
	ruo.mutation.ResetOffset()
	ruo.mutation.SetOffset(u)
	return ruo
}

// SetNillableOffset sets the "offset" field if the given value is not nil.
func (ruo *ReceiptUpdateOne) SetNillableOffset(u *uint64) *ReceiptUpdateOne {
	if u != nil {
		ruo.SetOffset(*u)
	}
	return ruo
}

// AddOffset adds u to the "offset" field.
func (ruo *ReceiptUpdateOne) AddOffset(u int64) *ReceiptUpdateOne {
	ruo.mutation.AddOffset(u)
	return ruo
}

// SetTxHash sets the "tx_hash" field.
func (ruo *ReceiptUpdateOne) SetTxHash(b []byte) *ReceiptUpdateOne {
	ruo.mutation.SetTxHash(b)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReceiptUpdateOne) SetCreatedAt(t time.Time) *ReceiptUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReceiptUpdateOne) SetNillableCreatedAt(t *time.Time) *ReceiptUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetRevertReason sets the "revert_reason" field.
func (ruo *ReceiptUpdateOne) SetRevertReason(s string) *ReceiptUpdateOne {
	ruo.mutation.SetRevertReason(s)
	return ruo
}

// SetNillableRevertReason sets the "revert_reason" field if the given value is not nil.
func (ruo *ReceiptUpdateOne) SetNillableRevertReason(s *string) *ReceiptUpdateOne {
	if s != nil {
		ruo.SetRevertReason(*s)
	}
	return ruo
}

// ClearRevertReason clears the value of the "revert_reason" field.
func (ruo *ReceiptUpdateOne) ClearRevertReason() *ReceiptUpdateOne {
	ruo.mutation.ClearRevertReason()
	return ruo
}

// AddBlockIDs adds the "block" edge to the Block entity by IDs.
func (ruo *ReceiptUpdateOne) AddBlockIDs(ids ...int) *ReceiptUpdateOne {
	ruo.mutation.AddBlockIDs(ids...)
	return ruo
}

// AddBlock adds the "block" edges to the Block entity.
func (ruo *ReceiptUpdateOne) AddBlock(b ...*Block) *ReceiptUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.AddBlockIDs(ids...)
}

// AddMsgIDs adds the "msgs" edge to the Msg entity by IDs.
func (ruo *ReceiptUpdateOne) AddMsgIDs(ids ...int) *ReceiptUpdateOne {
	ruo.mutation.AddMsgIDs(ids...)
	return ruo
}

// AddMsgs adds the "msgs" edges to the Msg entity.
func (ruo *ReceiptUpdateOne) AddMsgs(m ...*Msg) *ReceiptUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMsgIDs(ids...)
}

// Mutation returns the ReceiptMutation object of the builder.
func (ruo *ReceiptUpdateOne) Mutation() *ReceiptMutation {
	return ruo.mutation
}

// ClearBlock clears all "block" edges to the Block entity.
func (ruo *ReceiptUpdateOne) ClearBlock() *ReceiptUpdateOne {
	ruo.mutation.ClearBlock()
	return ruo
}

// RemoveBlockIDs removes the "block" edge to Block entities by IDs.
func (ruo *ReceiptUpdateOne) RemoveBlockIDs(ids ...int) *ReceiptUpdateOne {
	ruo.mutation.RemoveBlockIDs(ids...)
	return ruo
}

// RemoveBlock removes "block" edges to Block entities.
func (ruo *ReceiptUpdateOne) RemoveBlock(b ...*Block) *ReceiptUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.RemoveBlockIDs(ids...)
}

// ClearMsgs clears all "msgs" edges to the Msg entity.
func (ruo *ReceiptUpdateOne) ClearMsgs() *ReceiptUpdateOne {
	ruo.mutation.ClearMsgs()
	return ruo
}

// RemoveMsgIDs removes the "msgs" edge to Msg entities by IDs.
func (ruo *ReceiptUpdateOne) RemoveMsgIDs(ids ...int) *ReceiptUpdateOne {
	ruo.mutation.RemoveMsgIDs(ids...)
	return ruo
}

// RemoveMsgs removes "msgs" edges to Msg entities.
func (ruo *ReceiptUpdateOne) RemoveMsgs(m ...*Msg) *ReceiptUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMsgIDs(ids...)
}

// Where appends a list predicates to the ReceiptUpdate builder.
func (ruo *ReceiptUpdateOne) Where(ps ...predicate.Receipt) *ReceiptUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReceiptUpdateOne) Select(field string, fields ...string) *ReceiptUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Receipt entity.
func (ruo *ReceiptUpdateOne) Save(ctx context.Context) (*Receipt, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReceiptUpdateOne) SaveX(ctx context.Context) *Receipt {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReceiptUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReceiptUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReceiptUpdateOne) check() error {
	if v, ok := ruo.mutation.BlockHash(); ok {
		if err := receipt.BlockHashValidator(v); err != nil {
			return &ValidationError{Name: "block_hash", err: fmt.Errorf(`ent: validator failed for field "Receipt.block_hash": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RelayerAddress(); ok {
		if err := receipt.RelayerAddressValidator(v); err != nil {
			return &ValidationError{Name: "relayer_address", err: fmt.Errorf(`ent: validator failed for field "Receipt.relayer_address": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.TxHash(); ok {
		if err := receipt.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "Receipt.tx_hash": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RevertReason(); ok {
		if err := receipt.RevertReasonValidator(v); err != nil {
			return &ValidationError{Name: "revert_reason", err: fmt.Errorf(`ent: validator failed for field "Receipt.revert_reason": %w`, err)}
		}
	}
	return nil
}

func (ruo *ReceiptUpdateOne) sqlSave(ctx context.Context) (_node *Receipt, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(receipt.Table, receipt.Columns, sqlgraph.NewFieldSpec(receipt.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Receipt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, receipt.FieldID)
		for _, f := range fields {
			if !receipt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != receipt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.BlockHash(); ok {
		_spec.SetField(receipt.FieldBlockHash, field.TypeBytes, value)
	}
	if value, ok := ruo.mutation.GasUsed(); ok {
		_spec.SetField(receipt.FieldGasUsed, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedGasUsed(); ok {
		_spec.AddField(receipt.FieldGasUsed, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.Success(); ok {
		_spec.SetField(receipt.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.RelayerAddress(); ok {
		_spec.SetField(receipt.FieldRelayerAddress, field.TypeBytes, value)
	}
	if value, ok := ruo.mutation.SourceChainID(); ok {
		_spec.SetField(receipt.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedSourceChainID(); ok {
		_spec.AddField(receipt.FieldSourceChainID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.DestChainID(); ok {
		_spec.SetField(receipt.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedDestChainID(); ok {
		_spec.AddField(receipt.FieldDestChainID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.Offset(); ok {
		_spec.SetField(receipt.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedOffset(); ok {
		_spec.AddField(receipt.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.TxHash(); ok {
		_spec.SetField(receipt.FieldTxHash, field.TypeBytes, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(receipt.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.RevertReason(); ok {
		_spec.SetField(receipt.FieldRevertReason, field.TypeString, value)
	}
	if ruo.mutation.RevertReasonCleared() {
		_spec.ClearField(receipt.FieldRevertReason, field.TypeString)
	}
	if ruo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.BlockTable,
			Columns: receipt.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedBlockIDs(); len(nodes) > 0 && !ruo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.BlockTable,
			Columns: receipt.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.BlockTable,
			Columns: receipt.BlockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.MsgsTable,
			Columns: receipt.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMsgsIDs(); len(nodes) > 0 && !ruo.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.MsgsTable,
			Columns: receipt.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MsgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   receipt.MsgsTable,
			Columns: receipt.MsgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Receipt{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
