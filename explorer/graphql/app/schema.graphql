"""
Bytes32 is a 32 byte binary string, represented as 0x-prefixed hexadecimal.
"""
scalar Bytes32

"""
Address is a 20 byte Ethereum address, represented as 0x-prefixed hexadecimal.
"""
scalar Address

"""
Bytes is an arbitrary length binary string, represented as 0x-prefixed hexadecimal.
An empty byte string is represented as '0x'. Byte strings must have an even number of hexadecimal nybbles.
"""
scalar Bytes

"""
BigInt is a large integer. Input is accepted as either a JSON number or as a string.
Strings may be either decimal or 0x-prefixed hexadecimal. Output values are all
0x-prefixed hexadecimal.
"""
scalar BigInt

"""
Long is a 64 bit unsigned integer. Input is accepted as either a JSON number or as a string.
Strings may be either decimal or 0x-prefixed hexadecimal.
Output values are all 0x-prefixed hexadecimal.
"""
scalar Long

"""
XMsgStatus represents the status of X messages.
"""
enum XMsgStatus {
  PENDING
  PROCESSED
  FAILED
}

"""
XMsg is a cross-chain message.
"""
type XMsg {
  "ID of the XMsg"
  ID: ID!

  "Display ID of the XMsg in the form of `<srcChainID>-<destChainID>-<offset>`"
  DisplayID: String!

  "Monotonically incremented offset of Msg in the Stream"
  Offset: BigInt!

  "Sender on source chain, set to msg.Sender"
  SourceMessageSender: Address!

  "Target/To address to 'call' on destination chain"
  DestAddress: Address!

  "Gas limit to use for 'call' on destination chain"
  DestGasLimit: BigInt!

  "Source chain ID as per https://chainlist.org/"
  SourceChainID: BigInt!

  "Destination chain ID as per https://chainlist.org/"
  DestChainID: BigInt!

  "Hash of the source chain transaction that emitted the message"
  TxHash: Bytes32!

  "Height of the source chain block"
  BlockHeight: BigInt!

  "Hash of the source chain block"
  BlockHash: Bytes32!

  "Hash of destination chain receipt"
  ReceiptTxHash: Bytes32

  "Status of the message"
  Status: XMsgStatus!

  "Timestamp of the source chain block"
  SourceBlockTime: Time!

  "XBlock message was emitted in"
  Block: XBlock!

  "Receipts of the message if available"
  Receipt: XReceipt
}

"""
XBlock represents a cross-chain block.
"""
type XBlock {
  "Source chain ID as per https://chainlist.org"
  SourceChainID: BigInt!

  "Height of the source chain block"
  BlockHeight: BigInt!

  "Hash of the source chain block"
  BlockHash: Bytes32!

  "All cross-chain messages sent/emittted in the block"
  Messages: [XMsg!]!

  "Timestamp of the source chain block"
  Timestamp: Time!
}

"""
XReceipt represents a cross-chain receipt.
"""
type XReceipt {
  "ID of the receipt"
  ID: ID!

  "Gas used for the cross-chain message"
  GasUsed: BigInt!

  "Success of the cross-chain message"
  Success: Boolean!

  "Address of the relayer"
  RelayerAddress: Address!

  "Source chain ID as per https://chainlist.org"
  SourceChainID: BigInt!

  "Destination chain ID as per https://chainlist.org"
  DestChainID: BigInt!

  "Monotonically incremented offset of Msg in the Stream"
  Offset: BigInt!

  "Hash of the source chain transaction that emitted the message"
  TxHash: Bytes32!

  "Timestamp of the receipt"
  Timestamp: Time!

  "XBlock message was emitted in"
  Block: XBlock!

  "Messages associated with this receipt"
  Messages: [XMsg!]!
}

"""
Chain represents a blockchain on the https://chainlist.org.
"""
type Chain {
  "Chain ID as per https://chainlist.org"
  ChainID: BigInt!

  "Chain name"
  Name: String!
}

"""
XMsgResult represents a paginated list of XMsgs
"""
type XMsgResult {
  "Total number of XMsgs"
  TotalCount: BigInt!

  "XMsgs"
  Edges: [XMsgEdge!]!

  "Page Info"
  PageInfo: PageInfo!
}

"""
XMessageEdge represents a single XMsg in a paginated list
"""
type XMsgEdge {
  "Cursor"
  Cursor: BigInt!

  "XMsg"
  Node: XMsg!
}

"""
PageInfo represents pagination information
"""
type PageInfo {
  "The cursor to the first page. Null if not available."
  FirstCursor: ID

  "The cursor to the last page. Null if not available."
  LastCursor: ID

  "Next page cursor. Null if not available."
  NextCursor: ID

  "Has next page"
  HasNextPage: Boolean!

  "Previous page cursor. Null if not available."
  PrevCursor: ID

  "Previous page cursor"
  HasPrevPage: Boolean!

  "Total number of pages"
  TotalPages: Int!

  "Current page number"
  CurrentPage: Int!
}

"""
The query type represents all of the entry points into our object graph.
"""
type Query {
  "Retrieve a specific XBlock by source chain ID and height on that chain."
  xblock(sourceChainID: BigInt!, height: BigInt!): XBlock

  "Retrieve a specific XReceipt by source chain ID, destination chain ID, and stream offset."
  xreceipt(sourceChainID: BigInt!, destChainID: BigInt!, offset: BigInt!): XReceipt

  "Retrieve a specific XMsg by source chain ID, destination chain ID, and stream offset."
  xmsg(sourceChainID: BigInt!, destChainID: BigInt!, offset: BigInt!): XMsg

  "Returns a paginated list of XMsgs based on the provided arguments. For forwards pagination, provide `first` and `after`. For backwards pagination, provide `last` and `before`. Defaults to the last 50 messages."
  xmsgs(first: Int, after: ID, last: Int = 50, before: ID): XMsgResult!

  "Search for cross-chain messages using a query string.  For forwards pagination, provide `first` and `after`. For backwards pagination, provide `last` and `before`. Defaults to the last 50 messages."
  search(query: String!, first: Int, after: ID, last: Int = 50, before: ID): XMsgResult!

  "Get the list of supported chains."
  supportedchains: [Chain]!
}
