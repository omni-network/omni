"""
Bytes32 is a 32 byte binary string, represented as 0x-prefixed hexadecimal.
"""
scalar Bytes32

"""
Address is a 20 byte Ethereum address, represented as 0x-prefixed hexadecimal.
"""
scalar Address

"""
Bytes is an arbitrary length binary string, represented as 0x-prefixed hexadecimal.
An empty byte string is represented as '0x'. Byte strings must have an even number of hexadecimal nybbles.
"""
scalar Bytes

"""
BigInt is a large integer. Input is accepted as either a JSON number or as a string.
Strings may be either decimal or 0x-prefixed hexadecimal. Output values are all
0x-prefixed hexadecimal.
"""
scalar BigInt

"""
Long is a 64 bit unsigned integer. Input is accepted as either a JSON number or as a string.
Strings may be either decimal or 0x-prefixed hexadecimal.
Output values are all 0x-prefixed hexadecimal.
"""
scalar Long

"""
Time is an time.RFC3339 encoded UTC date string or a string containing a Unix timestamp.
"""
scalar Time

"""
Status represents the status of an XMsg.
"""
enum Status {
  FAILED
  PENDING
  SUCCESS
}

"""
XBlock represents a cross-chain block.
"""
type XBlock {
  "ID of the block"
  id: ID!

  "URL to view the block on the source chain"
  url: String!

  "Source chain ID as per https://chainlist.org"
  chainID: BigInt!

  "Height of the source chain block"
  height: BigInt!

  "Hash of the source chain block"
  hash: Bytes32!

  "All cross-chain messages sent/emittted in the block"
  messages: [XMsg!]!

  "Timestamp of the source chain block"
  timestamp: Time!
}

"""
XMsg is a cross-chain message.
"""
type XMsg {
  "ID of the XMsg"
  id: ID!

  "Display ID of the XMsg in the form of `<srcChainID>-<destChainID>-<offset>`"
  displayID: String!

  "Monotonically incremented offset of XMsg on the source > dest stream"
  offset: BigInt!

  "The address of the sender on the source chain."
  sender: Address!

  "URL to view the address of the sender on the source chain."
  senderUrl: String!

  "Target/To address to 'call' on the destination chain"
  to: Address!

  "URL to view the address of the target on the destination chain."
  toUrl: String!

  "Gas limit to use for 'call' on destination chain"
  gasLimit: BigInt!

  "Source chain ID as per https://chainlist.org/"
  sourceChainID: BigInt!

  "Destination chain ID as per https://chainlist.org/"
  destChainID: BigInt!

  "Hash of the source chain transaction that emitted the message"
  txHash: Bytes32!

  "URL to view the transaction on the source chain"
  txUrl: String!

  "Status of the X message"
  status: Status!

  "XBlock message was emitted in"
  block: XBlock!

  "Receipts of the message if available"
  receipt: XReceipt
}

"""
XReceipt represents a cross-chain receipt.
"""
type XReceipt {
  "ID of the receipt"
  id: ID!

  "Gas used for the cross-chain message"
  gasUsed: BigInt!

  "Success indicates whether the message was successfully executed on the destination chain."
  success: Boolean!

  "Address of the relayer"
  relayer: Address!

  "Source chain ID as per https://chainlist.org"
  sourceChainID: BigInt!

  "Destination chain ID as per https://chainlist.org"
  destChainID: BigInt!

  "Monotonically incremented offset of Msg in the Stream"
  offset: BigInt!

  "Hash of the dest chain transaction"
  txHash: Bytes32!

  "URL to view the transaction on the destination chain"
  txUrl: String!

  "Timestamp of the receipt"
  timestamp: Time!

  "Revert reason if the message failed"
  revertReason: String
}

"""
Chain represents a blockchain on the https://chainlist.org.
"""
type Chain {
  "ID of the chain"
  id: ID!

  "Chain ID as per https://chainlist.org"
  chainID: BigInt!

  "Chain name"
  name: String!
}

"""
XMsgConnection represents a paginated list of XMsgs
"""
type XMsgConnection {
  "Total number of XMsgs"
  totalCount: Long!

  "edges is a list of XMsgs with cursor information"
  edges: [XMsgEdge!]!

  "Page Info contains pagination information necessary for UI pagination"
  pageInfo: PageInfo!
}

"""
XMessageEdge represents a single XMsg in a paginated list
"""
type XMsgEdge {
  "Cursor"
  cursor: ID!

  "XMsg"
  node: XMsg!
}

"""
PageInfo represents pagination information
"""
type PageInfo {
  "hasNextPage is true if there is a next page"
  hasNextPage: Boolean!

  "hasPrevPage is true if there is a previous page"
  hasPrevPage: Boolean!

  "Total number of pages"
  totalPages: Long!

  "Current page number"
  currentPage: Long!
}

"""
FilterInput represents a filter to apply to underlying entities.
"""
input FilterInput {
  key: String!
  value: String!
}

"""
The query type represents all of the read-only entry points into our object graph.
"""
type Query {
  "Retrieve a specific XBlock by source chain ID and height on that chain."
  xblock(chainID: BigInt!, height: BigInt!): XBlock

  "Retrieve a specific XReceipt by source chain ID, destination chain ID and offset."
  xreceipt(sourceChainID: BigInt!, destChainID: BigInt!, offset: BigInt!): XReceipt

  "Retrieve a specific XMsg by source chain ID, destination chain ID and offset."
  xmsg(sourceChainID: BigInt!, destChainID: BigInt!, offset: BigInt!): XMsg

  "Returns a paginated list of XMsgs based on the provided arguments. For forwards pagination, provide `first` and `after`. For backwards pagination, provide `last` and `before`. Defaults to the last 10 messages. `after` and `before` are the cursors of the last and first messages from the current page respectively."
  xmsgs(
    "Filters to apply to the XMsgs. Accepted filters are: `address` (checks for both `sender` or `to` addresses), `status`, `sourceChainID`, `destChainID`, `txHash` (checks for transactions on both the source and the destination chains)."
    filters: [FilterInput!],

    "Number of XMsgs to return for forwards pagination."
    first: Int,

    "Cursor to start forwards pagination from."
    after: ID,

    "Number of XMsgs to return for backwards pagination."
    last: Int,

    "Cursor to start backwards pagination from."
    before: ID
  ): XMsgConnection!

  "Returns the list of supported chains."
  supportedChains: [Chain!]!
}
