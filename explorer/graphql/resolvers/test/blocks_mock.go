// Code generated by MockGen. DO NOT EDIT.
// Source: blocks.go
//
// Generated by this command:
//
//	mockgen -destination=./tests/blocks_mock.go -package=resolvers_tests -source=blocks.go
//

// Package resolvers_tests is a generated GoMock package.
package resolvers_test

import (
	reflect "reflect"

	resolvers "github.com/omni-network/omni/explorer/graphql/resolvers"
	gomock "go.uber.org/mock/gomock"
)

// MockBlocksProvider is a mock of BlocksProvider interface.
type MockBlocksProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBlocksProviderMockRecorder
}

// MockBlocksProviderMockRecorder is the mock recorder for MockBlocksProvider.
type MockBlocksProviderMockRecorder struct {
	mock *MockBlocksProvider
}

// NewMockBlocksProvider creates a new mock instance.
func NewMockBlocksProvider(ctrl *gomock.Controller) *MockBlocksProvider {
	mock := &MockBlocksProvider{ctrl: ctrl}
	mock.recorder = &MockBlocksProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlocksProvider) EXPECT() *MockBlocksProviderMockRecorder {
	return m.recorder
}

// XBlock mocks base method.
func (m *MockBlocksProvider) XBlock(SourceChainID, Height uint64) (*resolvers.XBlock, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XBlock", SourceChainID, Height)
	ret0, _ := ret[0].(*resolvers.XBlock)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// XBlock indicates an expected call of XBlock.
func (mr *MockBlocksProviderMockRecorder) XBlock(SourceChainID, Height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XBlock", reflect.TypeOf((*MockBlocksProvider)(nil).XBlock), SourceChainID, Height)
}
